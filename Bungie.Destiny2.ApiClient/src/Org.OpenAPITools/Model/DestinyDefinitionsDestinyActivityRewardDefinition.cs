/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Activities can refer to one or more sets of tooltip-friendly reward data. These are the definitions for those tooltip friendly rewards.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyActivityRewardDefinition")]
    public partial class DestinyDefinitionsDestinyActivityRewardDefinition : IEquatable<DestinyDefinitionsDestinyActivityRewardDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyActivityRewardDefinition" /> class.
        /// </summary>
        /// <param name="rewardText">The header for the reward set, if any..</param>
        /// <param name="rewardItems">The \&quot;Items provided\&quot; in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can&#39;t actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you&#39;ll get in vague terms. And so too shall we.  Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these \&quot;dummy\&quot; items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?.</param>
        public DestinyDefinitionsDestinyActivityRewardDefinition(string rewardText = default(string), List<DestinyDestinyItemQuantity> rewardItems = default(List<DestinyDestinyItemQuantity>))
        {
            this.RewardText = rewardText;
            this.RewardItems = rewardItems;
        }

        /// <summary>
        /// The header for the reward set, if any.
        /// </summary>
        /// <value>The header for the reward set, if any.</value>
        [DataMember(Name = "rewardText", EmitDefaultValue = false)]
        public string RewardText { get; set; }

        /// <summary>
        /// The \&quot;Items provided\&quot; in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can&#39;t actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you&#39;ll get in vague terms. And so too shall we.  Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these \&quot;dummy\&quot; items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?
        /// </summary>
        /// <value>The \&quot;Items provided\&quot; in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can&#39;t actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you&#39;ll get in vague terms. And so too shall we.  Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these \&quot;dummy\&quot; items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?</value>
        [DataMember(Name = "rewardItems", EmitDefaultValue = false)]
        public List<DestinyDestinyItemQuantity> RewardItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyActivityRewardDefinition {\n");
            sb.Append("  RewardText: ").Append(RewardText).Append("\n");
            sb.Append("  RewardItems: ").Append(RewardItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyActivityRewardDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyActivityRewardDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyActivityRewardDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyActivityRewardDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RewardText == input.RewardText ||
                    (this.RewardText != null &&
                    this.RewardText.Equals(input.RewardText))
                ) && 
                (
                    this.RewardItems == input.RewardItems ||
                    this.RewardItems != null &&
                    input.RewardItems != null &&
                    this.RewardItems.SequenceEqual(input.RewardItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RewardText != null)
                {
                    hashCode = (hashCode * 59) + this.RewardText.GetHashCode();
                }
                if (this.RewardItems != null)
                {
                    hashCode = (hashCode * 59) + this.RewardItems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
