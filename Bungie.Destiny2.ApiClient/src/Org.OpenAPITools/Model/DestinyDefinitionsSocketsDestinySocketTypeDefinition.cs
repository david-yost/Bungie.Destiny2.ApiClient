/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// All Sockets have a \&quot;Type\&quot;: a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.  See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.Sockets.DestinySocketTypeDefinition")]
    public partial class DestinyDefinitionsSocketsDestinySocketTypeDefinition : IEquatable<DestinyDefinitionsSocketsDestinySocketTypeDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsSocketsDestinySocketTypeDefinition" /> class.
        /// </summary>
        /// <param name="displayProperties">displayProperties.</param>
        /// <param name="insertAction">insertAction.</param>
        /// <param name="plugWhitelist">A list of Plug \&quot;Categories\&quot; that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.  If the plug&#39;s category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted..</param>
        /// <param name="socketCategoryHash">socketCategoryHash.</param>
        /// <param name="visibility">Sometimes a socket isn&#39;t visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled..</param>
        /// <param name="alwaysRandomizeSockets">alwaysRandomizeSockets.</param>
        /// <param name="isPreviewEnabled">isPreviewEnabled.</param>
        /// <param name="hideDuplicateReusablePlugs">hideDuplicateReusablePlugs.</param>
        /// <param name="overridesUiAppearance">This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item&#39;s icon and nameplate..</param>
        /// <param name="avoidDuplicatesOnInitialization">avoidDuplicatesOnInitialization.</param>
        /// <param name="currencyScalars">currencyScalars.</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsSocketsDestinySocketTypeDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition insertAction = default(DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition), List<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition> plugWhitelist = default(List<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition>), int socketCategoryHash = default(int), int visibility = default(int), bool alwaysRandomizeSockets = default(bool), bool isPreviewEnabled = default(bool), bool hideDuplicateReusablePlugs = default(bool), bool overridesUiAppearance = default(bool), bool avoidDuplicatesOnInitialization = default(bool), List<DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry> currencyScalars = default(List<DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry>), int hash = default(int), int index = default(int), bool redacted = default(bool))
        {
            this.DisplayProperties = displayProperties;
            this.InsertAction = insertAction;
            this.PlugWhitelist = plugWhitelist;
            this.SocketCategoryHash = socketCategoryHash;
            this.Visibility = visibility;
            this.AlwaysRandomizeSockets = alwaysRandomizeSockets;
            this.IsPreviewEnabled = isPreviewEnabled;
            this.HideDuplicateReusablePlugs = hideDuplicateReusablePlugs;
            this.OverridesUiAppearance = overridesUiAppearance;
            this.AvoidDuplicatesOnInitialization = avoidDuplicatesOnInitialization;
            this.CurrencyScalars = currencyScalars;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }

        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name = "displayProperties", EmitDefaultValue = false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// Gets or Sets InsertAction
        /// </summary>
        [DataMember(Name = "insertAction", EmitDefaultValue = false)]
        public DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition InsertAction { get; set; }

        /// <summary>
        /// A list of Plug \&quot;Categories\&quot; that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.  If the plug&#39;s category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.
        /// </summary>
        /// <value>A list of Plug \&quot;Categories\&quot; that are allowed to be plugged into sockets of this type.  These should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.  If the plug&#39;s category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.</value>
        [DataMember(Name = "plugWhitelist", EmitDefaultValue = false)]
        public List<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition> PlugWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets SocketCategoryHash
        /// </summary>
        [DataMember(Name = "socketCategoryHash", EmitDefaultValue = false)]
        public int SocketCategoryHash { get; set; }

        /// <summary>
        /// Sometimes a socket isn&#39;t visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.
        /// </summary>
        /// <value>Sometimes a socket isn&#39;t visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public int Visibility { get; set; }

        /// <summary>
        /// Gets or Sets AlwaysRandomizeSockets
        /// </summary>
        [DataMember(Name = "alwaysRandomizeSockets", EmitDefaultValue = true)]
        public bool AlwaysRandomizeSockets { get; set; }

        /// <summary>
        /// Gets or Sets IsPreviewEnabled
        /// </summary>
        [DataMember(Name = "isPreviewEnabled", EmitDefaultValue = true)]
        public bool IsPreviewEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HideDuplicateReusablePlugs
        /// </summary>
        [DataMember(Name = "hideDuplicateReusablePlugs", EmitDefaultValue = true)]
        public bool HideDuplicateReusablePlugs { get; set; }

        /// <summary>
        /// This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item&#39;s icon and nameplate.
        /// </summary>
        /// <value>This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item&#39;s icon and nameplate.</value>
        [DataMember(Name = "overridesUiAppearance", EmitDefaultValue = true)]
        public bool OverridesUiAppearance { get; set; }

        /// <summary>
        /// Gets or Sets AvoidDuplicatesOnInitialization
        /// </summary>
        [DataMember(Name = "avoidDuplicatesOnInitialization", EmitDefaultValue = true)]
        public bool AvoidDuplicatesOnInitialization { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyScalars
        /// </summary>
        [DataMember(Name = "currencyScalars", EmitDefaultValue = false)]
        public List<DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry> CurrencyScalars { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public int Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name = "redacted", EmitDefaultValue = true)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsSocketsDestinySocketTypeDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  InsertAction: ").Append(InsertAction).Append("\n");
            sb.Append("  PlugWhitelist: ").Append(PlugWhitelist).Append("\n");
            sb.Append("  SocketCategoryHash: ").Append(SocketCategoryHash).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  AlwaysRandomizeSockets: ").Append(AlwaysRandomizeSockets).Append("\n");
            sb.Append("  IsPreviewEnabled: ").Append(IsPreviewEnabled).Append("\n");
            sb.Append("  HideDuplicateReusablePlugs: ").Append(HideDuplicateReusablePlugs).Append("\n");
            sb.Append("  OverridesUiAppearance: ").Append(OverridesUiAppearance).Append("\n");
            sb.Append("  AvoidDuplicatesOnInitialization: ").Append(AvoidDuplicatesOnInitialization).Append("\n");
            sb.Append("  CurrencyScalars: ").Append(CurrencyScalars).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsSocketsDestinySocketTypeDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsSocketsDestinySocketTypeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsSocketsDestinySocketTypeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsSocketsDestinySocketTypeDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.InsertAction == input.InsertAction ||
                    (this.InsertAction != null &&
                    this.InsertAction.Equals(input.InsertAction))
                ) && 
                (
                    this.PlugWhitelist == input.PlugWhitelist ||
                    this.PlugWhitelist != null &&
                    input.PlugWhitelist != null &&
                    this.PlugWhitelist.SequenceEqual(input.PlugWhitelist)
                ) && 
                (
                    this.SocketCategoryHash == input.SocketCategoryHash ||
                    this.SocketCategoryHash.Equals(input.SocketCategoryHash)
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    this.Visibility.Equals(input.Visibility)
                ) && 
                (
                    this.AlwaysRandomizeSockets == input.AlwaysRandomizeSockets ||
                    this.AlwaysRandomizeSockets.Equals(input.AlwaysRandomizeSockets)
                ) && 
                (
                    this.IsPreviewEnabled == input.IsPreviewEnabled ||
                    this.IsPreviewEnabled.Equals(input.IsPreviewEnabled)
                ) && 
                (
                    this.HideDuplicateReusablePlugs == input.HideDuplicateReusablePlugs ||
                    this.HideDuplicateReusablePlugs.Equals(input.HideDuplicateReusablePlugs)
                ) && 
                (
                    this.OverridesUiAppearance == input.OverridesUiAppearance ||
                    this.OverridesUiAppearance.Equals(input.OverridesUiAppearance)
                ) && 
                (
                    this.AvoidDuplicatesOnInitialization == input.AvoidDuplicatesOnInitialization ||
                    this.AvoidDuplicatesOnInitialization.Equals(input.AvoidDuplicatesOnInitialization)
                ) && 
                (
                    this.CurrencyScalars == input.CurrencyScalars ||
                    this.CurrencyScalars != null &&
                    input.CurrencyScalars != null &&
                    this.CurrencyScalars.SequenceEqual(input.CurrencyScalars)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayProperties.GetHashCode();
                }
                if (this.InsertAction != null)
                {
                    hashCode = (hashCode * 59) + this.InsertAction.GetHashCode();
                }
                if (this.PlugWhitelist != null)
                {
                    hashCode = (hashCode * 59) + this.PlugWhitelist.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SocketCategoryHash.GetHashCode();
                hashCode = (hashCode * 59) + this.Visibility.GetHashCode();
                hashCode = (hashCode * 59) + this.AlwaysRandomizeSockets.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPreviewEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.HideDuplicateReusablePlugs.GetHashCode();
                hashCode = (hashCode * 59) + this.OverridesUiAppearance.GetHashCode();
                hashCode = (hashCode * 59) + this.AvoidDuplicatesOnInitialization.GetHashCode();
                if (this.CurrencyScalars != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyScalars.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
