/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDestinyHistoricalStatsValue
    /// </summary>
    [DataContract(Name = "Destiny.HistoricalStats.DestinyHistoricalStatsValue")]
    public partial class DestinyHistoricalStatsDestinyHistoricalStatsValue : IEquatable<DestinyHistoricalStatsDestinyHistoricalStatsValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyHistoricalStatsValue" /> class.
        /// </summary>
        /// <param name="statId">Unique ID for this stat.</param>
        /// <param name="basic">basic.</param>
        /// <param name="pga">pga.</param>
        /// <param name="weighted">weighted.</param>
        /// <param name="activityId">When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property..</param>
        public DestinyHistoricalStatsDestinyHistoricalStatsValue(string statId = default(string), DestinyHistoricalStatsDestinyHistoricalStatsValuePair basic = default(DestinyHistoricalStatsDestinyHistoricalStatsValuePair), DestinyHistoricalStatsDestinyHistoricalStatsValuePair pga = default(DestinyHistoricalStatsDestinyHistoricalStatsValuePair), DestinyHistoricalStatsDestinyHistoricalStatsValuePair weighted = default(DestinyHistoricalStatsDestinyHistoricalStatsValuePair), long? activityId = default(long?))
        {
            this.StatId = statId;
            this.Basic = basic;
            this.Pga = pga;
            this.Weighted = weighted;
            this.ActivityId = activityId;
        }

        /// <summary>
        /// Unique ID for this stat
        /// </summary>
        /// <value>Unique ID for this stat</value>
        [DataMember(Name = "statId", EmitDefaultValue = false)]
        public string StatId { get; set; }

        /// <summary>
        /// Gets or Sets Basic
        /// </summary>
        [DataMember(Name = "basic", EmitDefaultValue = false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValuePair Basic { get; set; }

        /// <summary>
        /// Gets or Sets Pga
        /// </summary>
        [DataMember(Name = "pga", EmitDefaultValue = false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValuePair Pga { get; set; }

        /// <summary>
        /// Gets or Sets Weighted
        /// </summary>
        [DataMember(Name = "weighted", EmitDefaultValue = false)]
        public DestinyHistoricalStatsDestinyHistoricalStatsValuePair Weighted { get; set; }

        /// <summary>
        /// When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
        /// </summary>
        /// <value>When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.</value>
        [DataMember(Name = "activityId", EmitDefaultValue = true)]
        public long? ActivityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyHistoricalStatsValue {\n");
            sb.Append("  StatId: ").Append(StatId).Append("\n");
            sb.Append("  Basic: ").Append(Basic).Append("\n");
            sb.Append("  Pga: ").Append(Pga).Append("\n");
            sb.Append("  Weighted: ").Append(Weighted).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyHistoricalStatsValue);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyHistoricalStatsValue instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyHistoricalStatsValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyHistoricalStatsValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatId == input.StatId ||
                    (this.StatId != null &&
                    this.StatId.Equals(input.StatId))
                ) && 
                (
                    this.Basic == input.Basic ||
                    (this.Basic != null &&
                    this.Basic.Equals(input.Basic))
                ) && 
                (
                    this.Pga == input.Pga ||
                    (this.Pga != null &&
                    this.Pga.Equals(input.Pga))
                ) && 
                (
                    this.Weighted == input.Weighted ||
                    (this.Weighted != null &&
                    this.Weighted.Equals(input.Weighted))
                ) && 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatId != null)
                {
                    hashCode = (hashCode * 59) + this.StatId.GetHashCode();
                }
                if (this.Basic != null)
                {
                    hashCode = (hashCode * 59) + this.Basic.GetHashCode();
                }
                if (this.Pga != null)
                {
                    hashCode = (hashCode * 59) + this.Pga.GetHashCode();
                }
                if (this.Weighted != null)
                {
                    hashCode = (hashCode * 59) + this.Weighted.GetHashCode();
                }
                if (this.ActivityId != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
