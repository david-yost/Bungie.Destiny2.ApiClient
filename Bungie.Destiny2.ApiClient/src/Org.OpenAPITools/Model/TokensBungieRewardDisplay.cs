/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TokensBungieRewardDisplay
    /// </summary>
    [DataContract(Name = "Tokens.BungieRewardDisplay")]
    public partial class TokensBungieRewardDisplay : IEquatable<TokensBungieRewardDisplay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokensBungieRewardDisplay" /> class.
        /// </summary>
        /// <param name="userRewardAvailabilityModel">userRewardAvailabilityModel.</param>
        /// <param name="objectiveDisplayProperties">objectiveDisplayProperties.</param>
        /// <param name="rewardDisplayProperties">rewardDisplayProperties.</param>
        public TokensBungieRewardDisplay(TokensUserRewardAvailabilityModel userRewardAvailabilityModel = default(TokensUserRewardAvailabilityModel), TokensRewardDisplayProperties objectiveDisplayProperties = default(TokensRewardDisplayProperties), TokensRewardDisplayProperties rewardDisplayProperties = default(TokensRewardDisplayProperties))
        {
            this.UserRewardAvailabilityModel = userRewardAvailabilityModel;
            this.ObjectiveDisplayProperties = objectiveDisplayProperties;
            this.RewardDisplayProperties = rewardDisplayProperties;
        }

        /// <summary>
        /// Gets or Sets UserRewardAvailabilityModel
        /// </summary>
        [DataMember(Name = "UserRewardAvailabilityModel", EmitDefaultValue = false)]
        public TokensUserRewardAvailabilityModel UserRewardAvailabilityModel { get; set; }

        /// <summary>
        /// Gets or Sets ObjectiveDisplayProperties
        /// </summary>
        [DataMember(Name = "ObjectiveDisplayProperties", EmitDefaultValue = false)]
        public TokensRewardDisplayProperties ObjectiveDisplayProperties { get; set; }

        /// <summary>
        /// Gets or Sets RewardDisplayProperties
        /// </summary>
        [DataMember(Name = "RewardDisplayProperties", EmitDefaultValue = false)]
        public TokensRewardDisplayProperties RewardDisplayProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokensBungieRewardDisplay {\n");
            sb.Append("  UserRewardAvailabilityModel: ").Append(UserRewardAvailabilityModel).Append("\n");
            sb.Append("  ObjectiveDisplayProperties: ").Append(ObjectiveDisplayProperties).Append("\n");
            sb.Append("  RewardDisplayProperties: ").Append(RewardDisplayProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokensBungieRewardDisplay);
        }

        /// <summary>
        /// Returns true if TokensBungieRewardDisplay instances are equal
        /// </summary>
        /// <param name="input">Instance of TokensBungieRewardDisplay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokensBungieRewardDisplay input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserRewardAvailabilityModel == input.UserRewardAvailabilityModel ||
                    (this.UserRewardAvailabilityModel != null &&
                    this.UserRewardAvailabilityModel.Equals(input.UserRewardAvailabilityModel))
                ) && 
                (
                    this.ObjectiveDisplayProperties == input.ObjectiveDisplayProperties ||
                    (this.ObjectiveDisplayProperties != null &&
                    this.ObjectiveDisplayProperties.Equals(input.ObjectiveDisplayProperties))
                ) && 
                (
                    this.RewardDisplayProperties == input.RewardDisplayProperties ||
                    (this.RewardDisplayProperties != null &&
                    this.RewardDisplayProperties.Equals(input.RewardDisplayProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserRewardAvailabilityModel != null)
                {
                    hashCode = (hashCode * 59) + this.UserRewardAvailabilityModel.GetHashCode();
                }
                if (this.ObjectiveDisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectiveDisplayProperties.GetHashCode();
                }
                if (this.RewardDisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.RewardDisplayProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
