/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TokensPartnerRewardHistoryResponse
    /// </summary>
    [DataContract(Name = "Tokens.PartnerRewardHistoryResponse")]
    public partial class TokensPartnerRewardHistoryResponse : IEquatable<TokensPartnerRewardHistoryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokensPartnerRewardHistoryResponse" /> class.
        /// </summary>
        /// <param name="partnerOffers">partnerOffers.</param>
        /// <param name="twitchDrops">twitchDrops.</param>
        public TokensPartnerRewardHistoryResponse(List<TokensPartnerOfferSkuHistoryResponse> partnerOffers = default(List<TokensPartnerOfferSkuHistoryResponse>), List<TokensTwitchDropHistoryResponse> twitchDrops = default(List<TokensTwitchDropHistoryResponse>))
        {
            this.PartnerOffers = partnerOffers;
            this.TwitchDrops = twitchDrops;
        }

        /// <summary>
        /// Gets or Sets PartnerOffers
        /// </summary>
        [DataMember(Name = "PartnerOffers", EmitDefaultValue = false)]
        public List<TokensPartnerOfferSkuHistoryResponse> PartnerOffers { get; set; }

        /// <summary>
        /// Gets or Sets TwitchDrops
        /// </summary>
        [DataMember(Name = "TwitchDrops", EmitDefaultValue = false)]
        public List<TokensTwitchDropHistoryResponse> TwitchDrops { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokensPartnerRewardHistoryResponse {\n");
            sb.Append("  PartnerOffers: ").Append(PartnerOffers).Append("\n");
            sb.Append("  TwitchDrops: ").Append(TwitchDrops).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokensPartnerRewardHistoryResponse);
        }

        /// <summary>
        /// Returns true if TokensPartnerRewardHistoryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokensPartnerRewardHistoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokensPartnerRewardHistoryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PartnerOffers == input.PartnerOffers ||
                    this.PartnerOffers != null &&
                    input.PartnerOffers != null &&
                    this.PartnerOffers.SequenceEqual(input.PartnerOffers)
                ) && 
                (
                    this.TwitchDrops == input.TwitchDrops ||
                    this.TwitchDrops != null &&
                    input.TwitchDrops != null &&
                    this.TwitchDrops.SequenceEqual(input.TwitchDrops)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartnerOffers != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerOffers.GetHashCode();
                }
                if (this.TwitchDrops != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchDrops.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
