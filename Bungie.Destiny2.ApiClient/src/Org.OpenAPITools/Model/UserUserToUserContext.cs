/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserUserToUserContext
    /// </summary>
    [DataContract(Name = "User.UserToUserContext")]
    public partial class UserUserToUserContext : IEquatable<UserUserToUserContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUserToUserContext" /> class.
        /// </summary>
        /// <param name="isFollowing">isFollowing.</param>
        /// <param name="ignoreStatus">ignoreStatus.</param>
        /// <param name="globalIgnoreEndDate">globalIgnoreEndDate.</param>
        public UserUserToUserContext(bool isFollowing = default(bool), IgnoresIgnoreResponse ignoreStatus = default(IgnoresIgnoreResponse), DateTime? globalIgnoreEndDate = default(DateTime?))
        {
            this.IsFollowing = isFollowing;
            this.IgnoreStatus = ignoreStatus;
            this.GlobalIgnoreEndDate = globalIgnoreEndDate;
        }

        /// <summary>
        /// Gets or Sets IsFollowing
        /// </summary>
        [DataMember(Name = "isFollowing", EmitDefaultValue = true)]
        public bool IsFollowing { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreStatus
        /// </summary>
        [DataMember(Name = "ignoreStatus", EmitDefaultValue = false)]
        public IgnoresIgnoreResponse IgnoreStatus { get; set; }

        /// <summary>
        /// Gets or Sets GlobalIgnoreEndDate
        /// </summary>
        [DataMember(Name = "globalIgnoreEndDate", EmitDefaultValue = true)]
        public DateTime? GlobalIgnoreEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserUserToUserContext {\n");
            sb.Append("  IsFollowing: ").Append(IsFollowing).Append("\n");
            sb.Append("  IgnoreStatus: ").Append(IgnoreStatus).Append("\n");
            sb.Append("  GlobalIgnoreEndDate: ").Append(GlobalIgnoreEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUserToUserContext);
        }

        /// <summary>
        /// Returns true if UserUserToUserContext instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUserToUserContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUserToUserContext input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsFollowing == input.IsFollowing ||
                    this.IsFollowing.Equals(input.IsFollowing)
                ) && 
                (
                    this.IgnoreStatus == input.IgnoreStatus ||
                    (this.IgnoreStatus != null &&
                    this.IgnoreStatus.Equals(input.IgnoreStatus))
                ) && 
                (
                    this.GlobalIgnoreEndDate == input.GlobalIgnoreEndDate ||
                    (this.GlobalIgnoreEndDate != null &&
                    this.GlobalIgnoreEndDate.Equals(input.GlobalIgnoreEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsFollowing.GetHashCode();
                if (this.IgnoreStatus != null)
                {
                    hashCode = (hashCode * 59) + this.IgnoreStatus.GetHashCode();
                }
                if (this.GlobalIgnoreEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.GlobalIgnoreEndDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
