/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// If a Milestone has one or more Vendors that are relevant to it, this will contain information about that vendor that you can choose to show.
    /// </summary>
    [DataContract(Name = "Destiny.Milestones.DestinyMilestoneVendor")]
    public partial class DestinyMilestonesDestinyMilestoneVendor : IEquatable<DestinyMilestonesDestinyMilestoneVendor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyMilestonesDestinyMilestoneVendor" /> class.
        /// </summary>
        /// <param name="vendorHash">The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about..</param>
        /// <param name="previewItemHash">If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I&#39;m taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I&#39;m going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST..</param>
        public DestinyMilestonesDestinyMilestoneVendor(int vendorHash = default(int), int? previewItemHash = default(int?))
        {
            this.VendorHash = vendorHash;
            this.PreviewItemHash = previewItemHash;
        }

        /// <summary>
        /// The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.
        /// </summary>
        /// <value>The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.</value>
        [DataMember(Name = "vendorHash", EmitDefaultValue = false)]
        public int VendorHash { get; set; }

        /// <summary>
        /// If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I&#39;m taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I&#39;m going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.
        /// </summary>
        /// <value>If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I&#39;m taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I&#39;m going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.</value>
        [DataMember(Name = "previewItemHash", EmitDefaultValue = true)]
        public int? PreviewItemHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyMilestonesDestinyMilestoneVendor {\n");
            sb.Append("  VendorHash: ").Append(VendorHash).Append("\n");
            sb.Append("  PreviewItemHash: ").Append(PreviewItemHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyMilestonesDestinyMilestoneVendor);
        }

        /// <summary>
        /// Returns true if DestinyMilestonesDestinyMilestoneVendor instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyMilestonesDestinyMilestoneVendor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyMilestonesDestinyMilestoneVendor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VendorHash == input.VendorHash ||
                    this.VendorHash.Equals(input.VendorHash)
                ) && 
                (
                    this.PreviewItemHash == input.PreviewItemHash ||
                    (this.PreviewItemHash != null &&
                    this.PreviewItemHash.Equals(input.PreviewItemHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VendorHash.GetHashCode();
                if (this.PreviewItemHash != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewItemHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
