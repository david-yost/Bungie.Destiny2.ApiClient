/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyComponentsCollectiblesDestinyCollectiblesComponent
    /// </summary>
    [DataContract(Name = "Destiny.Components.Collectibles.DestinyCollectiblesComponent")]
    public partial class DestinyComponentsCollectiblesDestinyCollectiblesComponent : IEquatable<DestinyComponentsCollectiblesDestinyCollectiblesComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsCollectiblesDestinyCollectiblesComponent" /> class.
        /// </summary>
        /// <param name="collectibles">collectibles.</param>
        /// <param name="collectionCategoriesRootNodeHash">The hash for the root presentation node definition of Collection categories..</param>
        /// <param name="collectionBadgesRootNodeHash">The hash for the root presentation node definition of Collection Badges..</param>
        public DestinyComponentsCollectiblesDestinyCollectiblesComponent(Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> collectibles = default(Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent>), int collectionCategoriesRootNodeHash = default(int), int collectionBadgesRootNodeHash = default(int))
        {
            this.Collectibles = collectibles;
            this.CollectionCategoriesRootNodeHash = collectionCategoriesRootNodeHash;
            this.CollectionBadgesRootNodeHash = collectionBadgesRootNodeHash;
        }

        /// <summary>
        /// Gets or Sets Collectibles
        /// </summary>
        [DataMember(Name = "collectibles", EmitDefaultValue = false)]
        public Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> Collectibles { get; set; }

        /// <summary>
        /// The hash for the root presentation node definition of Collection categories.
        /// </summary>
        /// <value>The hash for the root presentation node definition of Collection categories.</value>
        [DataMember(Name = "collectionCategoriesRootNodeHash", EmitDefaultValue = false)]
        public int CollectionCategoriesRootNodeHash { get; set; }

        /// <summary>
        /// The hash for the root presentation node definition of Collection Badges.
        /// </summary>
        /// <value>The hash for the root presentation node definition of Collection Badges.</value>
        [DataMember(Name = "collectionBadgesRootNodeHash", EmitDefaultValue = false)]
        public int CollectionBadgesRootNodeHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsCollectiblesDestinyCollectiblesComponent {\n");
            sb.Append("  Collectibles: ").Append(Collectibles).Append("\n");
            sb.Append("  CollectionCategoriesRootNodeHash: ").Append(CollectionCategoriesRootNodeHash).Append("\n");
            sb.Append("  CollectionBadgesRootNodeHash: ").Append(CollectionBadgesRootNodeHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsCollectiblesDestinyCollectiblesComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsCollectiblesDestinyCollectiblesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsCollectiblesDestinyCollectiblesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsCollectiblesDestinyCollectiblesComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Collectibles == input.Collectibles ||
                    this.Collectibles != null &&
                    input.Collectibles != null &&
                    this.Collectibles.SequenceEqual(input.Collectibles)
                ) && 
                (
                    this.CollectionCategoriesRootNodeHash == input.CollectionCategoriesRootNodeHash ||
                    this.CollectionCategoriesRootNodeHash.Equals(input.CollectionCategoriesRootNodeHash)
                ) && 
                (
                    this.CollectionBadgesRootNodeHash == input.CollectionBadgesRootNodeHash ||
                    this.CollectionBadgesRootNodeHash.Equals(input.CollectionBadgesRootNodeHash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Collectibles != null)
                {
                    hashCode = (hashCode * 59) + this.Collectibles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionCategoriesRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.CollectionBadgesRootNodeHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
