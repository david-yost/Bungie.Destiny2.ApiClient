/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there&#39;s less guitars on fire. Yet. #spoileralert?  This will include information such as Checklist info.
    /// </summary>
    [DataContract(Name = "Destiny.Components.Profiles.DestinyProfileProgressionComponent")]
    public partial class DestinyComponentsProfilesDestinyProfileProgressionComponent : IEquatable<DestinyComponentsProfilesDestinyProfileProgressionComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsProfilesDestinyProfileProgressionComponent" /> class.
        /// </summary>
        /// <param name="checklists">The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet..</param>
        /// <param name="seasonalArtifact">seasonalArtifact.</param>
        public DestinyComponentsProfilesDestinyProfileProgressionComponent(Dictionary<string, Dictionary<string, bool>> checklists = default(Dictionary<string, Dictionary<string, bool>>), DestinyArtifactsDestinyArtifactProfileScoped seasonalArtifact = default(DestinyArtifactsDestinyArtifactProfileScoped))
        {
            this.Checklists = checklists;
            this.SeasonalArtifact = seasonalArtifact;
        }

        /// <summary>
        /// The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.
        /// </summary>
        /// <value>The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.</value>
        [DataMember(Name = "checklists", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, bool>> Checklists { get; set; }

        /// <summary>
        /// Gets or Sets SeasonalArtifact
        /// </summary>
        [DataMember(Name = "seasonalArtifact", EmitDefaultValue = false)]
        public DestinyArtifactsDestinyArtifactProfileScoped SeasonalArtifact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsProfilesDestinyProfileProgressionComponent {\n");
            sb.Append("  Checklists: ").Append(Checklists).Append("\n");
            sb.Append("  SeasonalArtifact: ").Append(SeasonalArtifact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsProfilesDestinyProfileProgressionComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsProfilesDestinyProfileProgressionComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsProfilesDestinyProfileProgressionComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsProfilesDestinyProfileProgressionComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Checklists == input.Checklists ||
                    this.Checklists != null &&
                    input.Checklists != null &&
                    this.Checklists.SequenceEqual(input.Checklists)
                ) && 
                (
                    this.SeasonalArtifact == input.SeasonalArtifact ||
                    (this.SeasonalArtifact != null &&
                    this.SeasonalArtifact.Equals(input.SeasonalArtifact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Checklists != null)
                {
                    hashCode = (hashCode * 59) + this.Checklists.GetHashCode();
                }
                if (this.SeasonalArtifact != null)
                {
                    hashCode = (hashCode * 59) + this.SeasonalArtifact.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
