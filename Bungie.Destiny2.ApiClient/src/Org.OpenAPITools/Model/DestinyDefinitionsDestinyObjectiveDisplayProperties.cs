/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyDefinitionsDestinyObjectiveDisplayProperties
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyObjectiveDisplayProperties")]
    public partial class DestinyDefinitionsDestinyObjectiveDisplayProperties : IEquatable<DestinyDefinitionsDestinyObjectiveDisplayProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyObjectiveDisplayProperties" /> class.
        /// </summary>
        /// <param name="activityHash">The activity associated with this objective in the context of this item, if any..</param>
        /// <param name="displayOnItemPreviewScreen">If true, the game shows this objective on item preview screens..</param>
        public DestinyDefinitionsDestinyObjectiveDisplayProperties(int? activityHash = default(int?), bool displayOnItemPreviewScreen = default(bool))
        {
            this.ActivityHash = activityHash;
            this.DisplayOnItemPreviewScreen = displayOnItemPreviewScreen;
        }

        /// <summary>
        /// The activity associated with this objective in the context of this item, if any.
        /// </summary>
        /// <value>The activity associated with this objective in the context of this item, if any.</value>
        [DataMember(Name = "activityHash", EmitDefaultValue = true)]
        public int? ActivityHash { get; set; }

        /// <summary>
        /// If true, the game shows this objective on item preview screens.
        /// </summary>
        /// <value>If true, the game shows this objective on item preview screens.</value>
        [DataMember(Name = "displayOnItemPreviewScreen", EmitDefaultValue = true)]
        public bool DisplayOnItemPreviewScreen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyObjectiveDisplayProperties {\n");
            sb.Append("  ActivityHash: ").Append(ActivityHash).Append("\n");
            sb.Append("  DisplayOnItemPreviewScreen: ").Append(DisplayOnItemPreviewScreen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyObjectiveDisplayProperties);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyObjectiveDisplayProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyObjectiveDisplayProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyObjectiveDisplayProperties input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActivityHash == input.ActivityHash ||
                    (this.ActivityHash != null &&
                    this.ActivityHash.Equals(input.ActivityHash))
                ) && 
                (
                    this.DisplayOnItemPreviewScreen == input.DisplayOnItemPreviewScreen ||
                    this.DisplayOnItemPreviewScreen.Equals(input.DisplayOnItemPreviewScreen)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityHash != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisplayOnItemPreviewScreen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
