/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This is an experimental set of data that Bungie considers to be \&quot;transitory\&quot; - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.  This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
    /// </summary>
    [DataContract(Name = "Destiny.Components.Profiles.DestinyProfileTransitoryComponent")]
    public partial class DestinyComponentsProfilesDestinyProfileTransitoryComponent : IEquatable<DestinyComponentsProfilesDestinyProfileTransitoryComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsProfilesDestinyProfileTransitoryComponent" /> class.
        /// </summary>
        /// <param name="partyMembers">If you have any members currently in your party, this is some (very) bare-bones information about those members..</param>
        /// <param name="currentActivity">currentActivity.</param>
        /// <param name="joinability">joinability.</param>
        /// <param name="tracking">Information about tracked entities..</param>
        /// <param name="lastOrbitedDestinationHash">The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit..</param>
        public DestinyComponentsProfilesDestinyProfileTransitoryComponent(List<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember> partyMembers = default(List<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember>), DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity currentActivity = default(DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity), DestinyComponentsProfilesDestinyProfileTransitoryJoinability joinability = default(DestinyComponentsProfilesDestinyProfileTransitoryJoinability), List<DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry> tracking = default(List<DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry>), int? lastOrbitedDestinationHash = default(int?))
        {
            this.PartyMembers = partyMembers;
            this.CurrentActivity = currentActivity;
            this.Joinability = joinability;
            this.Tracking = tracking;
            this.LastOrbitedDestinationHash = lastOrbitedDestinationHash;
        }

        /// <summary>
        /// If you have any members currently in your party, this is some (very) bare-bones information about those members.
        /// </summary>
        /// <value>If you have any members currently in your party, this is some (very) bare-bones information about those members.</value>
        [DataMember(Name = "partyMembers", EmitDefaultValue = false)]
        public List<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember> PartyMembers { get; set; }

        /// <summary>
        /// Gets or Sets CurrentActivity
        /// </summary>
        [DataMember(Name = "currentActivity", EmitDefaultValue = false)]
        public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity CurrentActivity { get; set; }

        /// <summary>
        /// Gets or Sets Joinability
        /// </summary>
        [DataMember(Name = "joinability", EmitDefaultValue = false)]
        public DestinyComponentsProfilesDestinyProfileTransitoryJoinability Joinability { get; set; }

        /// <summary>
        /// Information about tracked entities.
        /// </summary>
        /// <value>Information about tracked entities.</value>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public List<DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry> Tracking { get; set; }

        /// <summary>
        /// The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit.
        /// </summary>
        /// <value>The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit.</value>
        [DataMember(Name = "lastOrbitedDestinationHash", EmitDefaultValue = true)]
        public int? LastOrbitedDestinationHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsProfilesDestinyProfileTransitoryComponent {\n");
            sb.Append("  PartyMembers: ").Append(PartyMembers).Append("\n");
            sb.Append("  CurrentActivity: ").Append(CurrentActivity).Append("\n");
            sb.Append("  Joinability: ").Append(Joinability).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  LastOrbitedDestinationHash: ").Append(LastOrbitedDestinationHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsProfilesDestinyProfileTransitoryComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsProfilesDestinyProfileTransitoryComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsProfilesDestinyProfileTransitoryComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsProfilesDestinyProfileTransitoryComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PartyMembers == input.PartyMembers ||
                    this.PartyMembers != null &&
                    input.PartyMembers != null &&
                    this.PartyMembers.SequenceEqual(input.PartyMembers)
                ) && 
                (
                    this.CurrentActivity == input.CurrentActivity ||
                    (this.CurrentActivity != null &&
                    this.CurrentActivity.Equals(input.CurrentActivity))
                ) && 
                (
                    this.Joinability == input.Joinability ||
                    (this.Joinability != null &&
                    this.Joinability.Equals(input.Joinability))
                ) && 
                (
                    this.Tracking == input.Tracking ||
                    this.Tracking != null &&
                    input.Tracking != null &&
                    this.Tracking.SequenceEqual(input.Tracking)
                ) && 
                (
                    this.LastOrbitedDestinationHash == input.LastOrbitedDestinationHash ||
                    (this.LastOrbitedDestinationHash != null &&
                    this.LastOrbitedDestinationHash.Equals(input.LastOrbitedDestinationHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartyMembers != null)
                {
                    hashCode = (hashCode * 59) + this.PartyMembers.GetHashCode();
                }
                if (this.CurrentActivity != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentActivity.GetHashCode();
                }
                if (this.Joinability != null)
                {
                    hashCode = (hashCode * 59) + this.Joinability.GetHashCode();
                }
                if (this.Tracking != null)
                {
                    hashCode = (hashCode * 59) + this.Tracking.GetHashCode();
                }
                if (this.LastOrbitedDestinationHash != null)
                {
                    hashCode = (hashCode * 59) + this.LastOrbitedDestinationHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
