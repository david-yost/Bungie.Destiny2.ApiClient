/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
    /// </summary>
    [DataContract(Name = "Destiny.HistoricalStats.Definitions.DestinyHistoricalStatsDefinition")]
    public partial class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition : IEquatable<DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition>, IValidatableObject
    {
        /// <summary>
        /// Optional icon for the statistic
        /// </summary>
        /// <value>Optional icon for the statistic</value>
        public enum MergeMethodEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2
        }


        /// <summary>
        /// Optional icon for the statistic
        /// </summary>
        /// <value>Optional icon for the statistic</value>
        [DataMember(Name = "mergeMethod", EmitDefaultValue = true)]
        public MergeMethodEnum? MergeMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition" /> class.
        /// </summary>
        /// <param name="statId">Unique programmer friendly ID for this stat.</param>
        /// <param name="group">Statistic group.</param>
        /// <param name="periodTypes">Time periods the statistic covers.</param>
        /// <param name="modes">Game modes where this statistic can be reported..</param>
        /// <param name="category">Category for the stat..</param>
        /// <param name="statName">Display name.</param>
        /// <param name="statNameAbbr">Display name abbreviated.</param>
        /// <param name="statDescription">Description of a stat if applicable..</param>
        /// <param name="unitType">Unit, if any, for the statistic.</param>
        /// <param name="iconImage">Optional URI to an icon for the statistic.</param>
        /// <param name="mergeMethod">Optional icon for the statistic.</param>
        /// <param name="unitLabel">Localized Unit Name for the stat..</param>
        /// <param name="weight">Weight assigned to this stat indicating its relative impressiveness..</param>
        /// <param name="medalTierHash">The tier associated with this medal - be it implicitly or explicitly..</param>
        public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition(string statId = default(string), int group = default(int), List<int> periodTypes = default(List<int>), List<int> modes = default(List<int>), int category = default(int), string statName = default(string), string statNameAbbr = default(string), string statDescription = default(string), int unitType = default(int), string iconImage = default(string), MergeMethodEnum? mergeMethod = default(MergeMethodEnum?), string unitLabel = default(string), int weight = default(int), int? medalTierHash = default(int?))
        {
            this.StatId = statId;
            this.Group = group;
            this.PeriodTypes = periodTypes;
            this.Modes = modes;
            this.Category = category;
            this.StatName = statName;
            this.StatNameAbbr = statNameAbbr;
            this.StatDescription = statDescription;
            this.UnitType = unitType;
            this.IconImage = iconImage;
            this.MergeMethod = mergeMethod;
            this.UnitLabel = unitLabel;
            this.Weight = weight;
            this.MedalTierHash = medalTierHash;
        }

        /// <summary>
        /// Unique programmer friendly ID for this stat
        /// </summary>
        /// <value>Unique programmer friendly ID for this stat</value>
        [DataMember(Name = "statId", EmitDefaultValue = false)]
        public string StatId { get; set; }

        /// <summary>
        /// Statistic group
        /// </summary>
        /// <value>Statistic group</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public int Group { get; set; }

        /// <summary>
        /// Time periods the statistic covers
        /// </summary>
        /// <value>Time periods the statistic covers</value>
        [DataMember(Name = "periodTypes", EmitDefaultValue = false)]
        public List<int> PeriodTypes { get; set; }

        /// <summary>
        /// Game modes where this statistic can be reported.
        /// </summary>
        /// <value>Game modes where this statistic can be reported.</value>
        [DataMember(Name = "modes", EmitDefaultValue = false)]
        public List<int> Modes { get; set; }

        /// <summary>
        /// Category for the stat.
        /// </summary>
        /// <value>Category for the stat.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public int Category { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name = "statName", EmitDefaultValue = false)]
        public string StatName { get; set; }

        /// <summary>
        /// Display name abbreviated
        /// </summary>
        /// <value>Display name abbreviated</value>
        [DataMember(Name = "statNameAbbr", EmitDefaultValue = false)]
        public string StatNameAbbr { get; set; }

        /// <summary>
        /// Description of a stat if applicable.
        /// </summary>
        /// <value>Description of a stat if applicable.</value>
        [DataMember(Name = "statDescription", EmitDefaultValue = false)]
        public string StatDescription { get; set; }

        /// <summary>
        /// Unit, if any, for the statistic
        /// </summary>
        /// <value>Unit, if any, for the statistic</value>
        [DataMember(Name = "unitType", EmitDefaultValue = false)]
        public int UnitType { get; set; }

        /// <summary>
        /// Optional URI to an icon for the statistic
        /// </summary>
        /// <value>Optional URI to an icon for the statistic</value>
        [DataMember(Name = "iconImage", EmitDefaultValue = false)]
        public string IconImage { get; set; }

        /// <summary>
        /// Localized Unit Name for the stat.
        /// </summary>
        /// <value>Localized Unit Name for the stat.</value>
        [DataMember(Name = "unitLabel", EmitDefaultValue = false)]
        public string UnitLabel { get; set; }

        /// <summary>
        /// Weight assigned to this stat indicating its relative impressiveness.
        /// </summary>
        /// <value>Weight assigned to this stat indicating its relative impressiveness.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// The tier associated with this medal - be it implicitly or explicitly.
        /// </summary>
        /// <value>The tier associated with this medal - be it implicitly or explicitly.</value>
        [DataMember(Name = "medalTierHash", EmitDefaultValue = true)]
        public int? MedalTierHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition {\n");
            sb.Append("  StatId: ").Append(StatId).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  PeriodTypes: ").Append(PeriodTypes).Append("\n");
            sb.Append("  Modes: ").Append(Modes).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  StatName: ").Append(StatName).Append("\n");
            sb.Append("  StatNameAbbr: ").Append(StatNameAbbr).Append("\n");
            sb.Append("  StatDescription: ").Append(StatDescription).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  IconImage: ").Append(IconImage).Append("\n");
            sb.Append("  MergeMethod: ").Append(MergeMethod).Append("\n");
            sb.Append("  UnitLabel: ").Append(UnitLabel).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  MedalTierHash: ").Append(MedalTierHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatId == input.StatId ||
                    (this.StatId != null &&
                    this.StatId.Equals(input.StatId))
                ) && 
                (
                    this.Group == input.Group ||
                    this.Group.Equals(input.Group)
                ) && 
                (
                    this.PeriodTypes == input.PeriodTypes ||
                    this.PeriodTypes != null &&
                    input.PeriodTypes != null &&
                    this.PeriodTypes.SequenceEqual(input.PeriodTypes)
                ) && 
                (
                    this.Modes == input.Modes ||
                    this.Modes != null &&
                    input.Modes != null &&
                    this.Modes.SequenceEqual(input.Modes)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.StatName == input.StatName ||
                    (this.StatName != null &&
                    this.StatName.Equals(input.StatName))
                ) && 
                (
                    this.StatNameAbbr == input.StatNameAbbr ||
                    (this.StatNameAbbr != null &&
                    this.StatNameAbbr.Equals(input.StatNameAbbr))
                ) && 
                (
                    this.StatDescription == input.StatDescription ||
                    (this.StatDescription != null &&
                    this.StatDescription.Equals(input.StatDescription))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    this.UnitType.Equals(input.UnitType)
                ) && 
                (
                    this.IconImage == input.IconImage ||
                    (this.IconImage != null &&
                    this.IconImage.Equals(input.IconImage))
                ) && 
                (
                    this.MergeMethod == input.MergeMethod ||
                    this.MergeMethod.Equals(input.MergeMethod)
                ) && 
                (
                    this.UnitLabel == input.UnitLabel ||
                    (this.UnitLabel != null &&
                    this.UnitLabel.Equals(input.UnitLabel))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.MedalTierHash == input.MedalTierHash ||
                    (this.MedalTierHash != null &&
                    this.MedalTierHash.Equals(input.MedalTierHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatId != null)
                {
                    hashCode = (hashCode * 59) + this.StatId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Group.GetHashCode();
                if (this.PeriodTypes != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodTypes.GetHashCode();
                }
                if (this.Modes != null)
                {
                    hashCode = (hashCode * 59) + this.Modes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.StatName != null)
                {
                    hashCode = (hashCode * 59) + this.StatName.GetHashCode();
                }
                if (this.StatNameAbbr != null)
                {
                    hashCode = (hashCode * 59) + this.StatNameAbbr.GetHashCode();
                }
                if (this.StatDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                if (this.IconImage != null)
                {
                    hashCode = (hashCode * 59) + this.IconImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MergeMethod.GetHashCode();
                if (this.UnitLabel != null)
                {
                    hashCode = (hashCode * 59) + this.UnitLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                if (this.MedalTierHash != null)
                {
                    hashCode = (hashCode * 59) + this.MedalTierHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
