/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This definition represents an \&quot;Activity Mode\&quot; as it exists in the Historical Stats endpoints. An individual Activity Mode represents a collection of activities that are played in a certain way. For example, Nightfall Strikes are part of a \&quot;Nightfall\&quot; activity mode, and any activities played as the PVP mode \&quot;Clash\&quot; are part of the \&quot;Clash activity mode.  Activity modes are nested under each other in a hierarchy, so that if you ask for - for example - \&quot;AllPvP\&quot;, you will get any PVP activities that the user has played, regardless of what specific PVP mode was being played.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyActivityModeDefinition")]
    public partial class DestinyDefinitionsDestinyActivityModeDefinition : IEquatable<DestinyDefinitionsDestinyActivityModeDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyActivityModeDefinition" /> class.
        /// </summary>
        /// <param name="displayProperties">displayProperties.</param>
        /// <param name="pgcrImage">If this activity mode has a related PGCR image, this will be the path to said image..</param>
        /// <param name="modeType">The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode..</param>
        /// <param name="activityModeCategory">The type of play being performed in broad terms (PVP, PVE).</param>
        /// <param name="isTeamBased">If True, this mode has oppositional teams fighting against each other rather than \&quot;Free-For-All\&quot; or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren&#39;t team based, and then this boolean won&#39;t make much sense (the aggregation would become \&quot;sometimes team based\&quot;). Let&#39;s not deal with that right now..</param>
        /// <param name="isAggregateMode">If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash..</param>
        /// <param name="parentHashes">The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \&quot;parent\&quot; modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE..</param>
        /// <param name="friendlyName">A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it&#39;s worth..</param>
        /// <param name="activityModeMappings">If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played..</param>
        /// <param name="display">If FALSE, we want to ignore this type when we&#39;re showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose..</param>
        /// <param name="order">The relative ordering of activity modes..</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsDestinyActivityModeDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), string pgcrImage = default(string), int modeType = default(int), int activityModeCategory = default(int), bool isTeamBased = default(bool), bool isAggregateMode = default(bool), List<int> parentHashes = default(List<int>), string friendlyName = default(string), Dictionary<string, int> activityModeMappings = default(Dictionary<string, int>), bool display = default(bool), int order = default(int), int hash = default(int), int index = default(int), bool redacted = default(bool))
        {
            this.DisplayProperties = displayProperties;
            this.PgcrImage = pgcrImage;
            this.ModeType = modeType;
            this.ActivityModeCategory = activityModeCategory;
            this.IsTeamBased = isTeamBased;
            this.IsAggregateMode = isAggregateMode;
            this.ParentHashes = parentHashes;
            this.FriendlyName = friendlyName;
            this.ActivityModeMappings = activityModeMappings;
            this.Display = display;
            this.Order = order;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }

        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name = "displayProperties", EmitDefaultValue = false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// If this activity mode has a related PGCR image, this will be the path to said image.
        /// </summary>
        /// <value>If this activity mode has a related PGCR image, this will be the path to said image.</value>
        [DataMember(Name = "pgcrImage", EmitDefaultValue = false)]
        public string PgcrImage { get; set; }

        /// <summary>
        /// The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.
        /// </summary>
        /// <value>The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.</value>
        [DataMember(Name = "modeType", EmitDefaultValue = false)]
        public int ModeType { get; set; }

        /// <summary>
        /// The type of play being performed in broad terms (PVP, PVE)
        /// </summary>
        /// <value>The type of play being performed in broad terms (PVP, PVE)</value>
        [DataMember(Name = "activityModeCategory", EmitDefaultValue = false)]
        public int ActivityModeCategory { get; set; }

        /// <summary>
        /// If True, this mode has oppositional teams fighting against each other rather than \&quot;Free-For-All\&quot; or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren&#39;t team based, and then this boolean won&#39;t make much sense (the aggregation would become \&quot;sometimes team based\&quot;). Let&#39;s not deal with that right now.
        /// </summary>
        /// <value>If True, this mode has oppositional teams fighting against each other rather than \&quot;Free-For-All\&quot; or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren&#39;t team based, and then this boolean won&#39;t make much sense (the aggregation would become \&quot;sometimes team based\&quot;). Let&#39;s not deal with that right now.</value>
        [DataMember(Name = "isTeamBased", EmitDefaultValue = true)]
        public bool IsTeamBased { get; set; }

        /// <summary>
        /// If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.
        /// </summary>
        /// <value>If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.</value>
        [DataMember(Name = "isAggregateMode", EmitDefaultValue = true)]
        public bool IsAggregateMode { get; set; }

        /// <summary>
        /// The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \&quot;parent\&quot; modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.
        /// </summary>
        /// <value>The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \&quot;parent\&quot; modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.</value>
        [DataMember(Name = "parentHashes", EmitDefaultValue = false)]
        public List<int> ParentHashes { get; set; }

        /// <summary>
        /// A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it&#39;s worth.
        /// </summary>
        /// <value>A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it&#39;s worth.</value>
        [DataMember(Name = "friendlyName", EmitDefaultValue = false)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.
        /// </summary>
        /// <value>If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.</value>
        [DataMember(Name = "activityModeMappings", EmitDefaultValue = false)]
        public Dictionary<string, int> ActivityModeMappings { get; set; }

        /// <summary>
        /// If FALSE, we want to ignore this type when we&#39;re showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.
        /// </summary>
        /// <value>If FALSE, we want to ignore this type when we&#39;re showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.</value>
        [DataMember(Name = "display", EmitDefaultValue = true)]
        public bool Display { get; set; }

        /// <summary>
        /// The relative ordering of activity modes.
        /// </summary>
        /// <value>The relative ordering of activity modes.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public int Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name = "redacted", EmitDefaultValue = true)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyActivityModeDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  PgcrImage: ").Append(PgcrImage).Append("\n");
            sb.Append("  ModeType: ").Append(ModeType).Append("\n");
            sb.Append("  ActivityModeCategory: ").Append(ActivityModeCategory).Append("\n");
            sb.Append("  IsTeamBased: ").Append(IsTeamBased).Append("\n");
            sb.Append("  IsAggregateMode: ").Append(IsAggregateMode).Append("\n");
            sb.Append("  ParentHashes: ").Append(ParentHashes).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  ActivityModeMappings: ").Append(ActivityModeMappings).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyActivityModeDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyActivityModeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyActivityModeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyActivityModeDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.PgcrImage == input.PgcrImage ||
                    (this.PgcrImage != null &&
                    this.PgcrImage.Equals(input.PgcrImage))
                ) && 
                (
                    this.ModeType == input.ModeType ||
                    this.ModeType.Equals(input.ModeType)
                ) && 
                (
                    this.ActivityModeCategory == input.ActivityModeCategory ||
                    this.ActivityModeCategory.Equals(input.ActivityModeCategory)
                ) && 
                (
                    this.IsTeamBased == input.IsTeamBased ||
                    this.IsTeamBased.Equals(input.IsTeamBased)
                ) && 
                (
                    this.IsAggregateMode == input.IsAggregateMode ||
                    this.IsAggregateMode.Equals(input.IsAggregateMode)
                ) && 
                (
                    this.ParentHashes == input.ParentHashes ||
                    this.ParentHashes != null &&
                    input.ParentHashes != null &&
                    this.ParentHashes.SequenceEqual(input.ParentHashes)
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.ActivityModeMappings == input.ActivityModeMappings ||
                    this.ActivityModeMappings != null &&
                    input.ActivityModeMappings != null &&
                    this.ActivityModeMappings.SequenceEqual(input.ActivityModeMappings)
                ) && 
                (
                    this.Display == input.Display ||
                    this.Display.Equals(input.Display)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayProperties.GetHashCode();
                }
                if (this.PgcrImage != null)
                {
                    hashCode = (hashCode * 59) + this.PgcrImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModeType.GetHashCode();
                hashCode = (hashCode * 59) + this.ActivityModeCategory.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTeamBased.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAggregateMode.GetHashCode();
                if (this.ParentHashes != null)
                {
                    hashCode = (hashCode * 59) + this.ParentHashes.GetHashCode();
                }
                if (this.FriendlyName != null)
                {
                    hashCode = (hashCode * 59) + this.FriendlyName.GetHashCode();
                }
                if (this.ActivityModeMappings != null)
                {
                    hashCode = (hashCode * 59) + this.ActivityModeMappings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Display.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
