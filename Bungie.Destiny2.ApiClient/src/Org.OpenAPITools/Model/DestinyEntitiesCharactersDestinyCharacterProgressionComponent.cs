/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This component returns anything that could be considered \&quot;Progression\&quot; on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
    /// </summary>
    [DataContract(Name = "Destiny.Entities.Characters.DestinyCharacterProgressionComponent")]
    public partial class DestinyEntitiesCharactersDestinyCharacterProgressionComponent : IEquatable<DestinyEntitiesCharactersDestinyCharacterProgressionComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesCharactersDestinyCharacterProgressionComponent" /> class.
        /// </summary>
        /// <param name="progressions">A Dictionary of all known progressions for the Character, keyed by the Progression&#39;s hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition..</param>
        /// <param name="factions">A dictionary of all known Factions, keyed by the Faction&#39;s hash. It contains data about this character&#39;s status with the faction..</param>
        /// <param name="milestones">Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone&#39;s status..</param>
        /// <param name="quests">If the user has any active quests, the quests&#39; statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn&#39;t mean that they won&#39;t make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I&#39;m going to put that in the backlog.).</param>
        /// <param name="uninstancedItemObjectives">Sometimes, you have items in your inventory that don&#39;t have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item&#39;s hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses..</param>
        /// <param name="uninstancedItemPerks">Sometimes, you have items in your inventory that don&#39;t have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item..</param>
        /// <param name="checklists">The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet..</param>
        /// <param name="seasonalArtifact">seasonalArtifact.</param>
        public DestinyEntitiesCharactersDestinyCharacterProgressionComponent(Dictionary<string, DestinyDestinyProgression> progressions = default(Dictionary<string, DestinyDestinyProgression>), Dictionary<string, DestinyProgressionDestinyFactionProgression> factions = default(Dictionary<string, DestinyProgressionDestinyFactionProgression>), Dictionary<string, DestinyMilestonesDestinyMilestone> milestones = default(Dictionary<string, DestinyMilestonesDestinyMilestone>), List<DestinyQuestsDestinyQuestStatus> quests = default(List<DestinyQuestsDestinyQuestStatus>), Dictionary<string, List<DestinyQuestsDestinyObjectiveProgress>> uninstancedItemObjectives = default(Dictionary<string, List<DestinyQuestsDestinyObjectiveProgress>>), Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> uninstancedItemPerks = default(Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent>), Dictionary<string, Dictionary<string, bool>> checklists = default(Dictionary<string, Dictionary<string, bool>>), DestinyArtifactsDestinyArtifactCharacterScoped seasonalArtifact = default(DestinyArtifactsDestinyArtifactCharacterScoped))
        {
            this.Progressions = progressions;
            this.Factions = factions;
            this.Milestones = milestones;
            this.Quests = quests;
            this.UninstancedItemObjectives = uninstancedItemObjectives;
            this.UninstancedItemPerks = uninstancedItemPerks;
            this.Checklists = checklists;
            this.SeasonalArtifact = seasonalArtifact;
        }

        /// <summary>
        /// A Dictionary of all known progressions for the Character, keyed by the Progression&#39;s hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.
        /// </summary>
        /// <value>A Dictionary of all known progressions for the Character, keyed by the Progression&#39;s hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.</value>
        [DataMember(Name = "progressions", EmitDefaultValue = false)]
        public Dictionary<string, DestinyDestinyProgression> Progressions { get; set; }

        /// <summary>
        /// A dictionary of all known Factions, keyed by the Faction&#39;s hash. It contains data about this character&#39;s status with the faction.
        /// </summary>
        /// <value>A dictionary of all known Factions, keyed by the Faction&#39;s hash. It contains data about this character&#39;s status with the faction.</value>
        [DataMember(Name = "factions", EmitDefaultValue = false)]
        public Dictionary<string, DestinyProgressionDestinyFactionProgression> Factions { get; set; }

        /// <summary>
        /// Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone&#39;s status.
        /// </summary>
        /// <value>Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone&#39;s status.</value>
        [DataMember(Name = "milestones", EmitDefaultValue = false)]
        public Dictionary<string, DestinyMilestonesDestinyMilestone> Milestones { get; set; }

        /// <summary>
        /// If the user has any active quests, the quests&#39; statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn&#39;t mean that they won&#39;t make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I&#39;m going to put that in the backlog.)
        /// </summary>
        /// <value>If the user has any active quests, the quests&#39; statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn&#39;t mean that they won&#39;t make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I&#39;m going to put that in the backlog.)</value>
        [DataMember(Name = "quests", EmitDefaultValue = false)]
        public List<DestinyQuestsDestinyQuestStatus> Quests { get; set; }

        /// <summary>
        /// Sometimes, you have items in your inventory that don&#39;t have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item&#39;s hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.
        /// </summary>
        /// <value>Sometimes, you have items in your inventory that don&#39;t have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item&#39;s hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.</value>
        [DataMember(Name = "uninstancedItemObjectives", EmitDefaultValue = false)]
        public Dictionary<string, List<DestinyQuestsDestinyObjectiveProgress>> UninstancedItemObjectives { get; set; }

        /// <summary>
        /// Sometimes, you have items in your inventory that don&#39;t have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.
        /// </summary>
        /// <value>Sometimes, you have items in your inventory that don&#39;t have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.</value>
        [DataMember(Name = "uninstancedItemPerks", EmitDefaultValue = false)]
        public Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> UninstancedItemPerks { get; set; }

        /// <summary>
        /// The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.
        /// </summary>
        /// <value>The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.</value>
        [DataMember(Name = "checklists", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, bool>> Checklists { get; set; }

        /// <summary>
        /// Gets or Sets SeasonalArtifact
        /// </summary>
        [DataMember(Name = "seasonalArtifact", EmitDefaultValue = false)]
        public DestinyArtifactsDestinyArtifactCharacterScoped SeasonalArtifact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyEntitiesCharactersDestinyCharacterProgressionComponent {\n");
            sb.Append("  Progressions: ").Append(Progressions).Append("\n");
            sb.Append("  Factions: ").Append(Factions).Append("\n");
            sb.Append("  Milestones: ").Append(Milestones).Append("\n");
            sb.Append("  Quests: ").Append(Quests).Append("\n");
            sb.Append("  UninstancedItemObjectives: ").Append(UninstancedItemObjectives).Append("\n");
            sb.Append("  UninstancedItemPerks: ").Append(UninstancedItemPerks).Append("\n");
            sb.Append("  Checklists: ").Append(Checklists).Append("\n");
            sb.Append("  SeasonalArtifact: ").Append(SeasonalArtifact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesCharactersDestinyCharacterProgressionComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesCharactersDestinyCharacterProgressionComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesCharactersDestinyCharacterProgressionComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesCharactersDestinyCharacterProgressionComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Progressions == input.Progressions ||
                    this.Progressions != null &&
                    input.Progressions != null &&
                    this.Progressions.SequenceEqual(input.Progressions)
                ) && 
                (
                    this.Factions == input.Factions ||
                    this.Factions != null &&
                    input.Factions != null &&
                    this.Factions.SequenceEqual(input.Factions)
                ) && 
                (
                    this.Milestones == input.Milestones ||
                    this.Milestones != null &&
                    input.Milestones != null &&
                    this.Milestones.SequenceEqual(input.Milestones)
                ) && 
                (
                    this.Quests == input.Quests ||
                    this.Quests != null &&
                    input.Quests != null &&
                    this.Quests.SequenceEqual(input.Quests)
                ) && 
                (
                    this.UninstancedItemObjectives == input.UninstancedItemObjectives ||
                    this.UninstancedItemObjectives != null &&
                    input.UninstancedItemObjectives != null &&
                    this.UninstancedItemObjectives.SequenceEqual(input.UninstancedItemObjectives)
                ) && 
                (
                    this.UninstancedItemPerks == input.UninstancedItemPerks ||
                    this.UninstancedItemPerks != null &&
                    input.UninstancedItemPerks != null &&
                    this.UninstancedItemPerks.SequenceEqual(input.UninstancedItemPerks)
                ) && 
                (
                    this.Checklists == input.Checklists ||
                    this.Checklists != null &&
                    input.Checklists != null &&
                    this.Checklists.SequenceEqual(input.Checklists)
                ) && 
                (
                    this.SeasonalArtifact == input.SeasonalArtifact ||
                    (this.SeasonalArtifact != null &&
                    this.SeasonalArtifact.Equals(input.SeasonalArtifact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Progressions != null)
                {
                    hashCode = (hashCode * 59) + this.Progressions.GetHashCode();
                }
                if (this.Factions != null)
                {
                    hashCode = (hashCode * 59) + this.Factions.GetHashCode();
                }
                if (this.Milestones != null)
                {
                    hashCode = (hashCode * 59) + this.Milestones.GetHashCode();
                }
                if (this.Quests != null)
                {
                    hashCode = (hashCode * 59) + this.Quests.GetHashCode();
                }
                if (this.UninstancedItemObjectives != null)
                {
                    hashCode = (hashCode * 59) + this.UninstancedItemObjectives.GetHashCode();
                }
                if (this.UninstancedItemPerks != null)
                {
                    hashCode = (hashCode * 59) + this.UninstancedItemPerks.GetHashCode();
                }
                if (this.Checklists != null)
                {
                    hashCode = (hashCode * 59) + this.Checklists.GetHashCode();
                }
                if (this.SeasonalArtifact != null)
                {
                    hashCode = (hashCode * 59) + this.SeasonalArtifact.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
