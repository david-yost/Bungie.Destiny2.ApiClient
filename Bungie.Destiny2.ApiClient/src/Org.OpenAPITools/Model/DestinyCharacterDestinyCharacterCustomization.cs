/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Raw data about the customization options chosen for a character&#39;s face and appearance.  You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
    /// </summary>
    [DataContract(Name = "Destiny.Character.DestinyCharacterCustomization")]
    public partial class DestinyCharacterDestinyCharacterCustomization : IEquatable<DestinyCharacterDestinyCharacterCustomization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyCharacterDestinyCharacterCustomization" /> class.
        /// </summary>
        /// <param name="personality">personality.</param>
        /// <param name="face">face.</param>
        /// <param name="skinColor">skinColor.</param>
        /// <param name="lipColor">lipColor.</param>
        /// <param name="eyeColor">eyeColor.</param>
        /// <param name="hairColors">hairColors.</param>
        /// <param name="featureColors">featureColors.</param>
        /// <param name="decalColor">decalColor.</param>
        /// <param name="wearHelmet">wearHelmet.</param>
        /// <param name="hairIndex">hairIndex.</param>
        /// <param name="featureIndex">featureIndex.</param>
        /// <param name="decalIndex">decalIndex.</param>
        public DestinyCharacterDestinyCharacterCustomization(int personality = default(int), int face = default(int), int skinColor = default(int), int lipColor = default(int), int eyeColor = default(int), List<int> hairColors = default(List<int>), List<int> featureColors = default(List<int>), int decalColor = default(int), bool wearHelmet = default(bool), int hairIndex = default(int), int featureIndex = default(int), int decalIndex = default(int))
        {
            this.Personality = personality;
            this.Face = face;
            this.SkinColor = skinColor;
            this.LipColor = lipColor;
            this.EyeColor = eyeColor;
            this.HairColors = hairColors;
            this.FeatureColors = featureColors;
            this.DecalColor = decalColor;
            this.WearHelmet = wearHelmet;
            this.HairIndex = hairIndex;
            this.FeatureIndex = featureIndex;
            this.DecalIndex = decalIndex;
        }

        /// <summary>
        /// Gets or Sets Personality
        /// </summary>
        [DataMember(Name = "personality", EmitDefaultValue = false)]
        public int Personality { get; set; }

        /// <summary>
        /// Gets or Sets Face
        /// </summary>
        [DataMember(Name = "face", EmitDefaultValue = false)]
        public int Face { get; set; }

        /// <summary>
        /// Gets or Sets SkinColor
        /// </summary>
        [DataMember(Name = "skinColor", EmitDefaultValue = false)]
        public int SkinColor { get; set; }

        /// <summary>
        /// Gets or Sets LipColor
        /// </summary>
        [DataMember(Name = "lipColor", EmitDefaultValue = false)]
        public int LipColor { get; set; }

        /// <summary>
        /// Gets or Sets EyeColor
        /// </summary>
        [DataMember(Name = "eyeColor", EmitDefaultValue = false)]
        public int EyeColor { get; set; }

        /// <summary>
        /// Gets or Sets HairColors
        /// </summary>
        [DataMember(Name = "hairColors", EmitDefaultValue = false)]
        public List<int> HairColors { get; set; }

        /// <summary>
        /// Gets or Sets FeatureColors
        /// </summary>
        [DataMember(Name = "featureColors", EmitDefaultValue = false)]
        public List<int> FeatureColors { get; set; }

        /// <summary>
        /// Gets or Sets DecalColor
        /// </summary>
        [DataMember(Name = "decalColor", EmitDefaultValue = false)]
        public int DecalColor { get; set; }

        /// <summary>
        /// Gets or Sets WearHelmet
        /// </summary>
        [DataMember(Name = "wearHelmet", EmitDefaultValue = true)]
        public bool WearHelmet { get; set; }

        /// <summary>
        /// Gets or Sets HairIndex
        /// </summary>
        [DataMember(Name = "hairIndex", EmitDefaultValue = false)]
        public int HairIndex { get; set; }

        /// <summary>
        /// Gets or Sets FeatureIndex
        /// </summary>
        [DataMember(Name = "featureIndex", EmitDefaultValue = false)]
        public int FeatureIndex { get; set; }

        /// <summary>
        /// Gets or Sets DecalIndex
        /// </summary>
        [DataMember(Name = "decalIndex", EmitDefaultValue = false)]
        public int DecalIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyCharacterDestinyCharacterCustomization {\n");
            sb.Append("  Personality: ").Append(Personality).Append("\n");
            sb.Append("  Face: ").Append(Face).Append("\n");
            sb.Append("  SkinColor: ").Append(SkinColor).Append("\n");
            sb.Append("  LipColor: ").Append(LipColor).Append("\n");
            sb.Append("  EyeColor: ").Append(EyeColor).Append("\n");
            sb.Append("  HairColors: ").Append(HairColors).Append("\n");
            sb.Append("  FeatureColors: ").Append(FeatureColors).Append("\n");
            sb.Append("  DecalColor: ").Append(DecalColor).Append("\n");
            sb.Append("  WearHelmet: ").Append(WearHelmet).Append("\n");
            sb.Append("  HairIndex: ").Append(HairIndex).Append("\n");
            sb.Append("  FeatureIndex: ").Append(FeatureIndex).Append("\n");
            sb.Append("  DecalIndex: ").Append(DecalIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyCharacterDestinyCharacterCustomization);
        }

        /// <summary>
        /// Returns true if DestinyCharacterDestinyCharacterCustomization instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyCharacterDestinyCharacterCustomization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyCharacterDestinyCharacterCustomization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Personality == input.Personality ||
                    this.Personality.Equals(input.Personality)
                ) && 
                (
                    this.Face == input.Face ||
                    this.Face.Equals(input.Face)
                ) && 
                (
                    this.SkinColor == input.SkinColor ||
                    this.SkinColor.Equals(input.SkinColor)
                ) && 
                (
                    this.LipColor == input.LipColor ||
                    this.LipColor.Equals(input.LipColor)
                ) && 
                (
                    this.EyeColor == input.EyeColor ||
                    this.EyeColor.Equals(input.EyeColor)
                ) && 
                (
                    this.HairColors == input.HairColors ||
                    this.HairColors != null &&
                    input.HairColors != null &&
                    this.HairColors.SequenceEqual(input.HairColors)
                ) && 
                (
                    this.FeatureColors == input.FeatureColors ||
                    this.FeatureColors != null &&
                    input.FeatureColors != null &&
                    this.FeatureColors.SequenceEqual(input.FeatureColors)
                ) && 
                (
                    this.DecalColor == input.DecalColor ||
                    this.DecalColor.Equals(input.DecalColor)
                ) && 
                (
                    this.WearHelmet == input.WearHelmet ||
                    this.WearHelmet.Equals(input.WearHelmet)
                ) && 
                (
                    this.HairIndex == input.HairIndex ||
                    this.HairIndex.Equals(input.HairIndex)
                ) && 
                (
                    this.FeatureIndex == input.FeatureIndex ||
                    this.FeatureIndex.Equals(input.FeatureIndex)
                ) && 
                (
                    this.DecalIndex == input.DecalIndex ||
                    this.DecalIndex.Equals(input.DecalIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Personality.GetHashCode();
                hashCode = (hashCode * 59) + this.Face.GetHashCode();
                hashCode = (hashCode * 59) + this.SkinColor.GetHashCode();
                hashCode = (hashCode * 59) + this.LipColor.GetHashCode();
                hashCode = (hashCode * 59) + this.EyeColor.GetHashCode();
                if (this.HairColors != null)
                {
                    hashCode = (hashCode * 59) + this.HairColors.GetHashCode();
                }
                if (this.FeatureColors != null)
                {
                    hashCode = (hashCode * 59) + this.FeatureColors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DecalColor.GetHashCode();
                hashCode = (hashCode * 59) + this.WearHelmet.GetHashCode();
                hashCode = (hashCode * 59) + this.HairIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.FeatureIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.DecalIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
