/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyTalentNodeStepGroups")]
    public partial class DestinyDefinitionsDestinyTalentNodeStepGroups : IEquatable<DestinyDefinitionsDestinyTalentNodeStepGroups>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyTalentNodeStepGroups" /> class.
        /// </summary>
        /// <param name="weaponPerformance">weaponPerformance.</param>
        /// <param name="impactEffects">impactEffects.</param>
        /// <param name="guardianAttributes">guardianAttributes.</param>
        /// <param name="lightAbilities">lightAbilities.</param>
        /// <param name="damageTypes">damageTypes.</param>
        public DestinyDefinitionsDestinyTalentNodeStepGroups(int weaponPerformance = default(int), int impactEffects = default(int), int guardianAttributes = default(int), int lightAbilities = default(int), int damageTypes = default(int))
        {
            this.WeaponPerformance = weaponPerformance;
            this.ImpactEffects = impactEffects;
            this.GuardianAttributes = guardianAttributes;
            this.LightAbilities = lightAbilities;
            this.DamageTypes = damageTypes;
        }

        /// <summary>
        /// Gets or Sets WeaponPerformance
        /// </summary>
        [DataMember(Name = "weaponPerformance", EmitDefaultValue = false)]
        public int WeaponPerformance { get; set; }

        /// <summary>
        /// Gets or Sets ImpactEffects
        /// </summary>
        [DataMember(Name = "impactEffects", EmitDefaultValue = false)]
        public int ImpactEffects { get; set; }

        /// <summary>
        /// Gets or Sets GuardianAttributes
        /// </summary>
        [DataMember(Name = "guardianAttributes", EmitDefaultValue = false)]
        public int GuardianAttributes { get; set; }

        /// <summary>
        /// Gets or Sets LightAbilities
        /// </summary>
        [DataMember(Name = "lightAbilities", EmitDefaultValue = false)]
        public int LightAbilities { get; set; }

        /// <summary>
        /// Gets or Sets DamageTypes
        /// </summary>
        [DataMember(Name = "damageTypes", EmitDefaultValue = false)]
        public int DamageTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyTalentNodeStepGroups {\n");
            sb.Append("  WeaponPerformance: ").Append(WeaponPerformance).Append("\n");
            sb.Append("  ImpactEffects: ").Append(ImpactEffects).Append("\n");
            sb.Append("  GuardianAttributes: ").Append(GuardianAttributes).Append("\n");
            sb.Append("  LightAbilities: ").Append(LightAbilities).Append("\n");
            sb.Append("  DamageTypes: ").Append(DamageTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyTalentNodeStepGroups);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyTalentNodeStepGroups instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyTalentNodeStepGroups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyTalentNodeStepGroups input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WeaponPerformance == input.WeaponPerformance ||
                    this.WeaponPerformance.Equals(input.WeaponPerformance)
                ) && 
                (
                    this.ImpactEffects == input.ImpactEffects ||
                    this.ImpactEffects.Equals(input.ImpactEffects)
                ) && 
                (
                    this.GuardianAttributes == input.GuardianAttributes ||
                    this.GuardianAttributes.Equals(input.GuardianAttributes)
                ) && 
                (
                    this.LightAbilities == input.LightAbilities ||
                    this.LightAbilities.Equals(input.LightAbilities)
                ) && 
                (
                    this.DamageTypes == input.DamageTypes ||
                    this.DamageTypes.Equals(input.DamageTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.WeaponPerformance.GetHashCode();
                hashCode = (hashCode * 59) + this.ImpactEffects.GetHashCode();
                hashCode = (hashCode * 59) + this.GuardianAttributes.GetHashCode();
                hashCode = (hashCode * 59) + this.LightAbilities.GetHashCode();
                hashCode = (hashCode * 59) + this.DamageTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
