/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentModelsContentTypeDefaultValue
    /// </summary>
    [DataContract(Name = "Content.Models.ContentTypeDefaultValue")]
    public partial class ContentModelsContentTypeDefaultValue : IEquatable<ContentModelsContentTypeDefaultValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModelsContentTypeDefaultValue" /> class.
        /// </summary>
        /// <param name="whenClause">whenClause.</param>
        /// <param name="whenValue">whenValue.</param>
        /// <param name="defaultValue">defaultValue.</param>
        public ContentModelsContentTypeDefaultValue(string whenClause = default(string), string whenValue = default(string), string defaultValue = default(string))
        {
            this.WhenClause = whenClause;
            this.WhenValue = whenValue;
            this.DefaultValue = defaultValue;
        }

        /// <summary>
        /// Gets or Sets WhenClause
        /// </summary>
        [DataMember(Name = "whenClause", EmitDefaultValue = false)]
        public string WhenClause { get; set; }

        /// <summary>
        /// Gets or Sets WhenValue
        /// </summary>
        [DataMember(Name = "whenValue", EmitDefaultValue = false)]
        public string WhenValue { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentModelsContentTypeDefaultValue {\n");
            sb.Append("  WhenClause: ").Append(WhenClause).Append("\n");
            sb.Append("  WhenValue: ").Append(WhenValue).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModelsContentTypeDefaultValue);
        }

        /// <summary>
        /// Returns true if ContentModelsContentTypeDefaultValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModelsContentTypeDefaultValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModelsContentTypeDefaultValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WhenClause == input.WhenClause ||
                    (this.WhenClause != null &&
                    this.WhenClause.Equals(input.WhenClause))
                ) && 
                (
                    this.WhenValue == input.WhenValue ||
                    (this.WhenValue != null &&
                    this.WhenValue.Equals(input.WhenValue))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WhenClause != null)
                {
                    hashCode = (hashCode * 59) + this.WhenClause.GetHashCode();
                }
                if (this.WhenValue != null)
                {
                    hashCode = (hashCode * 59) + this.WhenValue.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
