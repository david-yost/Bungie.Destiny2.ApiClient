/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents types of Energy that can be used for costs and payments related to Armor 2.0 mods.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.EnergyTypes.DestinyEnergyTypeDefinition")]
    public partial class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition : IEquatable<DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition" /> class.
        /// </summary>
        /// <param name="displayProperties">displayProperties.</param>
        /// <param name="transparentIconPath">A variant of the icon that is transparent and colorless..</param>
        /// <param name="showIcon">If TRUE, the game shows this Energy type&#39;s icon. Otherwise, it doesn&#39;t. Whether you show it or not is up to you..</param>
        /// <param name="enumValue">We have an enumeration for Energy types for quick reference. This is the current definition&#39;s Energy type enum value..</param>
        /// <param name="capacityStatHash">If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \&quot;Any\&quot; is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use).</param>
        /// <param name="costStatHash">If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug&#39;s raw cost..</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), string transparentIconPath = default(string), bool showIcon = default(bool), int enumValue = default(int), int? capacityStatHash = default(int?), int costStatHash = default(int), int hash = default(int), int index = default(int), bool redacted = default(bool))
        {
            this.DisplayProperties = displayProperties;
            this.TransparentIconPath = transparentIconPath;
            this.ShowIcon = showIcon;
            this.EnumValue = enumValue;
            this.CapacityStatHash = capacityStatHash;
            this.CostStatHash = costStatHash;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }

        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name = "displayProperties", EmitDefaultValue = false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// A variant of the icon that is transparent and colorless.
        /// </summary>
        /// <value>A variant of the icon that is transparent and colorless.</value>
        [DataMember(Name = "transparentIconPath", EmitDefaultValue = false)]
        public string TransparentIconPath { get; set; }

        /// <summary>
        /// If TRUE, the game shows this Energy type&#39;s icon. Otherwise, it doesn&#39;t. Whether you show it or not is up to you.
        /// </summary>
        /// <value>If TRUE, the game shows this Energy type&#39;s icon. Otherwise, it doesn&#39;t. Whether you show it or not is up to you.</value>
        [DataMember(Name = "showIcon", EmitDefaultValue = true)]
        public bool ShowIcon { get; set; }

        /// <summary>
        /// We have an enumeration for Energy types for quick reference. This is the current definition&#39;s Energy type enum value.
        /// </summary>
        /// <value>We have an enumeration for Energy types for quick reference. This is the current definition&#39;s Energy type enum value.</value>
        [DataMember(Name = "enumValue", EmitDefaultValue = false)]
        public int EnumValue { get; set; }

        /// <summary>
        /// If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \&quot;Any\&quot; is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)
        /// </summary>
        /// <value>If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \&quot;Any\&quot; is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)</value>
        [DataMember(Name = "capacityStatHash", EmitDefaultValue = true)]
        public int? CapacityStatHash { get; set; }

        /// <summary>
        /// If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug&#39;s raw cost.
        /// </summary>
        /// <value>If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug&#39;s raw cost.</value>
        [DataMember(Name = "costStatHash", EmitDefaultValue = false)]
        public int CostStatHash { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public int Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name = "redacted", EmitDefaultValue = true)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  TransparentIconPath: ").Append(TransparentIconPath).Append("\n");
            sb.Append("  ShowIcon: ").Append(ShowIcon).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  CapacityStatHash: ").Append(CapacityStatHash).Append("\n");
            sb.Append("  CostStatHash: ").Append(CostStatHash).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.TransparentIconPath == input.TransparentIconPath ||
                    (this.TransparentIconPath != null &&
                    this.TransparentIconPath.Equals(input.TransparentIconPath))
                ) && 
                (
                    this.ShowIcon == input.ShowIcon ||
                    this.ShowIcon.Equals(input.ShowIcon)
                ) && 
                (
                    this.EnumValue == input.EnumValue ||
                    this.EnumValue.Equals(input.EnumValue)
                ) && 
                (
                    this.CapacityStatHash == input.CapacityStatHash ||
                    (this.CapacityStatHash != null &&
                    this.CapacityStatHash.Equals(input.CapacityStatHash))
                ) && 
                (
                    this.CostStatHash == input.CostStatHash ||
                    this.CostStatHash.Equals(input.CostStatHash)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayProperties.GetHashCode();
                }
                if (this.TransparentIconPath != null)
                {
                    hashCode = (hashCode * 59) + this.TransparentIconPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowIcon.GetHashCode();
                hashCode = (hashCode * 59) + this.EnumValue.GetHashCode();
                if (this.CapacityStatHash != null)
                {
                    hashCode = (hashCode * 59) + this.CapacityStatHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CostStatHash.GetHashCode();
                hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
