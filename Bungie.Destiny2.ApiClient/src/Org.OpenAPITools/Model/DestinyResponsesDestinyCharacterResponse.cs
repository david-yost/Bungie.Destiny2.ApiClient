/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
    /// </summary>
    [DataContract(Name = "Destiny.Responses.DestinyCharacterResponse")]
    public partial class DestinyResponsesDestinyCharacterResponse : IEquatable<DestinyResponsesDestinyCharacterResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyCharacterResponse" /> class.
        /// </summary>
        /// <param name="inventory">inventory.</param>
        /// <param name="character">character.</param>
        /// <param name="progressions">progressions.</param>
        /// <param name="renderData">renderData.</param>
        /// <param name="activities">activities.</param>
        /// <param name="equipment">equipment.</param>
        /// <param name="loadouts">loadouts.</param>
        /// <param name="kiosks">kiosks.</param>
        /// <param name="plugSets">plugSets.</param>
        /// <param name="presentationNodes">presentationNodes.</param>
        /// <param name="records">records.</param>
        /// <param name="collectibles">collectibles.</param>
        /// <param name="itemComponents">itemComponents.</param>
        /// <param name="uninstancedItemComponents">uninstancedItemComponents.</param>
        /// <param name="currencyLookups">currencyLookups.</param>
        public DestinyResponsesDestinyCharacterResponse(SingleComponentResponseOfDestinyInventoryComponent inventory = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyCharacterComponent character = default(SingleComponentResponseOfDestinyCharacterComponent), SingleComponentResponseOfDestinyCharacterProgressionComponent progressions = default(SingleComponentResponseOfDestinyCharacterProgressionComponent), SingleComponentResponseOfDestinyCharacterRenderComponent renderData = default(SingleComponentResponseOfDestinyCharacterRenderComponent), SingleComponentResponseOfDestinyCharacterActivitiesComponent activities = default(SingleComponentResponseOfDestinyCharacterActivitiesComponent), SingleComponentResponseOfDestinyInventoryComponent equipment = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyLoadoutsComponent loadouts = default(SingleComponentResponseOfDestinyLoadoutsComponent), SingleComponentResponseOfDestinyKiosksComponent kiosks = default(SingleComponentResponseOfDestinyKiosksComponent), SingleComponentResponseOfDestinyPlugSetsComponent plugSets = default(SingleComponentResponseOfDestinyPlugSetsComponent), SingleComponentResponseOfDestinyPresentationNodesComponent presentationNodes = default(SingleComponentResponseOfDestinyPresentationNodesComponent), SingleComponentResponseOfDestinyCharacterRecordsComponent records = default(SingleComponentResponseOfDestinyCharacterRecordsComponent), SingleComponentResponseOfDestinyCollectiblesComponent collectibles = default(SingleComponentResponseOfDestinyCollectiblesComponent), DestinyItemComponentSetOfint64 itemComponents = default(DestinyItemComponentSetOfint64), DestinyBaseItemComponentSetOfuint32 uninstancedItemComponents = default(DestinyBaseItemComponentSetOfuint32), SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups = default(SingleComponentResponseOfDestinyCurrenciesComponent))
        {
            this.Inventory = inventory;
            this.Character = character;
            this.Progressions = progressions;
            this.RenderData = renderData;
            this.Activities = activities;
            this.Equipment = equipment;
            this.Loadouts = loadouts;
            this.Kiosks = kiosks;
            this.PlugSets = plugSets;
            this.PresentationNodes = presentationNodes;
            this.Records = records;
            this.Collectibles = collectibles;
            this.ItemComponents = itemComponents;
            this.UninstancedItemComponents = uninstancedItemComponents;
            this.CurrencyLookups = currencyLookups;
        }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name = "inventory", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyInventoryComponent Inventory { get; set; }

        /// <summary>
        /// Gets or Sets Character
        /// </summary>
        [DataMember(Name = "character", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCharacterComponent Character { get; set; }

        /// <summary>
        /// Gets or Sets Progressions
        /// </summary>
        [DataMember(Name = "progressions", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCharacterProgressionComponent Progressions { get; set; }

        /// <summary>
        /// Gets or Sets RenderData
        /// </summary>
        [DataMember(Name = "renderData", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCharacterRenderComponent RenderData { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name = "activities", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCharacterActivitiesComponent Activities { get; set; }

        /// <summary>
        /// Gets or Sets Equipment
        /// </summary>
        [DataMember(Name = "equipment", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyInventoryComponent Equipment { get; set; }

        /// <summary>
        /// Gets or Sets Loadouts
        /// </summary>
        [DataMember(Name = "loadouts", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyLoadoutsComponent Loadouts { get; set; }

        /// <summary>
        /// Gets or Sets Kiosks
        /// </summary>
        [DataMember(Name = "kiosks", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyKiosksComponent Kiosks { get; set; }

        /// <summary>
        /// Gets or Sets PlugSets
        /// </summary>
        [DataMember(Name = "plugSets", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyPlugSetsComponent PlugSets { get; set; }

        /// <summary>
        /// Gets or Sets PresentationNodes
        /// </summary>
        [DataMember(Name = "presentationNodes", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyPresentationNodesComponent PresentationNodes { get; set; }

        /// <summary>
        /// Gets or Sets Records
        /// </summary>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCharacterRecordsComponent Records { get; set; }

        /// <summary>
        /// Gets or Sets Collectibles
        /// </summary>
        [DataMember(Name = "collectibles", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCollectiblesComponent Collectibles { get; set; }

        /// <summary>
        /// Gets or Sets ItemComponents
        /// </summary>
        [DataMember(Name = "itemComponents", EmitDefaultValue = false)]
        public DestinyItemComponentSetOfint64 ItemComponents { get; set; }

        /// <summary>
        /// Gets or Sets UninstancedItemComponents
        /// </summary>
        [DataMember(Name = "uninstancedItemComponents", EmitDefaultValue = false)]
        public DestinyBaseItemComponentSetOfuint32 UninstancedItemComponents { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyLookups
        /// </summary>
        [DataMember(Name = "currencyLookups", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyCurrenciesComponent CurrencyLookups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyCharacterResponse {\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Character: ").Append(Character).Append("\n");
            sb.Append("  Progressions: ").Append(Progressions).Append("\n");
            sb.Append("  RenderData: ").Append(RenderData).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  Loadouts: ").Append(Loadouts).Append("\n");
            sb.Append("  Kiosks: ").Append(Kiosks).Append("\n");
            sb.Append("  PlugSets: ").Append(PlugSets).Append("\n");
            sb.Append("  PresentationNodes: ").Append(PresentationNodes).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  Collectibles: ").Append(Collectibles).Append("\n");
            sb.Append("  ItemComponents: ").Append(ItemComponents).Append("\n");
            sb.Append("  UninstancedItemComponents: ").Append(UninstancedItemComponents).Append("\n");
            sb.Append("  CurrencyLookups: ").Append(CurrencyLookups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyCharacterResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyCharacterResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyCharacterResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyCharacterResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.Character == input.Character ||
                    (this.Character != null &&
                    this.Character.Equals(input.Character))
                ) && 
                (
                    this.Progressions == input.Progressions ||
                    (this.Progressions != null &&
                    this.Progressions.Equals(input.Progressions))
                ) && 
                (
                    this.RenderData == input.RenderData ||
                    (this.RenderData != null &&
                    this.RenderData.Equals(input.RenderData))
                ) && 
                (
                    this.Activities == input.Activities ||
                    (this.Activities != null &&
                    this.Activities.Equals(input.Activities))
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                ) && 
                (
                    this.Loadouts == input.Loadouts ||
                    (this.Loadouts != null &&
                    this.Loadouts.Equals(input.Loadouts))
                ) && 
                (
                    this.Kiosks == input.Kiosks ||
                    (this.Kiosks != null &&
                    this.Kiosks.Equals(input.Kiosks))
                ) && 
                (
                    this.PlugSets == input.PlugSets ||
                    (this.PlugSets != null &&
                    this.PlugSets.Equals(input.PlugSets))
                ) && 
                (
                    this.PresentationNodes == input.PresentationNodes ||
                    (this.PresentationNodes != null &&
                    this.PresentationNodes.Equals(input.PresentationNodes))
                ) && 
                (
                    this.Records == input.Records ||
                    (this.Records != null &&
                    this.Records.Equals(input.Records))
                ) && 
                (
                    this.Collectibles == input.Collectibles ||
                    (this.Collectibles != null &&
                    this.Collectibles.Equals(input.Collectibles))
                ) && 
                (
                    this.ItemComponents == input.ItemComponents ||
                    (this.ItemComponents != null &&
                    this.ItemComponents.Equals(input.ItemComponents))
                ) && 
                (
                    this.UninstancedItemComponents == input.UninstancedItemComponents ||
                    (this.UninstancedItemComponents != null &&
                    this.UninstancedItemComponents.Equals(input.UninstancedItemComponents))
                ) && 
                (
                    this.CurrencyLookups == input.CurrencyLookups ||
                    (this.CurrencyLookups != null &&
                    this.CurrencyLookups.Equals(input.CurrencyLookups))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inventory != null)
                {
                    hashCode = (hashCode * 59) + this.Inventory.GetHashCode();
                }
                if (this.Character != null)
                {
                    hashCode = (hashCode * 59) + this.Character.GetHashCode();
                }
                if (this.Progressions != null)
                {
                    hashCode = (hashCode * 59) + this.Progressions.GetHashCode();
                }
                if (this.RenderData != null)
                {
                    hashCode = (hashCode * 59) + this.RenderData.GetHashCode();
                }
                if (this.Activities != null)
                {
                    hashCode = (hashCode * 59) + this.Activities.GetHashCode();
                }
                if (this.Equipment != null)
                {
                    hashCode = (hashCode * 59) + this.Equipment.GetHashCode();
                }
                if (this.Loadouts != null)
                {
                    hashCode = (hashCode * 59) + this.Loadouts.GetHashCode();
                }
                if (this.Kiosks != null)
                {
                    hashCode = (hashCode * 59) + this.Kiosks.GetHashCode();
                }
                if (this.PlugSets != null)
                {
                    hashCode = (hashCode * 59) + this.PlugSets.GetHashCode();
                }
                if (this.PresentationNodes != null)
                {
                    hashCode = (hashCode * 59) + this.PresentationNodes.GetHashCode();
                }
                if (this.Records != null)
                {
                    hashCode = (hashCode * 59) + this.Records.GetHashCode();
                }
                if (this.Collectibles != null)
                {
                    hashCode = (hashCode * 59) + this.Collectibles.GetHashCode();
                }
                if (this.ItemComponents != null)
                {
                    hashCode = (hashCode * 59) + this.ItemComponents.GetHashCode();
                }
                if (this.UninstancedItemComponents != null)
                {
                    hashCode = (hashCode * 59) + this.UninstancedItemComponents.GetHashCode();
                }
                if (this.CurrencyLookups != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyLookups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
