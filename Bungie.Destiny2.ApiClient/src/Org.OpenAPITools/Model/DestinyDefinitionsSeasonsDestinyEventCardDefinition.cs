/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines the properties of an &#39;Event Card&#39; in Destiny 2, to coincide with a seasonal event for additional challenges, premium rewards, a new seal, and a special title. For example: Solstice of Heroes 2022.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.Seasons.DestinyEventCardDefinition")]
    public partial class DestinyDefinitionsSeasonsDestinyEventCardDefinition : IEquatable<DestinyDefinitionsSeasonsDestinyEventCardDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsSeasonsDestinyEventCardDefinition" /> class.
        /// </summary>
        /// <param name="displayProperties">displayProperties.</param>
        /// <param name="linkRedirectPath">linkRedirectPath.</param>
        /// <param name="color">color.</param>
        /// <param name="images">images.</param>
        /// <param name="triumphsPresentationNodeHash">triumphsPresentationNodeHash.</param>
        /// <param name="sealPresentationNodeHash">sealPresentationNodeHash.</param>
        /// <param name="ticketCurrencyItemHash">ticketCurrencyItemHash.</param>
        /// <param name="ticketVendorHash">ticketVendorHash.</param>
        /// <param name="ticketVendorCategoryHash">ticketVendorCategoryHash.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsSeasonsDestinyEventCardDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), string linkRedirectPath = default(string), DestinyMiscDestinyColor color = default(DestinyMiscDestinyColor), DestinyDefinitionsSeasonsDestinyEventCardImages images = default(DestinyDefinitionsSeasonsDestinyEventCardImages), int triumphsPresentationNodeHash = default(int), int sealPresentationNodeHash = default(int), int ticketCurrencyItemHash = default(int), int ticketVendorHash = default(int), int ticketVendorCategoryHash = default(int), long endTime = default(long), int hash = default(int), int index = default(int), bool redacted = default(bool))
        {
            this.DisplayProperties = displayProperties;
            this.LinkRedirectPath = linkRedirectPath;
            this.Color = color;
            this.Images = images;
            this.TriumphsPresentationNodeHash = triumphsPresentationNodeHash;
            this.SealPresentationNodeHash = sealPresentationNodeHash;
            this.TicketCurrencyItemHash = ticketCurrencyItemHash;
            this.TicketVendorHash = ticketVendorHash;
            this.TicketVendorCategoryHash = ticketVendorCategoryHash;
            this.EndTime = endTime;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }

        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name = "displayProperties", EmitDefaultValue = false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// Gets or Sets LinkRedirectPath
        /// </summary>
        [DataMember(Name = "linkRedirectPath", EmitDefaultValue = false)]
        public string LinkRedirectPath { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public DestinyMiscDestinyColor Color { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", EmitDefaultValue = false)]
        public DestinyDefinitionsSeasonsDestinyEventCardImages Images { get; set; }

        /// <summary>
        /// Gets or Sets TriumphsPresentationNodeHash
        /// </summary>
        [DataMember(Name = "triumphsPresentationNodeHash", EmitDefaultValue = false)]
        public int TriumphsPresentationNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets SealPresentationNodeHash
        /// </summary>
        [DataMember(Name = "sealPresentationNodeHash", EmitDefaultValue = false)]
        public int SealPresentationNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets TicketCurrencyItemHash
        /// </summary>
        [DataMember(Name = "ticketCurrencyItemHash", EmitDefaultValue = false)]
        public int TicketCurrencyItemHash { get; set; }

        /// <summary>
        /// Gets or Sets TicketVendorHash
        /// </summary>
        [DataMember(Name = "ticketVendorHash", EmitDefaultValue = false)]
        public int TicketVendorHash { get; set; }

        /// <summary>
        /// Gets or Sets TicketVendorCategoryHash
        /// </summary>
        [DataMember(Name = "ticketVendorCategoryHash", EmitDefaultValue = false)]
        public int TicketVendorCategoryHash { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public long EndTime { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public int Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name = "redacted", EmitDefaultValue = true)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsSeasonsDestinyEventCardDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  LinkRedirectPath: ").Append(LinkRedirectPath).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  TriumphsPresentationNodeHash: ").Append(TriumphsPresentationNodeHash).Append("\n");
            sb.Append("  SealPresentationNodeHash: ").Append(SealPresentationNodeHash).Append("\n");
            sb.Append("  TicketCurrencyItemHash: ").Append(TicketCurrencyItemHash).Append("\n");
            sb.Append("  TicketVendorHash: ").Append(TicketVendorHash).Append("\n");
            sb.Append("  TicketVendorCategoryHash: ").Append(TicketVendorCategoryHash).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsSeasonsDestinyEventCardDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsSeasonsDestinyEventCardDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsSeasonsDestinyEventCardDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsSeasonsDestinyEventCardDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.LinkRedirectPath == input.LinkRedirectPath ||
                    (this.LinkRedirectPath != null &&
                    this.LinkRedirectPath.Equals(input.LinkRedirectPath))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Images == input.Images ||
                    (this.Images != null &&
                    this.Images.Equals(input.Images))
                ) && 
                (
                    this.TriumphsPresentationNodeHash == input.TriumphsPresentationNodeHash ||
                    this.TriumphsPresentationNodeHash.Equals(input.TriumphsPresentationNodeHash)
                ) && 
                (
                    this.SealPresentationNodeHash == input.SealPresentationNodeHash ||
                    this.SealPresentationNodeHash.Equals(input.SealPresentationNodeHash)
                ) && 
                (
                    this.TicketCurrencyItemHash == input.TicketCurrencyItemHash ||
                    this.TicketCurrencyItemHash.Equals(input.TicketCurrencyItemHash)
                ) && 
                (
                    this.TicketVendorHash == input.TicketVendorHash ||
                    this.TicketVendorHash.Equals(input.TicketVendorHash)
                ) && 
                (
                    this.TicketVendorCategoryHash == input.TicketVendorCategoryHash ||
                    this.TicketVendorCategoryHash.Equals(input.TicketVendorCategoryHash)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayProperties.GetHashCode();
                }
                if (this.LinkRedirectPath != null)
                {
                    hashCode = (hashCode * 59) + this.LinkRedirectPath.GetHashCode();
                }
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                if (this.Images != null)
                {
                    hashCode = (hashCode * 59) + this.Images.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TriumphsPresentationNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.SealPresentationNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketCurrencyItemHash.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketVendorHash.GetHashCode();
                hashCode = (hashCode * 59) + this.TicketVendorCategoryHash.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
