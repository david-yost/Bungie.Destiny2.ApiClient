/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyDefinitionsSeasonsDestinyEventCardImages
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.Seasons.DestinyEventCardImages")]
    public partial class DestinyDefinitionsSeasonsDestinyEventCardImages : IEquatable<DestinyDefinitionsSeasonsDestinyEventCardImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsSeasonsDestinyEventCardImages" /> class.
        /// </summary>
        /// <param name="unownedCardSleeveImagePath">unownedCardSleeveImagePath.</param>
        /// <param name="unownedCardSleeveWrapImagePath">unownedCardSleeveWrapImagePath.</param>
        /// <param name="cardIncompleteImagePath">cardIncompleteImagePath.</param>
        /// <param name="cardCompleteImagePath">cardCompleteImagePath.</param>
        /// <param name="cardCompleteWrapImagePath">cardCompleteWrapImagePath.</param>
        /// <param name="progressIconImagePath">progressIconImagePath.</param>
        /// <param name="themeBackgroundImagePath">themeBackgroundImagePath.</param>
        public DestinyDefinitionsSeasonsDestinyEventCardImages(string unownedCardSleeveImagePath = default(string), string unownedCardSleeveWrapImagePath = default(string), string cardIncompleteImagePath = default(string), string cardCompleteImagePath = default(string), string cardCompleteWrapImagePath = default(string), string progressIconImagePath = default(string), string themeBackgroundImagePath = default(string))
        {
            this.UnownedCardSleeveImagePath = unownedCardSleeveImagePath;
            this.UnownedCardSleeveWrapImagePath = unownedCardSleeveWrapImagePath;
            this.CardIncompleteImagePath = cardIncompleteImagePath;
            this.CardCompleteImagePath = cardCompleteImagePath;
            this.CardCompleteWrapImagePath = cardCompleteWrapImagePath;
            this.ProgressIconImagePath = progressIconImagePath;
            this.ThemeBackgroundImagePath = themeBackgroundImagePath;
        }

        /// <summary>
        /// Gets or Sets UnownedCardSleeveImagePath
        /// </summary>
        [DataMember(Name = "unownedCardSleeveImagePath", EmitDefaultValue = false)]
        public string UnownedCardSleeveImagePath { get; set; }

        /// <summary>
        /// Gets or Sets UnownedCardSleeveWrapImagePath
        /// </summary>
        [DataMember(Name = "unownedCardSleeveWrapImagePath", EmitDefaultValue = false)]
        public string UnownedCardSleeveWrapImagePath { get; set; }

        /// <summary>
        /// Gets or Sets CardIncompleteImagePath
        /// </summary>
        [DataMember(Name = "cardIncompleteImagePath", EmitDefaultValue = false)]
        public string CardIncompleteImagePath { get; set; }

        /// <summary>
        /// Gets or Sets CardCompleteImagePath
        /// </summary>
        [DataMember(Name = "cardCompleteImagePath", EmitDefaultValue = false)]
        public string CardCompleteImagePath { get; set; }

        /// <summary>
        /// Gets or Sets CardCompleteWrapImagePath
        /// </summary>
        [DataMember(Name = "cardCompleteWrapImagePath", EmitDefaultValue = false)]
        public string CardCompleteWrapImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ProgressIconImagePath
        /// </summary>
        [DataMember(Name = "progressIconImagePath", EmitDefaultValue = false)]
        public string ProgressIconImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ThemeBackgroundImagePath
        /// </summary>
        [DataMember(Name = "themeBackgroundImagePath", EmitDefaultValue = false)]
        public string ThemeBackgroundImagePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsSeasonsDestinyEventCardImages {\n");
            sb.Append("  UnownedCardSleeveImagePath: ").Append(UnownedCardSleeveImagePath).Append("\n");
            sb.Append("  UnownedCardSleeveWrapImagePath: ").Append(UnownedCardSleeveWrapImagePath).Append("\n");
            sb.Append("  CardIncompleteImagePath: ").Append(CardIncompleteImagePath).Append("\n");
            sb.Append("  CardCompleteImagePath: ").Append(CardCompleteImagePath).Append("\n");
            sb.Append("  CardCompleteWrapImagePath: ").Append(CardCompleteWrapImagePath).Append("\n");
            sb.Append("  ProgressIconImagePath: ").Append(ProgressIconImagePath).Append("\n");
            sb.Append("  ThemeBackgroundImagePath: ").Append(ThemeBackgroundImagePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsSeasonsDestinyEventCardImages);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsSeasonsDestinyEventCardImages instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsSeasonsDestinyEventCardImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsSeasonsDestinyEventCardImages input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UnownedCardSleeveImagePath == input.UnownedCardSleeveImagePath ||
                    (this.UnownedCardSleeveImagePath != null &&
                    this.UnownedCardSleeveImagePath.Equals(input.UnownedCardSleeveImagePath))
                ) && 
                (
                    this.UnownedCardSleeveWrapImagePath == input.UnownedCardSleeveWrapImagePath ||
                    (this.UnownedCardSleeveWrapImagePath != null &&
                    this.UnownedCardSleeveWrapImagePath.Equals(input.UnownedCardSleeveWrapImagePath))
                ) && 
                (
                    this.CardIncompleteImagePath == input.CardIncompleteImagePath ||
                    (this.CardIncompleteImagePath != null &&
                    this.CardIncompleteImagePath.Equals(input.CardIncompleteImagePath))
                ) && 
                (
                    this.CardCompleteImagePath == input.CardCompleteImagePath ||
                    (this.CardCompleteImagePath != null &&
                    this.CardCompleteImagePath.Equals(input.CardCompleteImagePath))
                ) && 
                (
                    this.CardCompleteWrapImagePath == input.CardCompleteWrapImagePath ||
                    (this.CardCompleteWrapImagePath != null &&
                    this.CardCompleteWrapImagePath.Equals(input.CardCompleteWrapImagePath))
                ) && 
                (
                    this.ProgressIconImagePath == input.ProgressIconImagePath ||
                    (this.ProgressIconImagePath != null &&
                    this.ProgressIconImagePath.Equals(input.ProgressIconImagePath))
                ) && 
                (
                    this.ThemeBackgroundImagePath == input.ThemeBackgroundImagePath ||
                    (this.ThemeBackgroundImagePath != null &&
                    this.ThemeBackgroundImagePath.Equals(input.ThemeBackgroundImagePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnownedCardSleeveImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.UnownedCardSleeveImagePath.GetHashCode();
                }
                if (this.UnownedCardSleeveWrapImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.UnownedCardSleeveWrapImagePath.GetHashCode();
                }
                if (this.CardIncompleteImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.CardIncompleteImagePath.GetHashCode();
                }
                if (this.CardCompleteImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.CardCompleteImagePath.GetHashCode();
                }
                if (this.CardCompleteWrapImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.CardCompleteWrapImagePath.GetHashCode();
                }
                if (this.ProgressIconImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.ProgressIconImagePath.GetHashCode();
                }
                if (this.ThemeBackgroundImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.ThemeBackgroundImagePath.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
