/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Instanced items can have perks: benefits that the item bestows.  These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item&#39;s tooltip.  Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
    /// </summary>
    [DataContract(Name = "Destiny.Entities.Items.DestinyItemPerksComponent")]
    public partial class DestinyEntitiesItemsDestinyItemPerksComponent : IEquatable<DestinyEntitiesItemsDestinyItemPerksComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyEntitiesItemsDestinyItemPerksComponent" /> class.
        /// </summary>
        /// <param name="perks">The list of perks to display in an item tooltip - and whether or not they have been activated..</param>
        public DestinyEntitiesItemsDestinyItemPerksComponent(List<DestinyPerksDestinyPerkReference> perks = default(List<DestinyPerksDestinyPerkReference>))
        {
            this.Perks = perks;
        }

        /// <summary>
        /// The list of perks to display in an item tooltip - and whether or not they have been activated.
        /// </summary>
        /// <value>The list of perks to display in an item tooltip - and whether or not they have been activated.</value>
        [DataMember(Name = "perks", EmitDefaultValue = false)]
        public List<DestinyPerksDestinyPerkReference> Perks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyEntitiesItemsDestinyItemPerksComponent {\n");
            sb.Append("  Perks: ").Append(Perks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyEntitiesItemsDestinyItemPerksComponent);
        }

        /// <summary>
        /// Returns true if DestinyEntitiesItemsDestinyItemPerksComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyEntitiesItemsDestinyItemPerksComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyEntitiesItemsDestinyItemPerksComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Perks == input.Perks ||
                    this.Perks != null &&
                    input.Perks != null &&
                    this.Perks.SequenceEqual(input.Perks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Perks != null)
                {
                    hashCode = (hashCode * 59) + this.Perks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
