/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserModelsGetCredentialTypesForAccountResponse
    /// </summary>
    [DataContract(Name = "User.Models.GetCredentialTypesForAccountResponse")]
    public partial class UserModelsGetCredentialTypesForAccountResponse : IEquatable<UserModelsGetCredentialTypesForAccountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModelsGetCredentialTypesForAccountResponse" /> class.
        /// </summary>
        /// <param name="credentialType">credentialType.</param>
        /// <param name="credentialDisplayName">credentialDisplayName.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="credentialAsString">credentialAsString.</param>
        public UserModelsGetCredentialTypesForAccountResponse(int credentialType = default(int), string credentialDisplayName = default(string), bool isPublic = default(bool), string credentialAsString = default(string))
        {
            this.CredentialType = credentialType;
            this.CredentialDisplayName = credentialDisplayName;
            this.IsPublic = isPublic;
            this.CredentialAsString = credentialAsString;
        }

        /// <summary>
        /// Gets or Sets CredentialType
        /// </summary>
        [DataMember(Name = "credentialType", EmitDefaultValue = false)]
        public int CredentialType { get; set; }

        /// <summary>
        /// Gets or Sets CredentialDisplayName
        /// </summary>
        [DataMember(Name = "credentialDisplayName", EmitDefaultValue = false)]
        public string CredentialDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name = "isPublic", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets CredentialAsString
        /// </summary>
        [DataMember(Name = "credentialAsString", EmitDefaultValue = false)]
        public string CredentialAsString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModelsGetCredentialTypesForAccountResponse {\n");
            sb.Append("  CredentialType: ").Append(CredentialType).Append("\n");
            sb.Append("  CredentialDisplayName: ").Append(CredentialDisplayName).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  CredentialAsString: ").Append(CredentialAsString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserModelsGetCredentialTypesForAccountResponse);
        }

        /// <summary>
        /// Returns true if UserModelsGetCredentialTypesForAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserModelsGetCredentialTypesForAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModelsGetCredentialTypesForAccountResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CredentialType == input.CredentialType ||
                    this.CredentialType.Equals(input.CredentialType)
                ) && 
                (
                    this.CredentialDisplayName == input.CredentialDisplayName ||
                    (this.CredentialDisplayName != null &&
                    this.CredentialDisplayName.Equals(input.CredentialDisplayName))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    this.IsPublic.Equals(input.IsPublic)
                ) && 
                (
                    this.CredentialAsString == input.CredentialAsString ||
                    (this.CredentialAsString != null &&
                    this.CredentialAsString.Equals(input.CredentialAsString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CredentialType.GetHashCode();
                if (this.CredentialDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialDisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPublic.GetHashCode();
                if (this.CredentialAsString != null)
                {
                    hashCode = (hashCode * 59) + this.CredentialAsString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
