/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyItemSetBlockDefinition")]
    public partial class DestinyDefinitionsDestinyItemSetBlockDefinition : IEquatable<DestinyDefinitionsDestinyItemSetBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemSetBlockDefinition" /> class.
        /// </summary>
        /// <param name="itemList">A collection of hashes of set items, for items such as Quest Metadata items that possess this data..</param>
        /// <param name="requireOrderedSetItemAdd">If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest..</param>
        /// <param name="setIsFeatured">If true, the UI should treat this quest as \&quot;featured\&quot;.</param>
        /// <param name="setType">A string identifier we can use to attempt to identify the category of the Quest..</param>
        /// <param name="questLineName">The name of the quest line that this quest step is a part of..</param>
        /// <param name="questLineDescription">The description of the quest line that this quest step is a part of..</param>
        /// <param name="questStepSummary">An additional summary of this step in the quest line..</param>
        public DestinyDefinitionsDestinyItemSetBlockDefinition(List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition> itemList = default(List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition>), bool requireOrderedSetItemAdd = default(bool), bool setIsFeatured = default(bool), string setType = default(string), string questLineName = default(string), string questLineDescription = default(string), string questStepSummary = default(string))
        {
            this.ItemList = itemList;
            this.RequireOrderedSetItemAdd = requireOrderedSetItemAdd;
            this.SetIsFeatured = setIsFeatured;
            this.SetType = setType;
            this.QuestLineName = questLineName;
            this.QuestLineDescription = questLineDescription;
            this.QuestStepSummary = questStepSummary;
        }

        /// <summary>
        /// A collection of hashes of set items, for items such as Quest Metadata items that possess this data.
        /// </summary>
        /// <value>A collection of hashes of set items, for items such as Quest Metadata items that possess this data.</value>
        [DataMember(Name = "itemList", EmitDefaultValue = false)]
        public List<DestinyDefinitionsDestinyItemSetBlockEntryDefinition> ItemList { get; set; }

        /// <summary>
        /// If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.
        /// </summary>
        /// <value>If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.</value>
        [DataMember(Name = "requireOrderedSetItemAdd", EmitDefaultValue = true)]
        public bool RequireOrderedSetItemAdd { get; set; }

        /// <summary>
        /// If true, the UI should treat this quest as \&quot;featured\&quot;
        /// </summary>
        /// <value>If true, the UI should treat this quest as \&quot;featured\&quot;</value>
        [DataMember(Name = "setIsFeatured", EmitDefaultValue = true)]
        public bool SetIsFeatured { get; set; }

        /// <summary>
        /// A string identifier we can use to attempt to identify the category of the Quest.
        /// </summary>
        /// <value>A string identifier we can use to attempt to identify the category of the Quest.</value>
        [DataMember(Name = "setType", EmitDefaultValue = false)]
        public string SetType { get; set; }

        /// <summary>
        /// The name of the quest line that this quest step is a part of.
        /// </summary>
        /// <value>The name of the quest line that this quest step is a part of.</value>
        [DataMember(Name = "questLineName", EmitDefaultValue = false)]
        public string QuestLineName { get; set; }

        /// <summary>
        /// The description of the quest line that this quest step is a part of.
        /// </summary>
        /// <value>The description of the quest line that this quest step is a part of.</value>
        [DataMember(Name = "questLineDescription", EmitDefaultValue = false)]
        public string QuestLineDescription { get; set; }

        /// <summary>
        /// An additional summary of this step in the quest line.
        /// </summary>
        /// <value>An additional summary of this step in the quest line.</value>
        [DataMember(Name = "questStepSummary", EmitDefaultValue = false)]
        public string QuestStepSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemSetBlockDefinition {\n");
            sb.Append("  ItemList: ").Append(ItemList).Append("\n");
            sb.Append("  RequireOrderedSetItemAdd: ").Append(RequireOrderedSetItemAdd).Append("\n");
            sb.Append("  SetIsFeatured: ").Append(SetIsFeatured).Append("\n");
            sb.Append("  SetType: ").Append(SetType).Append("\n");
            sb.Append("  QuestLineName: ").Append(QuestLineName).Append("\n");
            sb.Append("  QuestLineDescription: ").Append(QuestLineDescription).Append("\n");
            sb.Append("  QuestStepSummary: ").Append(QuestStepSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemSetBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemSetBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemSetBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemSetBlockDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemList == input.ItemList ||
                    this.ItemList != null &&
                    input.ItemList != null &&
                    this.ItemList.SequenceEqual(input.ItemList)
                ) && 
                (
                    this.RequireOrderedSetItemAdd == input.RequireOrderedSetItemAdd ||
                    this.RequireOrderedSetItemAdd.Equals(input.RequireOrderedSetItemAdd)
                ) && 
                (
                    this.SetIsFeatured == input.SetIsFeatured ||
                    this.SetIsFeatured.Equals(input.SetIsFeatured)
                ) && 
                (
                    this.SetType == input.SetType ||
                    (this.SetType != null &&
                    this.SetType.Equals(input.SetType))
                ) && 
                (
                    this.QuestLineName == input.QuestLineName ||
                    (this.QuestLineName != null &&
                    this.QuestLineName.Equals(input.QuestLineName))
                ) && 
                (
                    this.QuestLineDescription == input.QuestLineDescription ||
                    (this.QuestLineDescription != null &&
                    this.QuestLineDescription.Equals(input.QuestLineDescription))
                ) && 
                (
                    this.QuestStepSummary == input.QuestStepSummary ||
                    (this.QuestStepSummary != null &&
                    this.QuestStepSummary.Equals(input.QuestStepSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemList != null)
                {
                    hashCode = (hashCode * 59) + this.ItemList.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequireOrderedSetItemAdd.GetHashCode();
                hashCode = (hashCode * 59) + this.SetIsFeatured.GetHashCode();
                if (this.SetType != null)
                {
                    hashCode = (hashCode * 59) + this.SetType.GetHashCode();
                }
                if (this.QuestLineName != null)
                {
                    hashCode = (hashCode * 59) + this.QuestLineName.GetHashCode();
                }
                if (this.QuestLineDescription != null)
                {
                    hashCode = (hashCode * 59) + this.QuestLineDescription.GetHashCode();
                }
                if (this.QuestStepSummary != null)
                {
                    hashCode = (hashCode * 59) + this.QuestStepSummary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
