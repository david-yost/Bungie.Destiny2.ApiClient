/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyComponentsCraftablesDestinyCraftablesComponent
    /// </summary>
    [DataContract(Name = "Destiny.Components.Craftables.DestinyCraftablesComponent")]
    public partial class DestinyComponentsCraftablesDestinyCraftablesComponent : IEquatable<DestinyComponentsCraftablesDestinyCraftablesComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsCraftablesDestinyCraftablesComponent" /> class.
        /// </summary>
        /// <param name="craftables">A map of craftable item hashes to craftable item state components..</param>
        /// <param name="craftingRootNodeHash">The hash for the root presentation node definition of craftable item categories..</param>
        public DestinyComponentsCraftablesDestinyCraftablesComponent(Dictionary<string, DestinyComponentsCraftablesDestinyCraftableComponent> craftables = default(Dictionary<string, DestinyComponentsCraftablesDestinyCraftableComponent>), int craftingRootNodeHash = default(int))
        {
            this.Craftables = craftables;
            this.CraftingRootNodeHash = craftingRootNodeHash;
        }

        /// <summary>
        /// A map of craftable item hashes to craftable item state components.
        /// </summary>
        /// <value>A map of craftable item hashes to craftable item state components.</value>
        [DataMember(Name = "craftables", EmitDefaultValue = false)]
        public Dictionary<string, DestinyComponentsCraftablesDestinyCraftableComponent> Craftables { get; set; }

        /// <summary>
        /// The hash for the root presentation node definition of craftable item categories.
        /// </summary>
        /// <value>The hash for the root presentation node definition of craftable item categories.</value>
        [DataMember(Name = "craftingRootNodeHash", EmitDefaultValue = false)]
        public int CraftingRootNodeHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsCraftablesDestinyCraftablesComponent {\n");
            sb.Append("  Craftables: ").Append(Craftables).Append("\n");
            sb.Append("  CraftingRootNodeHash: ").Append(CraftingRootNodeHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsCraftablesDestinyCraftablesComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsCraftablesDestinyCraftablesComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsCraftablesDestinyCraftablesComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsCraftablesDestinyCraftablesComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Craftables == input.Craftables ||
                    this.Craftables != null &&
                    input.Craftables != null &&
                    this.Craftables.SequenceEqual(input.Craftables)
                ) && 
                (
                    this.CraftingRootNodeHash == input.CraftingRootNodeHash ||
                    this.CraftingRootNodeHash.Equals(input.CraftingRootNodeHash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Craftables != null)
                {
                    hashCode = (hashCode * 59) + this.Craftables.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CraftingRootNodeHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
