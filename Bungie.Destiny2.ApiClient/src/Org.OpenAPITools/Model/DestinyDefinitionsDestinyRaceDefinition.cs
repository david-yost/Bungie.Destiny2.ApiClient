/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// In Destiny, \&quot;Races\&quot; are really more like \&quot;Species\&quot;. Sort of. I mean, are the Awoken a separate species from humans? I&#39;m not sure. But either way, they&#39;re defined here. You&#39;ll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyRaceDefinition")]
    public partial class DestinyDefinitionsDestinyRaceDefinition : IEquatable<DestinyDefinitionsDestinyRaceDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyRaceDefinition" /> class.
        /// </summary>
        /// <param name="displayProperties">displayProperties.</param>
        /// <param name="raceType">An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition..</param>
        /// <param name="genderedRaceNames">A localized string referring to the singular form of the Race&#39;s name when referred to in gendered form. Keyed by the DestinyGender..</param>
        /// <param name="genderedRaceNamesByGenderHash">genderedRaceNamesByGenderHash.</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsDestinyRaceDefinition(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties = default(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition), int raceType = default(int), Dictionary<string, string> genderedRaceNames = default(Dictionary<string, string>), Dictionary<string, string> genderedRaceNamesByGenderHash = default(Dictionary<string, string>), int hash = default(int), int index = default(int), bool redacted = default(bool))
        {
            this.DisplayProperties = displayProperties;
            this.RaceType = raceType;
            this.GenderedRaceNames = genderedRaceNames;
            this.GenderedRaceNamesByGenderHash = genderedRaceNamesByGenderHash;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }

        /// <summary>
        /// Gets or Sets DisplayProperties
        /// </summary>
        [DataMember(Name = "displayProperties", EmitDefaultValue = false)]
        public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }

        /// <summary>
        /// An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.
        /// </summary>
        /// <value>An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.</value>
        [DataMember(Name = "raceType", EmitDefaultValue = false)]
        public int RaceType { get; set; }

        /// <summary>
        /// A localized string referring to the singular form of the Race&#39;s name when referred to in gendered form. Keyed by the DestinyGender.
        /// </summary>
        /// <value>A localized string referring to the singular form of the Race&#39;s name when referred to in gendered form. Keyed by the DestinyGender.</value>
        [DataMember(Name = "genderedRaceNames", EmitDefaultValue = false)]
        public Dictionary<string, string> GenderedRaceNames { get; set; }

        /// <summary>
        /// Gets or Sets GenderedRaceNamesByGenderHash
        /// </summary>
        [DataMember(Name = "genderedRaceNamesByGenderHash", EmitDefaultValue = false)]
        public Dictionary<string, string> GenderedRaceNamesByGenderHash { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public int Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name = "redacted", EmitDefaultValue = true)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyRaceDefinition {\n");
            sb.Append("  DisplayProperties: ").Append(DisplayProperties).Append("\n");
            sb.Append("  RaceType: ").Append(RaceType).Append("\n");
            sb.Append("  GenderedRaceNames: ").Append(GenderedRaceNames).Append("\n");
            sb.Append("  GenderedRaceNamesByGenderHash: ").Append(GenderedRaceNamesByGenderHash).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyRaceDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyRaceDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyRaceDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyRaceDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayProperties == input.DisplayProperties ||
                    (this.DisplayProperties != null &&
                    this.DisplayProperties.Equals(input.DisplayProperties))
                ) && 
                (
                    this.RaceType == input.RaceType ||
                    this.RaceType.Equals(input.RaceType)
                ) && 
                (
                    this.GenderedRaceNames == input.GenderedRaceNames ||
                    this.GenderedRaceNames != null &&
                    input.GenderedRaceNames != null &&
                    this.GenderedRaceNames.SequenceEqual(input.GenderedRaceNames)
                ) && 
                (
                    this.GenderedRaceNamesByGenderHash == input.GenderedRaceNamesByGenderHash ||
                    this.GenderedRaceNamesByGenderHash != null &&
                    input.GenderedRaceNamesByGenderHash != null &&
                    this.GenderedRaceNamesByGenderHash.SequenceEqual(input.GenderedRaceNamesByGenderHash)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayProperties != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayProperties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RaceType.GetHashCode();
                if (this.GenderedRaceNames != null)
                {
                    hashCode = (hashCode * 59) + this.GenderedRaceNames.GetHashCode();
                }
                if (this.GenderedRaceNamesByGenderHash != null)
                {
                    hashCode = (hashCode * 59) + this.GenderedRaceNamesByGenderHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
