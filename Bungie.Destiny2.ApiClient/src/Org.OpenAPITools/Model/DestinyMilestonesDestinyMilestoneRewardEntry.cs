/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The character-specific data for a milestone&#39;s reward entry. See DestinyMilestoneDefinition for more information about Reward Entries.
    /// </summary>
    [DataContract(Name = "Destiny.Milestones.DestinyMilestoneRewardEntry")]
    public partial class DestinyMilestonesDestinyMilestoneRewardEntry : IEquatable<DestinyMilestonesDestinyMilestoneRewardEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyMilestonesDestinyMilestoneRewardEntry" /> class.
        /// </summary>
        /// <param name="rewardEntryHash">The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone&#39;s DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data..</param>
        /// <param name="earned">If TRUE, the player has earned this reward..</param>
        /// <param name="redeemed">If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to \&quot;gotTheShinyBauble\&quot; in your own codebase..</param>
        public DestinyMilestonesDestinyMilestoneRewardEntry(int rewardEntryHash = default(int), bool earned = default(bool), bool redeemed = default(bool))
        {
            this.RewardEntryHash = rewardEntryHash;
            this.Earned = earned;
            this.Redeemed = redeemed;
        }

        /// <summary>
        /// The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone&#39;s DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.
        /// </summary>
        /// <value>The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone&#39;s DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.</value>
        [DataMember(Name = "rewardEntryHash", EmitDefaultValue = false)]
        public int RewardEntryHash { get; set; }

        /// <summary>
        /// If TRUE, the player has earned this reward.
        /// </summary>
        /// <value>If TRUE, the player has earned this reward.</value>
        [DataMember(Name = "earned", EmitDefaultValue = true)]
        public bool Earned { get; set; }

        /// <summary>
        /// If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to \&quot;gotTheShinyBauble\&quot; in your own codebase.
        /// </summary>
        /// <value>If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to \&quot;gotTheShinyBauble\&quot; in your own codebase.</value>
        [DataMember(Name = "redeemed", EmitDefaultValue = true)]
        public bool Redeemed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyMilestonesDestinyMilestoneRewardEntry {\n");
            sb.Append("  RewardEntryHash: ").Append(RewardEntryHash).Append("\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("  Redeemed: ").Append(Redeemed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyMilestonesDestinyMilestoneRewardEntry);
        }

        /// <summary>
        /// Returns true if DestinyMilestonesDestinyMilestoneRewardEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyMilestonesDestinyMilestoneRewardEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyMilestonesDestinyMilestoneRewardEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RewardEntryHash == input.RewardEntryHash ||
                    this.RewardEntryHash.Equals(input.RewardEntryHash)
                ) && 
                (
                    this.Earned == input.Earned ||
                    this.Earned.Equals(input.Earned)
                ) && 
                (
                    this.Redeemed == input.Redeemed ||
                    this.Redeemed.Equals(input.Redeemed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RewardEntryHash.GetHashCode();
                hashCode = (hashCode * 59) + this.Earned.GetHashCode();
                hashCode = (hashCode * 59) + this.Redeemed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
