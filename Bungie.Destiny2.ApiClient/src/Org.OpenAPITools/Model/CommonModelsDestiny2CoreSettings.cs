/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CommonModelsDestiny2CoreSettings
    /// </summary>
    [DataContract(Name = "Common.Models.Destiny2CoreSettings")]
    public partial class CommonModelsDestiny2CoreSettings : IEquatable<CommonModelsDestiny2CoreSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelsDestiny2CoreSettings" /> class.
        /// </summary>
        /// <param name="collectionRootNode">collectionRootNode.</param>
        /// <param name="badgesRootNode">badgesRootNode.</param>
        /// <param name="recordsRootNode">recordsRootNode.</param>
        /// <param name="medalsRootNode">medalsRootNode.</param>
        /// <param name="metricsRootNode">metricsRootNode.</param>
        /// <param name="activeTriumphsRootNodeHash">activeTriumphsRootNodeHash.</param>
        /// <param name="activeSealsRootNodeHash">activeSealsRootNodeHash.</param>
        /// <param name="legacyTriumphsRootNodeHash">legacyTriumphsRootNodeHash.</param>
        /// <param name="legacySealsRootNodeHash">legacySealsRootNodeHash.</param>
        /// <param name="medalsRootNodeHash">medalsRootNodeHash.</param>
        /// <param name="exoticCatalystsRootNodeHash">exoticCatalystsRootNodeHash.</param>
        /// <param name="loreRootNodeHash">loreRootNodeHash.</param>
        /// <param name="craftingRootNodeHash">craftingRootNodeHash.</param>
        /// <param name="loadoutConstantsHash">loadoutConstantsHash.</param>
        /// <param name="guardianRankConstantsHash">guardianRankConstantsHash.</param>
        /// <param name="guardianRanksRootNodeHash">guardianRanksRootNodeHash.</param>
        /// <param name="currentRankProgressionHashes">currentRankProgressionHashes.</param>
        /// <param name="insertPlugFreeProtectedPlugItemHashes">insertPlugFreeProtectedPlugItemHashes.</param>
        /// <param name="insertPlugFreeBlockedSocketTypeHashes">insertPlugFreeBlockedSocketTypeHashes.</param>
        /// <param name="undiscoveredCollectibleImage">undiscoveredCollectibleImage.</param>
        /// <param name="ammoTypeHeavyIcon">ammoTypeHeavyIcon.</param>
        /// <param name="ammoTypeSpecialIcon">ammoTypeSpecialIcon.</param>
        /// <param name="ammoTypePrimaryIcon">ammoTypePrimaryIcon.</param>
        /// <param name="currentSeasonalArtifactHash">currentSeasonalArtifactHash.</param>
        /// <param name="currentSeasonHash">currentSeasonHash.</param>
        /// <param name="seasonalChallengesPresentationNodeHash">seasonalChallengesPresentationNodeHash.</param>
        /// <param name="futureSeasonHashes">futureSeasonHashes.</param>
        /// <param name="pastSeasonHashes">pastSeasonHashes.</param>
        public CommonModelsDestiny2CoreSettings(int collectionRootNode = default(int), int badgesRootNode = default(int), int recordsRootNode = default(int), int medalsRootNode = default(int), int metricsRootNode = default(int), int activeTriumphsRootNodeHash = default(int), int activeSealsRootNodeHash = default(int), int legacyTriumphsRootNodeHash = default(int), int legacySealsRootNodeHash = default(int), int medalsRootNodeHash = default(int), int exoticCatalystsRootNodeHash = default(int), int loreRootNodeHash = default(int), int craftingRootNodeHash = default(int), int loadoutConstantsHash = default(int), int guardianRankConstantsHash = default(int), int guardianRanksRootNodeHash = default(int), List<int> currentRankProgressionHashes = default(List<int>), List<int> insertPlugFreeProtectedPlugItemHashes = default(List<int>), List<int> insertPlugFreeBlockedSocketTypeHashes = default(List<int>), string undiscoveredCollectibleImage = default(string), string ammoTypeHeavyIcon = default(string), string ammoTypeSpecialIcon = default(string), string ammoTypePrimaryIcon = default(string), int currentSeasonalArtifactHash = default(int), int? currentSeasonHash = default(int?), int? seasonalChallengesPresentationNodeHash = default(int?), List<int> futureSeasonHashes = default(List<int>), List<int> pastSeasonHashes = default(List<int>))
        {
            this.CollectionRootNode = collectionRootNode;
            this.BadgesRootNode = badgesRootNode;
            this.RecordsRootNode = recordsRootNode;
            this.MedalsRootNode = medalsRootNode;
            this.MetricsRootNode = metricsRootNode;
            this.ActiveTriumphsRootNodeHash = activeTriumphsRootNodeHash;
            this.ActiveSealsRootNodeHash = activeSealsRootNodeHash;
            this.LegacyTriumphsRootNodeHash = legacyTriumphsRootNodeHash;
            this.LegacySealsRootNodeHash = legacySealsRootNodeHash;
            this.MedalsRootNodeHash = medalsRootNodeHash;
            this.ExoticCatalystsRootNodeHash = exoticCatalystsRootNodeHash;
            this.LoreRootNodeHash = loreRootNodeHash;
            this.CraftingRootNodeHash = craftingRootNodeHash;
            this.LoadoutConstantsHash = loadoutConstantsHash;
            this.GuardianRankConstantsHash = guardianRankConstantsHash;
            this.GuardianRanksRootNodeHash = guardianRanksRootNodeHash;
            this.CurrentRankProgressionHashes = currentRankProgressionHashes;
            this.InsertPlugFreeProtectedPlugItemHashes = insertPlugFreeProtectedPlugItemHashes;
            this.InsertPlugFreeBlockedSocketTypeHashes = insertPlugFreeBlockedSocketTypeHashes;
            this.UndiscoveredCollectibleImage = undiscoveredCollectibleImage;
            this.AmmoTypeHeavyIcon = ammoTypeHeavyIcon;
            this.AmmoTypeSpecialIcon = ammoTypeSpecialIcon;
            this.AmmoTypePrimaryIcon = ammoTypePrimaryIcon;
            this.CurrentSeasonalArtifactHash = currentSeasonalArtifactHash;
            this.CurrentSeasonHash = currentSeasonHash;
            this.SeasonalChallengesPresentationNodeHash = seasonalChallengesPresentationNodeHash;
            this.FutureSeasonHashes = futureSeasonHashes;
            this.PastSeasonHashes = pastSeasonHashes;
        }

        /// <summary>
        /// Gets or Sets CollectionRootNode
        /// </summary>
        [DataMember(Name = "collectionRootNode", EmitDefaultValue = false)]
        public int CollectionRootNode { get; set; }

        /// <summary>
        /// Gets or Sets BadgesRootNode
        /// </summary>
        [DataMember(Name = "badgesRootNode", EmitDefaultValue = false)]
        public int BadgesRootNode { get; set; }

        /// <summary>
        /// Gets or Sets RecordsRootNode
        /// </summary>
        [DataMember(Name = "recordsRootNode", EmitDefaultValue = false)]
        public int RecordsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets MedalsRootNode
        /// </summary>
        [DataMember(Name = "medalsRootNode", EmitDefaultValue = false)]
        public int MedalsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets MetricsRootNode
        /// </summary>
        [DataMember(Name = "metricsRootNode", EmitDefaultValue = false)]
        public int MetricsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTriumphsRootNodeHash
        /// </summary>
        [DataMember(Name = "activeTriumphsRootNodeHash", EmitDefaultValue = false)]
        public int ActiveTriumphsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets ActiveSealsRootNodeHash
        /// </summary>
        [DataMember(Name = "activeSealsRootNodeHash", EmitDefaultValue = false)]
        public int ActiveSealsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets LegacyTriumphsRootNodeHash
        /// </summary>
        [DataMember(Name = "legacyTriumphsRootNodeHash", EmitDefaultValue = false)]
        public int LegacyTriumphsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets LegacySealsRootNodeHash
        /// </summary>
        [DataMember(Name = "legacySealsRootNodeHash", EmitDefaultValue = false)]
        public int LegacySealsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets MedalsRootNodeHash
        /// </summary>
        [DataMember(Name = "medalsRootNodeHash", EmitDefaultValue = false)]
        public int MedalsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets ExoticCatalystsRootNodeHash
        /// </summary>
        [DataMember(Name = "exoticCatalystsRootNodeHash", EmitDefaultValue = false)]
        public int ExoticCatalystsRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets LoreRootNodeHash
        /// </summary>
        [DataMember(Name = "loreRootNodeHash", EmitDefaultValue = false)]
        public int LoreRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets CraftingRootNodeHash
        /// </summary>
        [DataMember(Name = "craftingRootNodeHash", EmitDefaultValue = false)]
        public int CraftingRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets LoadoutConstantsHash
        /// </summary>
        [DataMember(Name = "loadoutConstantsHash", EmitDefaultValue = false)]
        public int LoadoutConstantsHash { get; set; }

        /// <summary>
        /// Gets or Sets GuardianRankConstantsHash
        /// </summary>
        [DataMember(Name = "guardianRankConstantsHash", EmitDefaultValue = false)]
        public int GuardianRankConstantsHash { get; set; }

        /// <summary>
        /// Gets or Sets GuardianRanksRootNodeHash
        /// </summary>
        [DataMember(Name = "guardianRanksRootNodeHash", EmitDefaultValue = false)]
        public int GuardianRanksRootNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRankProgressionHashes
        /// </summary>
        [DataMember(Name = "currentRankProgressionHashes", EmitDefaultValue = false)]
        public List<int> CurrentRankProgressionHashes { get; set; }

        /// <summary>
        /// Gets or Sets InsertPlugFreeProtectedPlugItemHashes
        /// </summary>
        [DataMember(Name = "insertPlugFreeProtectedPlugItemHashes", EmitDefaultValue = false)]
        public List<int> InsertPlugFreeProtectedPlugItemHashes { get; set; }

        /// <summary>
        /// Gets or Sets InsertPlugFreeBlockedSocketTypeHashes
        /// </summary>
        [DataMember(Name = "insertPlugFreeBlockedSocketTypeHashes", EmitDefaultValue = false)]
        public List<int> InsertPlugFreeBlockedSocketTypeHashes { get; set; }

        /// <summary>
        /// Gets or Sets UndiscoveredCollectibleImage
        /// </summary>
        [DataMember(Name = "undiscoveredCollectibleImage", EmitDefaultValue = false)]
        public string UndiscoveredCollectibleImage { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeHeavyIcon
        /// </summary>
        [DataMember(Name = "ammoTypeHeavyIcon", EmitDefaultValue = false)]
        public string AmmoTypeHeavyIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeSpecialIcon
        /// </summary>
        [DataMember(Name = "ammoTypeSpecialIcon", EmitDefaultValue = false)]
        public string AmmoTypeSpecialIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypePrimaryIcon
        /// </summary>
        [DataMember(Name = "ammoTypePrimaryIcon", EmitDefaultValue = false)]
        public string AmmoTypePrimaryIcon { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSeasonalArtifactHash
        /// </summary>
        [DataMember(Name = "currentSeasonalArtifactHash", EmitDefaultValue = false)]
        public int CurrentSeasonalArtifactHash { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSeasonHash
        /// </summary>
        [DataMember(Name = "currentSeasonHash", EmitDefaultValue = true)]
        public int? CurrentSeasonHash { get; set; }

        /// <summary>
        /// Gets or Sets SeasonalChallengesPresentationNodeHash
        /// </summary>
        [DataMember(Name = "seasonalChallengesPresentationNodeHash", EmitDefaultValue = true)]
        public int? SeasonalChallengesPresentationNodeHash { get; set; }

        /// <summary>
        /// Gets or Sets FutureSeasonHashes
        /// </summary>
        [DataMember(Name = "futureSeasonHashes", EmitDefaultValue = false)]
        public List<int> FutureSeasonHashes { get; set; }

        /// <summary>
        /// Gets or Sets PastSeasonHashes
        /// </summary>
        [DataMember(Name = "pastSeasonHashes", EmitDefaultValue = false)]
        public List<int> PastSeasonHashes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonModelsDestiny2CoreSettings {\n");
            sb.Append("  CollectionRootNode: ").Append(CollectionRootNode).Append("\n");
            sb.Append("  BadgesRootNode: ").Append(BadgesRootNode).Append("\n");
            sb.Append("  RecordsRootNode: ").Append(RecordsRootNode).Append("\n");
            sb.Append("  MedalsRootNode: ").Append(MedalsRootNode).Append("\n");
            sb.Append("  MetricsRootNode: ").Append(MetricsRootNode).Append("\n");
            sb.Append("  ActiveTriumphsRootNodeHash: ").Append(ActiveTriumphsRootNodeHash).Append("\n");
            sb.Append("  ActiveSealsRootNodeHash: ").Append(ActiveSealsRootNodeHash).Append("\n");
            sb.Append("  LegacyTriumphsRootNodeHash: ").Append(LegacyTriumphsRootNodeHash).Append("\n");
            sb.Append("  LegacySealsRootNodeHash: ").Append(LegacySealsRootNodeHash).Append("\n");
            sb.Append("  MedalsRootNodeHash: ").Append(MedalsRootNodeHash).Append("\n");
            sb.Append("  ExoticCatalystsRootNodeHash: ").Append(ExoticCatalystsRootNodeHash).Append("\n");
            sb.Append("  LoreRootNodeHash: ").Append(LoreRootNodeHash).Append("\n");
            sb.Append("  CraftingRootNodeHash: ").Append(CraftingRootNodeHash).Append("\n");
            sb.Append("  LoadoutConstantsHash: ").Append(LoadoutConstantsHash).Append("\n");
            sb.Append("  GuardianRankConstantsHash: ").Append(GuardianRankConstantsHash).Append("\n");
            sb.Append("  GuardianRanksRootNodeHash: ").Append(GuardianRanksRootNodeHash).Append("\n");
            sb.Append("  CurrentRankProgressionHashes: ").Append(CurrentRankProgressionHashes).Append("\n");
            sb.Append("  InsertPlugFreeProtectedPlugItemHashes: ").Append(InsertPlugFreeProtectedPlugItemHashes).Append("\n");
            sb.Append("  InsertPlugFreeBlockedSocketTypeHashes: ").Append(InsertPlugFreeBlockedSocketTypeHashes).Append("\n");
            sb.Append("  UndiscoveredCollectibleImage: ").Append(UndiscoveredCollectibleImage).Append("\n");
            sb.Append("  AmmoTypeHeavyIcon: ").Append(AmmoTypeHeavyIcon).Append("\n");
            sb.Append("  AmmoTypeSpecialIcon: ").Append(AmmoTypeSpecialIcon).Append("\n");
            sb.Append("  AmmoTypePrimaryIcon: ").Append(AmmoTypePrimaryIcon).Append("\n");
            sb.Append("  CurrentSeasonalArtifactHash: ").Append(CurrentSeasonalArtifactHash).Append("\n");
            sb.Append("  CurrentSeasonHash: ").Append(CurrentSeasonHash).Append("\n");
            sb.Append("  SeasonalChallengesPresentationNodeHash: ").Append(SeasonalChallengesPresentationNodeHash).Append("\n");
            sb.Append("  FutureSeasonHashes: ").Append(FutureSeasonHashes).Append("\n");
            sb.Append("  PastSeasonHashes: ").Append(PastSeasonHashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonModelsDestiny2CoreSettings);
        }

        /// <summary>
        /// Returns true if CommonModelsDestiny2CoreSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonModelsDestiny2CoreSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonModelsDestiny2CoreSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CollectionRootNode == input.CollectionRootNode ||
                    this.CollectionRootNode.Equals(input.CollectionRootNode)
                ) && 
                (
                    this.BadgesRootNode == input.BadgesRootNode ||
                    this.BadgesRootNode.Equals(input.BadgesRootNode)
                ) && 
                (
                    this.RecordsRootNode == input.RecordsRootNode ||
                    this.RecordsRootNode.Equals(input.RecordsRootNode)
                ) && 
                (
                    this.MedalsRootNode == input.MedalsRootNode ||
                    this.MedalsRootNode.Equals(input.MedalsRootNode)
                ) && 
                (
                    this.MetricsRootNode == input.MetricsRootNode ||
                    this.MetricsRootNode.Equals(input.MetricsRootNode)
                ) && 
                (
                    this.ActiveTriumphsRootNodeHash == input.ActiveTriumphsRootNodeHash ||
                    this.ActiveTriumphsRootNodeHash.Equals(input.ActiveTriumphsRootNodeHash)
                ) && 
                (
                    this.ActiveSealsRootNodeHash == input.ActiveSealsRootNodeHash ||
                    this.ActiveSealsRootNodeHash.Equals(input.ActiveSealsRootNodeHash)
                ) && 
                (
                    this.LegacyTriumphsRootNodeHash == input.LegacyTriumphsRootNodeHash ||
                    this.LegacyTriumphsRootNodeHash.Equals(input.LegacyTriumphsRootNodeHash)
                ) && 
                (
                    this.LegacySealsRootNodeHash == input.LegacySealsRootNodeHash ||
                    this.LegacySealsRootNodeHash.Equals(input.LegacySealsRootNodeHash)
                ) && 
                (
                    this.MedalsRootNodeHash == input.MedalsRootNodeHash ||
                    this.MedalsRootNodeHash.Equals(input.MedalsRootNodeHash)
                ) && 
                (
                    this.ExoticCatalystsRootNodeHash == input.ExoticCatalystsRootNodeHash ||
                    this.ExoticCatalystsRootNodeHash.Equals(input.ExoticCatalystsRootNodeHash)
                ) && 
                (
                    this.LoreRootNodeHash == input.LoreRootNodeHash ||
                    this.LoreRootNodeHash.Equals(input.LoreRootNodeHash)
                ) && 
                (
                    this.CraftingRootNodeHash == input.CraftingRootNodeHash ||
                    this.CraftingRootNodeHash.Equals(input.CraftingRootNodeHash)
                ) && 
                (
                    this.LoadoutConstantsHash == input.LoadoutConstantsHash ||
                    this.LoadoutConstantsHash.Equals(input.LoadoutConstantsHash)
                ) && 
                (
                    this.GuardianRankConstantsHash == input.GuardianRankConstantsHash ||
                    this.GuardianRankConstantsHash.Equals(input.GuardianRankConstantsHash)
                ) && 
                (
                    this.GuardianRanksRootNodeHash == input.GuardianRanksRootNodeHash ||
                    this.GuardianRanksRootNodeHash.Equals(input.GuardianRanksRootNodeHash)
                ) && 
                (
                    this.CurrentRankProgressionHashes == input.CurrentRankProgressionHashes ||
                    this.CurrentRankProgressionHashes != null &&
                    input.CurrentRankProgressionHashes != null &&
                    this.CurrentRankProgressionHashes.SequenceEqual(input.CurrentRankProgressionHashes)
                ) && 
                (
                    this.InsertPlugFreeProtectedPlugItemHashes == input.InsertPlugFreeProtectedPlugItemHashes ||
                    this.InsertPlugFreeProtectedPlugItemHashes != null &&
                    input.InsertPlugFreeProtectedPlugItemHashes != null &&
                    this.InsertPlugFreeProtectedPlugItemHashes.SequenceEqual(input.InsertPlugFreeProtectedPlugItemHashes)
                ) && 
                (
                    this.InsertPlugFreeBlockedSocketTypeHashes == input.InsertPlugFreeBlockedSocketTypeHashes ||
                    this.InsertPlugFreeBlockedSocketTypeHashes != null &&
                    input.InsertPlugFreeBlockedSocketTypeHashes != null &&
                    this.InsertPlugFreeBlockedSocketTypeHashes.SequenceEqual(input.InsertPlugFreeBlockedSocketTypeHashes)
                ) && 
                (
                    this.UndiscoveredCollectibleImage == input.UndiscoveredCollectibleImage ||
                    (this.UndiscoveredCollectibleImage != null &&
                    this.UndiscoveredCollectibleImage.Equals(input.UndiscoveredCollectibleImage))
                ) && 
                (
                    this.AmmoTypeHeavyIcon == input.AmmoTypeHeavyIcon ||
                    (this.AmmoTypeHeavyIcon != null &&
                    this.AmmoTypeHeavyIcon.Equals(input.AmmoTypeHeavyIcon))
                ) && 
                (
                    this.AmmoTypeSpecialIcon == input.AmmoTypeSpecialIcon ||
                    (this.AmmoTypeSpecialIcon != null &&
                    this.AmmoTypeSpecialIcon.Equals(input.AmmoTypeSpecialIcon))
                ) && 
                (
                    this.AmmoTypePrimaryIcon == input.AmmoTypePrimaryIcon ||
                    (this.AmmoTypePrimaryIcon != null &&
                    this.AmmoTypePrimaryIcon.Equals(input.AmmoTypePrimaryIcon))
                ) && 
                (
                    this.CurrentSeasonalArtifactHash == input.CurrentSeasonalArtifactHash ||
                    this.CurrentSeasonalArtifactHash.Equals(input.CurrentSeasonalArtifactHash)
                ) && 
                (
                    this.CurrentSeasonHash == input.CurrentSeasonHash ||
                    (this.CurrentSeasonHash != null &&
                    this.CurrentSeasonHash.Equals(input.CurrentSeasonHash))
                ) && 
                (
                    this.SeasonalChallengesPresentationNodeHash == input.SeasonalChallengesPresentationNodeHash ||
                    (this.SeasonalChallengesPresentationNodeHash != null &&
                    this.SeasonalChallengesPresentationNodeHash.Equals(input.SeasonalChallengesPresentationNodeHash))
                ) && 
                (
                    this.FutureSeasonHashes == input.FutureSeasonHashes ||
                    this.FutureSeasonHashes != null &&
                    input.FutureSeasonHashes != null &&
                    this.FutureSeasonHashes.SequenceEqual(input.FutureSeasonHashes)
                ) && 
                (
                    this.PastSeasonHashes == input.PastSeasonHashes ||
                    this.PastSeasonHashes != null &&
                    input.PastSeasonHashes != null &&
                    this.PastSeasonHashes.SequenceEqual(input.PastSeasonHashes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CollectionRootNode.GetHashCode();
                hashCode = (hashCode * 59) + this.BadgesRootNode.GetHashCode();
                hashCode = (hashCode * 59) + this.RecordsRootNode.GetHashCode();
                hashCode = (hashCode * 59) + this.MedalsRootNode.GetHashCode();
                hashCode = (hashCode * 59) + this.MetricsRootNode.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveTriumphsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.ActiveSealsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.LegacyTriumphsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.LegacySealsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.MedalsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.ExoticCatalystsRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.LoreRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.CraftingRootNodeHash.GetHashCode();
                hashCode = (hashCode * 59) + this.LoadoutConstantsHash.GetHashCode();
                hashCode = (hashCode * 59) + this.GuardianRankConstantsHash.GetHashCode();
                hashCode = (hashCode * 59) + this.GuardianRanksRootNodeHash.GetHashCode();
                if (this.CurrentRankProgressionHashes != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentRankProgressionHashes.GetHashCode();
                }
                if (this.InsertPlugFreeProtectedPlugItemHashes != null)
                {
                    hashCode = (hashCode * 59) + this.InsertPlugFreeProtectedPlugItemHashes.GetHashCode();
                }
                if (this.InsertPlugFreeBlockedSocketTypeHashes != null)
                {
                    hashCode = (hashCode * 59) + this.InsertPlugFreeBlockedSocketTypeHashes.GetHashCode();
                }
                if (this.UndiscoveredCollectibleImage != null)
                {
                    hashCode = (hashCode * 59) + this.UndiscoveredCollectibleImage.GetHashCode();
                }
                if (this.AmmoTypeHeavyIcon != null)
                {
                    hashCode = (hashCode * 59) + this.AmmoTypeHeavyIcon.GetHashCode();
                }
                if (this.AmmoTypeSpecialIcon != null)
                {
                    hashCode = (hashCode * 59) + this.AmmoTypeSpecialIcon.GetHashCode();
                }
                if (this.AmmoTypePrimaryIcon != null)
                {
                    hashCode = (hashCode * 59) + this.AmmoTypePrimaryIcon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentSeasonalArtifactHash.GetHashCode();
                if (this.CurrentSeasonHash != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentSeasonHash.GetHashCode();
                }
                if (this.SeasonalChallengesPresentationNodeHash != null)
                {
                    hashCode = (hashCode * 59) + this.SeasonalChallengesPresentationNodeHash.GetHashCode();
                }
                if (this.FutureSeasonHashes != null)
                {
                    hashCode = (hashCode * 59) + this.FutureSeasonHashes.GetHashCode();
                }
                if (this.PastSeasonHashes != null)
                {
                    hashCode = (hashCode * 59) + this.PastSeasonHashes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
