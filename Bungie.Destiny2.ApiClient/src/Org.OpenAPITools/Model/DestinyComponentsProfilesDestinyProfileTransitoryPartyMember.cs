/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This is some bare minimum information about a party member in a Fireteam. Unfortunately, without great computational expense on our side we can only get at the data contained here. I&#39;d like to give you a character ID for example, but we don&#39;t have it. But we do have these three pieces of information. May they help you on your quest to show meaningful data about current Fireteams.  Notably, we don&#39;t and can&#39;t feasibly return info on characters. If you can, try to use just the data below for your UI and purposes. Only hit us with further queries if you absolutely must know the character ID of the currently playing character. Pretty please with sugar on top.
    /// </summary>
    [DataContract(Name = "Destiny.Components.Profiles.DestinyProfileTransitoryPartyMember")]
    public partial class DestinyComponentsProfilesDestinyProfileTransitoryPartyMember : IEquatable<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsProfilesDestinyProfileTransitoryPartyMember" /> class.
        /// </summary>
        /// <param name="membershipId">The Membership ID that matches the party member..</param>
        /// <param name="emblemHash">The identifier for the DestinyInventoryItemDefinition of the player&#39;s emblem..</param>
        /// <param name="displayName">The player&#39;s last known display name..</param>
        /// <param name="status">A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam..</param>
        public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember(long membershipId = default(long), int emblemHash = default(int), string displayName = default(string), int status = default(int))
        {
            this.MembershipId = membershipId;
            this.EmblemHash = emblemHash;
            this.DisplayName = displayName;
            this.Status = status;
        }

        /// <summary>
        /// The Membership ID that matches the party member.
        /// </summary>
        /// <value>The Membership ID that matches the party member.</value>
        [DataMember(Name = "membershipId", EmitDefaultValue = false)]
        public long MembershipId { get; set; }

        /// <summary>
        /// The identifier for the DestinyInventoryItemDefinition of the player&#39;s emblem.
        /// </summary>
        /// <value>The identifier for the DestinyInventoryItemDefinition of the player&#39;s emblem.</value>
        [DataMember(Name = "emblemHash", EmitDefaultValue = false)]
        public int EmblemHash { get; set; }

        /// <summary>
        /// The player&#39;s last known display name.
        /// </summary>
        /// <value>The player&#39;s last known display name.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam.
        /// </summary>
        /// <value>A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsProfilesDestinyProfileTransitoryPartyMember {\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  EmblemHash: ").Append(EmblemHash).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsProfilesDestinyProfileTransitoryPartyMember);
        }

        /// <summary>
        /// Returns true if DestinyComponentsProfilesDestinyProfileTransitoryPartyMember instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsProfilesDestinyProfileTransitoryPartyMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsProfilesDestinyProfileTransitoryPartyMember input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MembershipId == input.MembershipId ||
                    this.MembershipId.Equals(input.MembershipId)
                ) && 
                (
                    this.EmblemHash == input.EmblemHash ||
                    this.EmblemHash.Equals(input.EmblemHash)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MembershipId.GetHashCode();
                hashCode = (hashCode * 59) + this.EmblemHash.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
