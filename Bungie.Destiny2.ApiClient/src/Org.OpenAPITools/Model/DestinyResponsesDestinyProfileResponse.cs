/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The response for GetDestinyProfile, with components for character and item-level data.
    /// </summary>
    [DataContract(Name = "Destiny.Responses.DestinyProfileResponse")]
    public partial class DestinyResponsesDestinyProfileResponse : IEquatable<DestinyResponsesDestinyProfileResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyProfileResponse" /> class.
        /// </summary>
        /// <param name="responseMintedTimestamp">Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness..</param>
        /// <param name="secondaryComponentsMintedTimestamp">Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:   PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory   All other component types may use the primary timestamp property..</param>
        /// <param name="vendorReceipts">vendorReceipts.</param>
        /// <param name="profileInventory">profileInventory.</param>
        /// <param name="profileCurrencies">profileCurrencies.</param>
        /// <param name="profile">profile.</param>
        /// <param name="platformSilver">platformSilver.</param>
        /// <param name="profileKiosks">profileKiosks.</param>
        /// <param name="profilePlugSets">profilePlugSets.</param>
        /// <param name="profileProgression">profileProgression.</param>
        /// <param name="profilePresentationNodes">profilePresentationNodes.</param>
        /// <param name="profileRecords">profileRecords.</param>
        /// <param name="profileCollectibles">profileCollectibles.</param>
        /// <param name="profileTransitoryData">profileTransitoryData.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="profileStringVariables">profileStringVariables.</param>
        /// <param name="profileCommendations">profileCommendations.</param>
        /// <param name="characters">characters.</param>
        /// <param name="characterInventories">characterInventories.</param>
        /// <param name="characterLoadouts">characterLoadouts.</param>
        /// <param name="characterProgressions">characterProgressions.</param>
        /// <param name="characterRenderData">characterRenderData.</param>
        /// <param name="characterActivities">characterActivities.</param>
        /// <param name="characterEquipment">characterEquipment.</param>
        /// <param name="characterKiosks">characterKiosks.</param>
        /// <param name="characterPlugSets">characterPlugSets.</param>
        /// <param name="characterUninstancedItemComponents">Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that&#39;s happening under the surface?  Let&#39;s talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \&quot;itemComponents\&quot; was all that you needed: it was keyed by item&#39;s instance IDs and provided the stateful information you needed inside.  Unfortunately, we don&#39;t live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it&#39;s in Account-level inventory - and the values related to that item&#39;s state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character&#39;s inventory, and show/care about a character&#39;s progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I&#39;m not crying, you&#39;re crying Okay we&#39;re both crying but it&#39;s going to be okay I promise Actually I shouldn&#39;t promise that, I don&#39;t know if it&#39;s going to be okay.</param>
        /// <param name="characterPresentationNodes">characterPresentationNodes.</param>
        /// <param name="characterRecords">characterRecords.</param>
        /// <param name="characterCollectibles">characterCollectibles.</param>
        /// <param name="characterStringVariables">characterStringVariables.</param>
        /// <param name="characterCraftables">characterCraftables.</param>
        /// <param name="itemComponents">itemComponents.</param>
        /// <param name="characterCurrencyLookups">characterCurrencyLookups.</param>
        public DestinyResponsesDestinyProfileResponse(DateTime responseMintedTimestamp = default(DateTime), DateTime secondaryComponentsMintedTimestamp = default(DateTime), SingleComponentResponseOfDestinyVendorReceiptsComponent vendorReceipts = default(SingleComponentResponseOfDestinyVendorReceiptsComponent), SingleComponentResponseOfDestinyInventoryComponent profileInventory = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyInventoryComponent profileCurrencies = default(SingleComponentResponseOfDestinyInventoryComponent), SingleComponentResponseOfDestinyProfileComponent profile = default(SingleComponentResponseOfDestinyProfileComponent), SingleComponentResponseOfDestinyPlatformSilverComponent platformSilver = default(SingleComponentResponseOfDestinyPlatformSilverComponent), SingleComponentResponseOfDestinyKiosksComponent profileKiosks = default(SingleComponentResponseOfDestinyKiosksComponent), SingleComponentResponseOfDestinyPlugSetsComponent profilePlugSets = default(SingleComponentResponseOfDestinyPlugSetsComponent), SingleComponentResponseOfDestinyProfileProgressionComponent profileProgression = default(SingleComponentResponseOfDestinyProfileProgressionComponent), SingleComponentResponseOfDestinyPresentationNodesComponent profilePresentationNodes = default(SingleComponentResponseOfDestinyPresentationNodesComponent), SingleComponentResponseOfDestinyProfileRecordsComponent profileRecords = default(SingleComponentResponseOfDestinyProfileRecordsComponent), SingleComponentResponseOfDestinyProfileCollectiblesComponent profileCollectibles = default(SingleComponentResponseOfDestinyProfileCollectiblesComponent), SingleComponentResponseOfDestinyProfileTransitoryComponent profileTransitoryData = default(SingleComponentResponseOfDestinyProfileTransitoryComponent), SingleComponentResponseOfDestinyMetricsComponent metrics = default(SingleComponentResponseOfDestinyMetricsComponent), SingleComponentResponseOfDestinyStringVariablesComponent profileStringVariables = default(SingleComponentResponseOfDestinyStringVariablesComponent), SingleComponentResponseOfDestinySocialCommendationsComponent profileCommendations = default(SingleComponentResponseOfDestinySocialCommendationsComponent), DictionaryComponentResponseOfint64AndDestinyCharacterComponent characters = default(DictionaryComponentResponseOfint64AndDestinyCharacterComponent), DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterInventories = default(DictionaryComponentResponseOfint64AndDestinyInventoryComponent), DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent characterLoadouts = default(DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent), DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent characterProgressions = default(DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent), DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent characterRenderData = default(DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent), DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent characterActivities = default(DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent), DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterEquipment = default(DictionaryComponentResponseOfint64AndDestinyInventoryComponent), DictionaryComponentResponseOfint64AndDestinyKiosksComponent characterKiosks = default(DictionaryComponentResponseOfint64AndDestinyKiosksComponent), DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent characterPlugSets = default(DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent), Dictionary<string, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents = default(Dictionary<string, DestinyBaseItemComponentSetOfuint32>), DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent characterPresentationNodes = default(DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent), DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent characterRecords = default(DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent), DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent characterCollectibles = default(DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent), DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent characterStringVariables = default(DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent), DictionaryComponentResponseOfint64AndDestinyCraftablesComponent characterCraftables = default(DictionaryComponentResponseOfint64AndDestinyCraftablesComponent), DestinyItemComponentSetOfint64 itemComponents = default(DestinyItemComponentSetOfint64), DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent characterCurrencyLookups = default(DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent))
        {
            this.ResponseMintedTimestamp = responseMintedTimestamp;
            this.SecondaryComponentsMintedTimestamp = secondaryComponentsMintedTimestamp;
            this.VendorReceipts = vendorReceipts;
            this.ProfileInventory = profileInventory;
            this.ProfileCurrencies = profileCurrencies;
            this.Profile = profile;
            this.PlatformSilver = platformSilver;
            this.ProfileKiosks = profileKiosks;
            this.ProfilePlugSets = profilePlugSets;
            this.ProfileProgression = profileProgression;
            this.ProfilePresentationNodes = profilePresentationNodes;
            this.ProfileRecords = profileRecords;
            this.ProfileCollectibles = profileCollectibles;
            this.ProfileTransitoryData = profileTransitoryData;
            this.Metrics = metrics;
            this.ProfileStringVariables = profileStringVariables;
            this.ProfileCommendations = profileCommendations;
            this.Characters = characters;
            this.CharacterInventories = characterInventories;
            this.CharacterLoadouts = characterLoadouts;
            this.CharacterProgressions = characterProgressions;
            this.CharacterRenderData = characterRenderData;
            this.CharacterActivities = characterActivities;
            this.CharacterEquipment = characterEquipment;
            this.CharacterKiosks = characterKiosks;
            this.CharacterPlugSets = characterPlugSets;
            this.CharacterUninstancedItemComponents = characterUninstancedItemComponents;
            this.CharacterPresentationNodes = characterPresentationNodes;
            this.CharacterRecords = characterRecords;
            this.CharacterCollectibles = characterCollectibles;
            this.CharacterStringVariables = characterStringVariables;
            this.CharacterCraftables = characterCraftables;
            this.ItemComponents = itemComponents;
            this.CharacterCurrencyLookups = characterCurrencyLookups;
        }

        /// <summary>
        /// Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.
        /// </summary>
        /// <value>Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.</value>
        [DataMember(Name = "responseMintedTimestamp", EmitDefaultValue = false)]
        public DateTime ResponseMintedTimestamp { get; set; }

        /// <summary>
        /// Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:   PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory   All other component types may use the primary timestamp property.
        /// </summary>
        /// <value>Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:   PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory   All other component types may use the primary timestamp property.</value>
        [DataMember(Name = "secondaryComponentsMintedTimestamp", EmitDefaultValue = false)]
        public DateTime SecondaryComponentsMintedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets VendorReceipts
        /// </summary>
        [DataMember(Name = "vendorReceipts", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyVendorReceiptsComponent VendorReceipts { get; set; }

        /// <summary>
        /// Gets or Sets ProfileInventory
        /// </summary>
        [DataMember(Name = "profileInventory", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyInventoryComponent ProfileInventory { get; set; }

        /// <summary>
        /// Gets or Sets ProfileCurrencies
        /// </summary>
        [DataMember(Name = "profileCurrencies", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyInventoryComponent ProfileCurrencies { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyProfileComponent Profile { get; set; }

        /// <summary>
        /// Gets or Sets PlatformSilver
        /// </summary>
        [DataMember(Name = "platformSilver", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyPlatformSilverComponent PlatformSilver { get; set; }

        /// <summary>
        /// Gets or Sets ProfileKiosks
        /// </summary>
        [DataMember(Name = "profileKiosks", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyKiosksComponent ProfileKiosks { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePlugSets
        /// </summary>
        [DataMember(Name = "profilePlugSets", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyPlugSetsComponent ProfilePlugSets { get; set; }

        /// <summary>
        /// Gets or Sets ProfileProgression
        /// </summary>
        [DataMember(Name = "profileProgression", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyProfileProgressionComponent ProfileProgression { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePresentationNodes
        /// </summary>
        [DataMember(Name = "profilePresentationNodes", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyPresentationNodesComponent ProfilePresentationNodes { get; set; }

        /// <summary>
        /// Gets or Sets ProfileRecords
        /// </summary>
        [DataMember(Name = "profileRecords", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyProfileRecordsComponent ProfileRecords { get; set; }

        /// <summary>
        /// Gets or Sets ProfileCollectibles
        /// </summary>
        [DataMember(Name = "profileCollectibles", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyProfileCollectiblesComponent ProfileCollectibles { get; set; }

        /// <summary>
        /// Gets or Sets ProfileTransitoryData
        /// </summary>
        [DataMember(Name = "profileTransitoryData", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyProfileTransitoryComponent ProfileTransitoryData { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyMetricsComponent Metrics { get; set; }

        /// <summary>
        /// Gets or Sets ProfileStringVariables
        /// </summary>
        [DataMember(Name = "profileStringVariables", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinyStringVariablesComponent ProfileStringVariables { get; set; }

        /// <summary>
        /// Gets or Sets ProfileCommendations
        /// </summary>
        [DataMember(Name = "profileCommendations", EmitDefaultValue = false)]
        public SingleComponentResponseOfDestinySocialCommendationsComponent ProfileCommendations { get; set; }

        /// <summary>
        /// Gets or Sets Characters
        /// </summary>
        [DataMember(Name = "characters", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCharacterComponent Characters { get; set; }

        /// <summary>
        /// Gets or Sets CharacterInventories
        /// </summary>
        [DataMember(Name = "characterInventories", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyInventoryComponent CharacterInventories { get; set; }

        /// <summary>
        /// Gets or Sets CharacterLoadouts
        /// </summary>
        [DataMember(Name = "characterLoadouts", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent CharacterLoadouts { get; set; }

        /// <summary>
        /// Gets or Sets CharacterProgressions
        /// </summary>
        [DataMember(Name = "characterProgressions", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent CharacterProgressions { get; set; }

        /// <summary>
        /// Gets or Sets CharacterRenderData
        /// </summary>
        [DataMember(Name = "characterRenderData", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent CharacterRenderData { get; set; }

        /// <summary>
        /// Gets or Sets CharacterActivities
        /// </summary>
        [DataMember(Name = "characterActivities", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent CharacterActivities { get; set; }

        /// <summary>
        /// Gets or Sets CharacterEquipment
        /// </summary>
        [DataMember(Name = "characterEquipment", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyInventoryComponent CharacterEquipment { get; set; }

        /// <summary>
        /// Gets or Sets CharacterKiosks
        /// </summary>
        [DataMember(Name = "characterKiosks", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyKiosksComponent CharacterKiosks { get; set; }

        /// <summary>
        /// Gets or Sets CharacterPlugSets
        /// </summary>
        [DataMember(Name = "characterPlugSets", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent CharacterPlugSets { get; set; }

        /// <summary>
        /// Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that&#39;s happening under the surface?  Let&#39;s talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \&quot;itemComponents\&quot; was all that you needed: it was keyed by item&#39;s instance IDs and provided the stateful information you needed inside.  Unfortunately, we don&#39;t live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it&#39;s in Account-level inventory - and the values related to that item&#39;s state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character&#39;s inventory, and show/care about a character&#39;s progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I&#39;m not crying, you&#39;re crying Okay we&#39;re both crying but it&#39;s going to be okay I promise Actually I shouldn&#39;t promise that, I don&#39;t know if it&#39;s going to be okay
        /// </summary>
        /// <value>Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that&#39;s happening under the surface?  Let&#39;s talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \&quot;itemComponents\&quot; was all that you needed: it was keyed by item&#39;s instance IDs and provided the stateful information you needed inside.  Unfortunately, we don&#39;t live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it&#39;s in Account-level inventory - and the values related to that item&#39;s state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character&#39;s inventory, and show/care about a character&#39;s progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I&#39;m not crying, you&#39;re crying Okay we&#39;re both crying but it&#39;s going to be okay I promise Actually I shouldn&#39;t promise that, I don&#39;t know if it&#39;s going to be okay</value>
        [DataMember(Name = "characterUninstancedItemComponents", EmitDefaultValue = false)]
        public Dictionary<string, DestinyBaseItemComponentSetOfuint32> CharacterUninstancedItemComponents { get; set; }

        /// <summary>
        /// Gets or Sets CharacterPresentationNodes
        /// </summary>
        [DataMember(Name = "characterPresentationNodes", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent CharacterPresentationNodes { get; set; }

        /// <summary>
        /// Gets or Sets CharacterRecords
        /// </summary>
        [DataMember(Name = "characterRecords", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent CharacterRecords { get; set; }

        /// <summary>
        /// Gets or Sets CharacterCollectibles
        /// </summary>
        [DataMember(Name = "characterCollectibles", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent CharacterCollectibles { get; set; }

        /// <summary>
        /// Gets or Sets CharacterStringVariables
        /// </summary>
        [DataMember(Name = "characterStringVariables", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent CharacterStringVariables { get; set; }

        /// <summary>
        /// Gets or Sets CharacterCraftables
        /// </summary>
        [DataMember(Name = "characterCraftables", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCraftablesComponent CharacterCraftables { get; set; }

        /// <summary>
        /// Gets or Sets ItemComponents
        /// </summary>
        [DataMember(Name = "itemComponents", EmitDefaultValue = false)]
        public DestinyItemComponentSetOfint64 ItemComponents { get; set; }

        /// <summary>
        /// Gets or Sets CharacterCurrencyLookups
        /// </summary>
        [DataMember(Name = "characterCurrencyLookups", EmitDefaultValue = false)]
        public DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent CharacterCurrencyLookups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyProfileResponse {\n");
            sb.Append("  ResponseMintedTimestamp: ").Append(ResponseMintedTimestamp).Append("\n");
            sb.Append("  SecondaryComponentsMintedTimestamp: ").Append(SecondaryComponentsMintedTimestamp).Append("\n");
            sb.Append("  VendorReceipts: ").Append(VendorReceipts).Append("\n");
            sb.Append("  ProfileInventory: ").Append(ProfileInventory).Append("\n");
            sb.Append("  ProfileCurrencies: ").Append(ProfileCurrencies).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  PlatformSilver: ").Append(PlatformSilver).Append("\n");
            sb.Append("  ProfileKiosks: ").Append(ProfileKiosks).Append("\n");
            sb.Append("  ProfilePlugSets: ").Append(ProfilePlugSets).Append("\n");
            sb.Append("  ProfileProgression: ").Append(ProfileProgression).Append("\n");
            sb.Append("  ProfilePresentationNodes: ").Append(ProfilePresentationNodes).Append("\n");
            sb.Append("  ProfileRecords: ").Append(ProfileRecords).Append("\n");
            sb.Append("  ProfileCollectibles: ").Append(ProfileCollectibles).Append("\n");
            sb.Append("  ProfileTransitoryData: ").Append(ProfileTransitoryData).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  ProfileStringVariables: ").Append(ProfileStringVariables).Append("\n");
            sb.Append("  ProfileCommendations: ").Append(ProfileCommendations).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("  CharacterInventories: ").Append(CharacterInventories).Append("\n");
            sb.Append("  CharacterLoadouts: ").Append(CharacterLoadouts).Append("\n");
            sb.Append("  CharacterProgressions: ").Append(CharacterProgressions).Append("\n");
            sb.Append("  CharacterRenderData: ").Append(CharacterRenderData).Append("\n");
            sb.Append("  CharacterActivities: ").Append(CharacterActivities).Append("\n");
            sb.Append("  CharacterEquipment: ").Append(CharacterEquipment).Append("\n");
            sb.Append("  CharacterKiosks: ").Append(CharacterKiosks).Append("\n");
            sb.Append("  CharacterPlugSets: ").Append(CharacterPlugSets).Append("\n");
            sb.Append("  CharacterUninstancedItemComponents: ").Append(CharacterUninstancedItemComponents).Append("\n");
            sb.Append("  CharacterPresentationNodes: ").Append(CharacterPresentationNodes).Append("\n");
            sb.Append("  CharacterRecords: ").Append(CharacterRecords).Append("\n");
            sb.Append("  CharacterCollectibles: ").Append(CharacterCollectibles).Append("\n");
            sb.Append("  CharacterStringVariables: ").Append(CharacterStringVariables).Append("\n");
            sb.Append("  CharacterCraftables: ").Append(CharacterCraftables).Append("\n");
            sb.Append("  ItemComponents: ").Append(ItemComponents).Append("\n");
            sb.Append("  CharacterCurrencyLookups: ").Append(CharacterCurrencyLookups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyProfileResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyProfileResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyProfileResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResponseMintedTimestamp == input.ResponseMintedTimestamp ||
                    (this.ResponseMintedTimestamp != null &&
                    this.ResponseMintedTimestamp.Equals(input.ResponseMintedTimestamp))
                ) && 
                (
                    this.SecondaryComponentsMintedTimestamp == input.SecondaryComponentsMintedTimestamp ||
                    (this.SecondaryComponentsMintedTimestamp != null &&
                    this.SecondaryComponentsMintedTimestamp.Equals(input.SecondaryComponentsMintedTimestamp))
                ) && 
                (
                    this.VendorReceipts == input.VendorReceipts ||
                    (this.VendorReceipts != null &&
                    this.VendorReceipts.Equals(input.VendorReceipts))
                ) && 
                (
                    this.ProfileInventory == input.ProfileInventory ||
                    (this.ProfileInventory != null &&
                    this.ProfileInventory.Equals(input.ProfileInventory))
                ) && 
                (
                    this.ProfileCurrencies == input.ProfileCurrencies ||
                    (this.ProfileCurrencies != null &&
                    this.ProfileCurrencies.Equals(input.ProfileCurrencies))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.PlatformSilver == input.PlatformSilver ||
                    (this.PlatformSilver != null &&
                    this.PlatformSilver.Equals(input.PlatformSilver))
                ) && 
                (
                    this.ProfileKiosks == input.ProfileKiosks ||
                    (this.ProfileKiosks != null &&
                    this.ProfileKiosks.Equals(input.ProfileKiosks))
                ) && 
                (
                    this.ProfilePlugSets == input.ProfilePlugSets ||
                    (this.ProfilePlugSets != null &&
                    this.ProfilePlugSets.Equals(input.ProfilePlugSets))
                ) && 
                (
                    this.ProfileProgression == input.ProfileProgression ||
                    (this.ProfileProgression != null &&
                    this.ProfileProgression.Equals(input.ProfileProgression))
                ) && 
                (
                    this.ProfilePresentationNodes == input.ProfilePresentationNodes ||
                    (this.ProfilePresentationNodes != null &&
                    this.ProfilePresentationNodes.Equals(input.ProfilePresentationNodes))
                ) && 
                (
                    this.ProfileRecords == input.ProfileRecords ||
                    (this.ProfileRecords != null &&
                    this.ProfileRecords.Equals(input.ProfileRecords))
                ) && 
                (
                    this.ProfileCollectibles == input.ProfileCollectibles ||
                    (this.ProfileCollectibles != null &&
                    this.ProfileCollectibles.Equals(input.ProfileCollectibles))
                ) && 
                (
                    this.ProfileTransitoryData == input.ProfileTransitoryData ||
                    (this.ProfileTransitoryData != null &&
                    this.ProfileTransitoryData.Equals(input.ProfileTransitoryData))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) && 
                (
                    this.ProfileStringVariables == input.ProfileStringVariables ||
                    (this.ProfileStringVariables != null &&
                    this.ProfileStringVariables.Equals(input.ProfileStringVariables))
                ) && 
                (
                    this.ProfileCommendations == input.ProfileCommendations ||
                    (this.ProfileCommendations != null &&
                    this.ProfileCommendations.Equals(input.ProfileCommendations))
                ) && 
                (
                    this.Characters == input.Characters ||
                    (this.Characters != null &&
                    this.Characters.Equals(input.Characters))
                ) && 
                (
                    this.CharacterInventories == input.CharacterInventories ||
                    (this.CharacterInventories != null &&
                    this.CharacterInventories.Equals(input.CharacterInventories))
                ) && 
                (
                    this.CharacterLoadouts == input.CharacterLoadouts ||
                    (this.CharacterLoadouts != null &&
                    this.CharacterLoadouts.Equals(input.CharacterLoadouts))
                ) && 
                (
                    this.CharacterProgressions == input.CharacterProgressions ||
                    (this.CharacterProgressions != null &&
                    this.CharacterProgressions.Equals(input.CharacterProgressions))
                ) && 
                (
                    this.CharacterRenderData == input.CharacterRenderData ||
                    (this.CharacterRenderData != null &&
                    this.CharacterRenderData.Equals(input.CharacterRenderData))
                ) && 
                (
                    this.CharacterActivities == input.CharacterActivities ||
                    (this.CharacterActivities != null &&
                    this.CharacterActivities.Equals(input.CharacterActivities))
                ) && 
                (
                    this.CharacterEquipment == input.CharacterEquipment ||
                    (this.CharacterEquipment != null &&
                    this.CharacterEquipment.Equals(input.CharacterEquipment))
                ) && 
                (
                    this.CharacterKiosks == input.CharacterKiosks ||
                    (this.CharacterKiosks != null &&
                    this.CharacterKiosks.Equals(input.CharacterKiosks))
                ) && 
                (
                    this.CharacterPlugSets == input.CharacterPlugSets ||
                    (this.CharacterPlugSets != null &&
                    this.CharacterPlugSets.Equals(input.CharacterPlugSets))
                ) && 
                (
                    this.CharacterUninstancedItemComponents == input.CharacterUninstancedItemComponents ||
                    this.CharacterUninstancedItemComponents != null &&
                    input.CharacterUninstancedItemComponents != null &&
                    this.CharacterUninstancedItemComponents.SequenceEqual(input.CharacterUninstancedItemComponents)
                ) && 
                (
                    this.CharacterPresentationNodes == input.CharacterPresentationNodes ||
                    (this.CharacterPresentationNodes != null &&
                    this.CharacterPresentationNodes.Equals(input.CharacterPresentationNodes))
                ) && 
                (
                    this.CharacterRecords == input.CharacterRecords ||
                    (this.CharacterRecords != null &&
                    this.CharacterRecords.Equals(input.CharacterRecords))
                ) && 
                (
                    this.CharacterCollectibles == input.CharacterCollectibles ||
                    (this.CharacterCollectibles != null &&
                    this.CharacterCollectibles.Equals(input.CharacterCollectibles))
                ) && 
                (
                    this.CharacterStringVariables == input.CharacterStringVariables ||
                    (this.CharacterStringVariables != null &&
                    this.CharacterStringVariables.Equals(input.CharacterStringVariables))
                ) && 
                (
                    this.CharacterCraftables == input.CharacterCraftables ||
                    (this.CharacterCraftables != null &&
                    this.CharacterCraftables.Equals(input.CharacterCraftables))
                ) && 
                (
                    this.ItemComponents == input.ItemComponents ||
                    (this.ItemComponents != null &&
                    this.ItemComponents.Equals(input.ItemComponents))
                ) && 
                (
                    this.CharacterCurrencyLookups == input.CharacterCurrencyLookups ||
                    (this.CharacterCurrencyLookups != null &&
                    this.CharacterCurrencyLookups.Equals(input.CharacterCurrencyLookups))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseMintedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseMintedTimestamp.GetHashCode();
                }
                if (this.SecondaryComponentsMintedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryComponentsMintedTimestamp.GetHashCode();
                }
                if (this.VendorReceipts != null)
                {
                    hashCode = (hashCode * 59) + this.VendorReceipts.GetHashCode();
                }
                if (this.ProfileInventory != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileInventory.GetHashCode();
                }
                if (this.ProfileCurrencies != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileCurrencies.GetHashCode();
                }
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                if (this.PlatformSilver != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformSilver.GetHashCode();
                }
                if (this.ProfileKiosks != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileKiosks.GetHashCode();
                }
                if (this.ProfilePlugSets != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePlugSets.GetHashCode();
                }
                if (this.ProfileProgression != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileProgression.GetHashCode();
                }
                if (this.ProfilePresentationNodes != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePresentationNodes.GetHashCode();
                }
                if (this.ProfileRecords != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileRecords.GetHashCode();
                }
                if (this.ProfileCollectibles != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileCollectibles.GetHashCode();
                }
                if (this.ProfileTransitoryData != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileTransitoryData.GetHashCode();
                }
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.ProfileStringVariables != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileStringVariables.GetHashCode();
                }
                if (this.ProfileCommendations != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileCommendations.GetHashCode();
                }
                if (this.Characters != null)
                {
                    hashCode = (hashCode * 59) + this.Characters.GetHashCode();
                }
                if (this.CharacterInventories != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterInventories.GetHashCode();
                }
                if (this.CharacterLoadouts != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterLoadouts.GetHashCode();
                }
                if (this.CharacterProgressions != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterProgressions.GetHashCode();
                }
                if (this.CharacterRenderData != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterRenderData.GetHashCode();
                }
                if (this.CharacterActivities != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterActivities.GetHashCode();
                }
                if (this.CharacterEquipment != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterEquipment.GetHashCode();
                }
                if (this.CharacterKiosks != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterKiosks.GetHashCode();
                }
                if (this.CharacterPlugSets != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterPlugSets.GetHashCode();
                }
                if (this.CharacterUninstancedItemComponents != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterUninstancedItemComponents.GetHashCode();
                }
                if (this.CharacterPresentationNodes != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterPresentationNodes.GetHashCode();
                }
                if (this.CharacterRecords != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterRecords.GetHashCode();
                }
                if (this.CharacterCollectibles != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterCollectibles.GetHashCode();
                }
                if (this.CharacterStringVariables != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterStringVariables.GetHashCode();
                }
                if (this.CharacterCraftables != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterCraftables.GetHashCode();
                }
                if (this.ItemComponents != null)
                {
                    hashCode = (hashCode * 59) + this.ItemComponents.GetHashCode();
                }
                if (this.CharacterCurrencyLookups != null)
                {
                    hashCode = (hashCode * 59) + this.CharacterCurrencyLookups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
