/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentModelsContentTypePropertySection
    /// </summary>
    [DataContract(Name = "Content.Models.ContentTypePropertySection")]
    public partial class ContentModelsContentTypePropertySection : IEquatable<ContentModelsContentTypePropertySection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentModelsContentTypePropertySection" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="readableName">readableName.</param>
        /// <param name="collapsed">collapsed.</param>
        public ContentModelsContentTypePropertySection(string name = default(string), string readableName = default(string), bool collapsed = default(bool))
        {
            this.Name = name;
            this.ReadableName = readableName;
            this.Collapsed = collapsed;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReadableName
        /// </summary>
        [DataMember(Name = "readableName", EmitDefaultValue = false)]
        public string ReadableName { get; set; }

        /// <summary>
        /// Gets or Sets Collapsed
        /// </summary>
        [DataMember(Name = "collapsed", EmitDefaultValue = true)]
        public bool Collapsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentModelsContentTypePropertySection {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReadableName: ").Append(ReadableName).Append("\n");
            sb.Append("  Collapsed: ").Append(Collapsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentModelsContentTypePropertySection);
        }

        /// <summary>
        /// Returns true if ContentModelsContentTypePropertySection instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentModelsContentTypePropertySection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentModelsContentTypePropertySection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReadableName == input.ReadableName ||
                    (this.ReadableName != null &&
                    this.ReadableName.Equals(input.ReadableName))
                ) && 
                (
                    this.Collapsed == input.Collapsed ||
                    this.Collapsed.Equals(input.Collapsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ReadableName != null)
                {
                    hashCode = (hashCode * 59) + this.ReadableName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Collapsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
