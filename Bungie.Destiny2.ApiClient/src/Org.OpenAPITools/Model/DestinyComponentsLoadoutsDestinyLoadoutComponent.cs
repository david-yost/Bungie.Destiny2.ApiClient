/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyComponentsLoadoutsDestinyLoadoutComponent
    /// </summary>
    [DataContract(Name = "Destiny.Components.Loadouts.DestinyLoadoutComponent")]
    public partial class DestinyComponentsLoadoutsDestinyLoadoutComponent : IEquatable<DestinyComponentsLoadoutsDestinyLoadoutComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsLoadoutsDestinyLoadoutComponent" /> class.
        /// </summary>
        /// <param name="colorHash">colorHash.</param>
        /// <param name="iconHash">iconHash.</param>
        /// <param name="nameHash">nameHash.</param>
        /// <param name="items">items.</param>
        public DestinyComponentsLoadoutsDestinyLoadoutComponent(int colorHash = default(int), int iconHash = default(int), int nameHash = default(int), List<DestinyComponentsLoadoutsDestinyLoadoutItemComponent> items = default(List<DestinyComponentsLoadoutsDestinyLoadoutItemComponent>))
        {
            this.ColorHash = colorHash;
            this.IconHash = iconHash;
            this.NameHash = nameHash;
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets ColorHash
        /// </summary>
        [DataMember(Name = "colorHash", EmitDefaultValue = false)]
        public int ColorHash { get; set; }

        /// <summary>
        /// Gets or Sets IconHash
        /// </summary>
        [DataMember(Name = "iconHash", EmitDefaultValue = false)]
        public int IconHash { get; set; }

        /// <summary>
        /// Gets or Sets NameHash
        /// </summary>
        [DataMember(Name = "nameHash", EmitDefaultValue = false)]
        public int NameHash { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<DestinyComponentsLoadoutsDestinyLoadoutItemComponent> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsLoadoutsDestinyLoadoutComponent {\n");
            sb.Append("  ColorHash: ").Append(ColorHash).Append("\n");
            sb.Append("  IconHash: ").Append(IconHash).Append("\n");
            sb.Append("  NameHash: ").Append(NameHash).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsLoadoutsDestinyLoadoutComponent);
        }

        /// <summary>
        /// Returns true if DestinyComponentsLoadoutsDestinyLoadoutComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsLoadoutsDestinyLoadoutComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsLoadoutsDestinyLoadoutComponent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ColorHash == input.ColorHash ||
                    this.ColorHash.Equals(input.ColorHash)
                ) && 
                (
                    this.IconHash == input.IconHash ||
                    this.IconHash.Equals(input.IconHash)
                ) && 
                (
                    this.NameHash == input.NameHash ||
                    this.NameHash.Equals(input.NameHash)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ColorHash.GetHashCode();
                hashCode = (hashCode * 59) + this.IconHash.GetHashCode();
                hashCode = (hashCode * 59) + this.NameHash.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
