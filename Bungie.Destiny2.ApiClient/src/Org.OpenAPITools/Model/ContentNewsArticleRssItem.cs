/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentNewsArticleRssItem
    /// </summary>
    [DataContract(Name = "Content.NewsArticleRssItem")]
    public partial class ContentNewsArticleRssItem : IEquatable<ContentNewsArticleRssItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentNewsArticleRssItem" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="link">link.</param>
        /// <param name="pubDate">pubDate.</param>
        /// <param name="uniqueIdentifier">uniqueIdentifier.</param>
        /// <param name="description">description.</param>
        /// <param name="htmlContent">htmlContent.</param>
        /// <param name="imagePath">imagePath.</param>
        /// <param name="optionalMobileImagePath">optionalMobileImagePath.</param>
        public ContentNewsArticleRssItem(string title = default(string), string link = default(string), DateTime pubDate = default(DateTime), string uniqueIdentifier = default(string), string description = default(string), string htmlContent = default(string), string imagePath = default(string), string optionalMobileImagePath = default(string))
        {
            this.Title = title;
            this.Link = link;
            this.PubDate = pubDate;
            this.UniqueIdentifier = uniqueIdentifier;
            this.Description = description;
            this.HtmlContent = htmlContent;
            this.ImagePath = imagePath;
            this.OptionalMobileImagePath = optionalMobileImagePath;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "Link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets PubDate
        /// </summary>
        [DataMember(Name = "PubDate", EmitDefaultValue = false)]
        public DateTime PubDate { get; set; }

        /// <summary>
        /// Gets or Sets UniqueIdentifier
        /// </summary>
        [DataMember(Name = "UniqueIdentifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HtmlContent
        /// </summary>
        [DataMember(Name = "HtmlContent", EmitDefaultValue = false)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Gets or Sets ImagePath
        /// </summary>
        [DataMember(Name = "ImagePath", EmitDefaultValue = false)]
        public string ImagePath { get; set; }

        /// <summary>
        /// Gets or Sets OptionalMobileImagePath
        /// </summary>
        [DataMember(Name = "OptionalMobileImagePath", EmitDefaultValue = false)]
        public string OptionalMobileImagePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentNewsArticleRssItem {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  PubDate: ").Append(PubDate).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("  OptionalMobileImagePath: ").Append(OptionalMobileImagePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentNewsArticleRssItem);
        }

        /// <summary>
        /// Returns true if ContentNewsArticleRssItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentNewsArticleRssItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentNewsArticleRssItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.PubDate == input.PubDate ||
                    (this.PubDate != null &&
                    this.PubDate.Equals(input.PubDate))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HtmlContent == input.HtmlContent ||
                    (this.HtmlContent != null &&
                    this.HtmlContent.Equals(input.HtmlContent))
                ) && 
                (
                    this.ImagePath == input.ImagePath ||
                    (this.ImagePath != null &&
                    this.ImagePath.Equals(input.ImagePath))
                ) && 
                (
                    this.OptionalMobileImagePath == input.OptionalMobileImagePath ||
                    (this.OptionalMobileImagePath != null &&
                    this.OptionalMobileImagePath.Equals(input.OptionalMobileImagePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.PubDate != null)
                {
                    hashCode = (hashCode * 59) + this.PubDate.GetHashCode();
                }
                if (this.UniqueIdentifier != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueIdentifier.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.HtmlContent != null)
                {
                    hashCode = (hashCode * 59) + this.HtmlContent.GetHashCode();
                }
                if (this.ImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.ImagePath.GetHashCode();
                }
                if (this.OptionalMobileImagePath != null)
                {
                    hashCode = (hashCode * 59) + this.OptionalMobileImagePath.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
