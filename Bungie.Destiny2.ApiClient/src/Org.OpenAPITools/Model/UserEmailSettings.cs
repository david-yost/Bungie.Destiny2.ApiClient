/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The set of all email subscription/opt-in settings and definitions.
    /// </summary>
    [DataContract(Name = "User.EmailSettings")]
    public partial class UserEmailSettings : IEquatable<UserEmailSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserEmailSettings" /> class.
        /// </summary>
        /// <param name="optInDefinitions">Keyed by the name identifier of the opt-in definition..</param>
        /// <param name="subscriptionDefinitions">Keyed by the name identifier of the Subscription definition..</param>
        /// <param name="views">Keyed by the name identifier of the View definition..</param>
        public UserEmailSettings(Dictionary<string, UserEmailOptInDefinition> optInDefinitions = default(Dictionary<string, UserEmailOptInDefinition>), Dictionary<string, UserEmailSubscriptionDefinition> subscriptionDefinitions = default(Dictionary<string, UserEmailSubscriptionDefinition>), Dictionary<string, UserEmailViewDefinition> views = default(Dictionary<string, UserEmailViewDefinition>))
        {
            this.OptInDefinitions = optInDefinitions;
            this.SubscriptionDefinitions = subscriptionDefinitions;
            this.Views = views;
        }

        /// <summary>
        /// Keyed by the name identifier of the opt-in definition.
        /// </summary>
        /// <value>Keyed by the name identifier of the opt-in definition.</value>
        [DataMember(Name = "optInDefinitions", EmitDefaultValue = false)]
        public Dictionary<string, UserEmailOptInDefinition> OptInDefinitions { get; set; }

        /// <summary>
        /// Keyed by the name identifier of the Subscription definition.
        /// </summary>
        /// <value>Keyed by the name identifier of the Subscription definition.</value>
        [DataMember(Name = "subscriptionDefinitions", EmitDefaultValue = false)]
        public Dictionary<string, UserEmailSubscriptionDefinition> SubscriptionDefinitions { get; set; }

        /// <summary>
        /// Keyed by the name identifier of the View definition.
        /// </summary>
        /// <value>Keyed by the name identifier of the View definition.</value>
        [DataMember(Name = "views", EmitDefaultValue = false)]
        public Dictionary<string, UserEmailViewDefinition> Views { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserEmailSettings {\n");
            sb.Append("  OptInDefinitions: ").Append(OptInDefinitions).Append("\n");
            sb.Append("  SubscriptionDefinitions: ").Append(SubscriptionDefinitions).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserEmailSettings);
        }

        /// <summary>
        /// Returns true if UserEmailSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of UserEmailSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserEmailSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OptInDefinitions == input.OptInDefinitions ||
                    this.OptInDefinitions != null &&
                    input.OptInDefinitions != null &&
                    this.OptInDefinitions.SequenceEqual(input.OptInDefinitions)
                ) && 
                (
                    this.SubscriptionDefinitions == input.SubscriptionDefinitions ||
                    this.SubscriptionDefinitions != null &&
                    input.SubscriptionDefinitions != null &&
                    this.SubscriptionDefinitions.SequenceEqual(input.SubscriptionDefinitions)
                ) && 
                (
                    this.Views == input.Views ||
                    this.Views != null &&
                    input.Views != null &&
                    this.Views.SequenceEqual(input.Views)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OptInDefinitions != null)
                {
                    hashCode = (hashCode * 59) + this.OptInDefinitions.GetHashCode();
                }
                if (this.SubscriptionDefinitions != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionDefinitions.GetHashCode();
                }
                if (this.Views != null)
                {
                    hashCode = (hashCode * 59) + this.Views.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
