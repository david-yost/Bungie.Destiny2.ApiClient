/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An enumeration that indicates the high-level \&quot;type\&quot; of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various weapon \&quot;Types\&quot;, in DestinyItemType they are all classified as \&quot;Weapon\&quot;. This allows for better filtering on a higher level of abstraction for the concept of types.   This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a \&quot;best guess\&quot; fit.   NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.   I keep updating these because they&#39;re so damn convenient. I guess I shouldn&#39;t fight it.
    /// </summary>
    /// <value>An enumeration that indicates the high-level \&quot;type\&quot; of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various weapon \&quot;Types\&quot;, in DestinyItemType they are all classified as \&quot;Weapon\&quot;. This allows for better filtering on a higher level of abstraction for the concept of types.   This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a \&quot;best guess\&quot; fit.   NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.   I keep updating these because they&#39;re so damn convenient. I guess I shouldn&#39;t fight it.</value>
    public enum DestinyDestinyItemType
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,

        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,

        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,

        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,

        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7,

        /// <summary>
        /// Enum NUMBER_8 for value: 8
        /// </summary>
        NUMBER_8 = 8,

        /// <summary>
        /// Enum NUMBER_9 for value: 9
        /// </summary>
        NUMBER_9 = 9,

        /// <summary>
        /// Enum NUMBER_10 for value: 10
        /// </summary>
        NUMBER_10 = 10,

        /// <summary>
        /// Enum NUMBER_11 for value: 11
        /// </summary>
        NUMBER_11 = 11,

        /// <summary>
        /// Enum NUMBER_12 for value: 12
        /// </summary>
        NUMBER_12 = 12,

        /// <summary>
        /// Enum NUMBER_13 for value: 13
        /// </summary>
        NUMBER_13 = 13,

        /// <summary>
        /// Enum NUMBER_14 for value: 14
        /// </summary>
        NUMBER_14 = 14,

        /// <summary>
        /// Enum NUMBER_15 for value: 15
        /// </summary>
        NUMBER_15 = 15,

        /// <summary>
        /// Enum NUMBER_16 for value: 16
        /// </summary>
        NUMBER_16 = 16,

        /// <summary>
        /// Enum NUMBER_17 for value: 17
        /// </summary>
        NUMBER_17 = 17,

        /// <summary>
        /// Enum NUMBER_18 for value: 18
        /// </summary>
        NUMBER_18 = 18,

        /// <summary>
        /// Enum NUMBER_19 for value: 19
        /// </summary>
        NUMBER_19 = 19,

        /// <summary>
        /// Enum NUMBER_20 for value: 20
        /// </summary>
        NUMBER_20 = 20,

        /// <summary>
        /// Enum NUMBER_21 for value: 21
        /// </summary>
        NUMBER_21 = 21,

        /// <summary>
        /// Enum NUMBER_22 for value: 22
        /// </summary>
        NUMBER_22 = 22,

        /// <summary>
        /// Enum NUMBER_23 for value: 23
        /// </summary>
        NUMBER_23 = 23,

        /// <summary>
        /// Enum NUMBER_24 for value: 24
        /// </summary>
        NUMBER_24 = 24,

        /// <summary>
        /// Enum NUMBER_25 for value: 25
        /// </summary>
        NUMBER_25 = 25,

        /// <summary>
        /// Enum NUMBER_26 for value: 26
        /// </summary>
        NUMBER_26 = 26,

        /// <summary>
        /// Enum NUMBER_27 for value: 27
        /// </summary>
        NUMBER_27 = 27,

        /// <summary>
        /// Enum NUMBER_28 for value: 28
        /// </summary>
        NUMBER_28 = 28,

        /// <summary>
        /// Enum NUMBER_29 for value: 29
        /// </summary>
        NUMBER_29 = 29,

        /// <summary>
        /// Enum NUMBER_30 for value: 30
        /// </summary>
        NUMBER_30 = 30
    }

}
