/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a specific group of vendors that can be rendered in the recommended order.  How do we figure out this order? It&#39;s a long story, and will likely get more complicated over time.
    /// </summary>
    [DataContract(Name = "Destiny.Components.Vendors.DestinyVendorGroup")]
    public partial class DestinyComponentsVendorsDestinyVendorGroup : IEquatable<DestinyComponentsVendorsDestinyVendorGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsVendorsDestinyVendorGroup" /> class.
        /// </summary>
        /// <param name="vendorGroupHash">vendorGroupHash.</param>
        /// <param name="vendorHashes">The ordered list of vendors within a particular group..</param>
        public DestinyComponentsVendorsDestinyVendorGroup(int vendorGroupHash = default(int), List<int> vendorHashes = default(List<int>))
        {
            this.VendorGroupHash = vendorGroupHash;
            this.VendorHashes = vendorHashes;
        }

        /// <summary>
        /// Gets or Sets VendorGroupHash
        /// </summary>
        [DataMember(Name = "vendorGroupHash", EmitDefaultValue = false)]
        public int VendorGroupHash { get; set; }

        /// <summary>
        /// The ordered list of vendors within a particular group.
        /// </summary>
        /// <value>The ordered list of vendors within a particular group.</value>
        [DataMember(Name = "vendorHashes", EmitDefaultValue = false)]
        public List<int> VendorHashes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsVendorsDestinyVendorGroup {\n");
            sb.Append("  VendorGroupHash: ").Append(VendorGroupHash).Append("\n");
            sb.Append("  VendorHashes: ").Append(VendorHashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsVendorsDestinyVendorGroup);
        }

        /// <summary>
        /// Returns true if DestinyComponentsVendorsDestinyVendorGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsVendorsDestinyVendorGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsVendorsDestinyVendorGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VendorGroupHash == input.VendorGroupHash ||
                    this.VendorGroupHash.Equals(input.VendorGroupHash)
                ) && 
                (
                    this.VendorHashes == input.VendorHashes ||
                    this.VendorHashes != null &&
                    input.VendorHashes != null &&
                    this.VendorHashes.SequenceEqual(input.VendorHashes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VendorGroupHash.GetHashCode();
                if (this.VendorHashes != null)
                {
                    hashCode = (hashCode * 59) + this.VendorHashes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
