/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyResponsesDestinyProfileUserInfoCard
    /// </summary>
    [DataContract(Name = "Destiny.Responses.DestinyProfileUserInfoCard")]
    public partial class DestinyResponsesDestinyProfileUserInfoCard : IEquatable<DestinyResponsesDestinyProfileUserInfoCard>, IValidatableObject
    {
        /// <summary>
        /// If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
        /// </summary>
        /// <value>If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.</value>
        public enum UnpairedGameVersionsEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16,

            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            NUMBER_32 = 32,

            /// <summary>
            /// Enum NUMBER_64 for value: 64
            /// </summary>
            NUMBER_64 = 64,

            /// <summary>
            /// Enum NUMBER_128 for value: 128
            /// </summary>
            NUMBER_128 = 128,

            /// <summary>
            /// Enum NUMBER_256 for value: 256
            /// </summary>
            NUMBER_256 = 256,

            /// <summary>
            /// Enum NUMBER_512 for value: 512
            /// </summary>
            NUMBER_512 = 512
        }


        /// <summary>
        /// If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
        /// </summary>
        /// <value>If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.</value>
        [DataMember(Name = "unpairedGameVersions", EmitDefaultValue = true)]
        public UnpairedGameVersionsEnum? UnpairedGameVersions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyProfileUserInfoCard" /> class.
        /// </summary>
        /// <param name="dateLastPlayed">dateLastPlayed.</param>
        /// <param name="isOverridden">If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown..</param>
        /// <param name="isCrossSavePrimary">If true, this account is hooked up as the \&quot;Primary\&quot; cross save account for one or more platforms..</param>
        /// <param name="platformSilver">platformSilver.</param>
        /// <param name="unpairedGameVersions">If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it..</param>
        /// <param name="supplementalDisplayName">A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc..</param>
        /// <param name="iconPath">URL the Icon if available..</param>
        /// <param name="crossSaveOverride">If there is a cross save override in effect, this value will tell you the type that is overridding this one..</param>
        /// <param name="applicableMembershipTypes">The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save &#x3D; its original membership type. Cross Save Primary &#x3D; Any membership types it is overridding, and its original membership type Cross Save Overridden &#x3D; Empty list.</param>
        /// <param name="isPublic">If True, this is a public user membership..</param>
        /// <param name="membershipType">Type of the membership. Not necessarily the native type..</param>
        /// <param name="membershipId">Membership ID as they user is known in the Accounts service.</param>
        /// <param name="displayName">Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API..</param>
        /// <param name="bungieGlobalDisplayName">The bungie global display name, if set..</param>
        /// <param name="bungieGlobalDisplayNameCode">The bungie global display name code, if set..</param>
        public DestinyResponsesDestinyProfileUserInfoCard(DateTime dateLastPlayed = default(DateTime), bool isOverridden = default(bool), bool isCrossSavePrimary = default(bool), DestinyComponentsInventoryDestinyPlatformSilverComponent platformSilver = default(DestinyComponentsInventoryDestinyPlatformSilverComponent), UnpairedGameVersionsEnum? unpairedGameVersions = default(UnpairedGameVersionsEnum?), string supplementalDisplayName = default(string), string iconPath = default(string), int crossSaveOverride = default(int), List<int> applicableMembershipTypes = default(List<int>), bool isPublic = default(bool), int membershipType = default(int), long membershipId = default(long), string displayName = default(string), string bungieGlobalDisplayName = default(string), int? bungieGlobalDisplayNameCode = default(int?))
        {
            this.DateLastPlayed = dateLastPlayed;
            this.IsOverridden = isOverridden;
            this.IsCrossSavePrimary = isCrossSavePrimary;
            this.PlatformSilver = platformSilver;
            this.UnpairedGameVersions = unpairedGameVersions;
            this.SupplementalDisplayName = supplementalDisplayName;
            this.IconPath = iconPath;
            this.CrossSaveOverride = crossSaveOverride;
            this.ApplicableMembershipTypes = applicableMembershipTypes;
            this.IsPublic = isPublic;
            this.MembershipType = membershipType;
            this.MembershipId = membershipId;
            this.DisplayName = displayName;
            this.BungieGlobalDisplayName = bungieGlobalDisplayName;
            this.BungieGlobalDisplayNameCode = bungieGlobalDisplayNameCode;
        }

        /// <summary>
        /// Gets or Sets DateLastPlayed
        /// </summary>
        [DataMember(Name = "dateLastPlayed", EmitDefaultValue = false)]
        public DateTime DateLastPlayed { get; set; }

        /// <summary>
        /// If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.
        /// </summary>
        /// <value>If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.</value>
        [DataMember(Name = "isOverridden", EmitDefaultValue = true)]
        public bool IsOverridden { get; set; }

        /// <summary>
        /// If true, this account is hooked up as the \&quot;Primary\&quot; cross save account for one or more platforms.
        /// </summary>
        /// <value>If true, this account is hooked up as the \&quot;Primary\&quot; cross save account for one or more platforms.</value>
        [DataMember(Name = "isCrossSavePrimary", EmitDefaultValue = true)]
        public bool IsCrossSavePrimary { get; set; }

        /// <summary>
        /// Gets or Sets PlatformSilver
        /// </summary>
        [DataMember(Name = "platformSilver", EmitDefaultValue = false)]
        public DestinyComponentsInventoryDestinyPlatformSilverComponent PlatformSilver { get; set; }

        /// <summary>
        /// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
        /// </summary>
        /// <value>A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.</value>
        [DataMember(Name = "supplementalDisplayName", EmitDefaultValue = false)]
        public string SupplementalDisplayName { get; set; }

        /// <summary>
        /// URL the Icon if available.
        /// </summary>
        /// <value>URL the Icon if available.</value>
        [DataMember(Name = "iconPath", EmitDefaultValue = false)]
        public string IconPath { get; set; }

        /// <summary>
        /// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
        /// </summary>
        /// <value>If there is a cross save override in effect, this value will tell you the type that is overridding this one.</value>
        [DataMember(Name = "crossSaveOverride", EmitDefaultValue = false)]
        public int CrossSaveOverride { get; set; }

        /// <summary>
        /// The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save &#x3D; its original membership type. Cross Save Primary &#x3D; Any membership types it is overridding, and its original membership type Cross Save Overridden &#x3D; Empty list
        /// </summary>
        /// <value>The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save &#x3D; its original membership type. Cross Save Primary &#x3D; Any membership types it is overridding, and its original membership type Cross Save Overridden &#x3D; Empty list</value>
        [DataMember(Name = "applicableMembershipTypes", EmitDefaultValue = false)]
        public List<int> ApplicableMembershipTypes { get; set; }

        /// <summary>
        /// If True, this is a public user membership.
        /// </summary>
        /// <value>If True, this is a public user membership.</value>
        [DataMember(Name = "isPublic", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Type of the membership. Not necessarily the native type.
        /// </summary>
        /// <value>Type of the membership. Not necessarily the native type.</value>
        [DataMember(Name = "membershipType", EmitDefaultValue = false)]
        public int MembershipType { get; set; }

        /// <summary>
        /// Membership ID as they user is known in the Accounts service
        /// </summary>
        /// <value>Membership ID as they user is known in the Accounts service</value>
        [DataMember(Name = "membershipId", EmitDefaultValue = false)]
        public long MembershipId { get; set; }

        /// <summary>
        /// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
        /// </summary>
        /// <value>Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The bungie global display name, if set.
        /// </summary>
        /// <value>The bungie global display name, if set.</value>
        [DataMember(Name = "bungieGlobalDisplayName", EmitDefaultValue = false)]
        public string BungieGlobalDisplayName { get; set; }

        /// <summary>
        /// The bungie global display name code, if set.
        /// </summary>
        /// <value>The bungie global display name code, if set.</value>
        [DataMember(Name = "bungieGlobalDisplayNameCode", EmitDefaultValue = true)]
        public int? BungieGlobalDisplayNameCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyProfileUserInfoCard {\n");
            sb.Append("  DateLastPlayed: ").Append(DateLastPlayed).Append("\n");
            sb.Append("  IsOverridden: ").Append(IsOverridden).Append("\n");
            sb.Append("  IsCrossSavePrimary: ").Append(IsCrossSavePrimary).Append("\n");
            sb.Append("  PlatformSilver: ").Append(PlatformSilver).Append("\n");
            sb.Append("  UnpairedGameVersions: ").Append(UnpairedGameVersions).Append("\n");
            sb.Append("  SupplementalDisplayName: ").Append(SupplementalDisplayName).Append("\n");
            sb.Append("  IconPath: ").Append(IconPath).Append("\n");
            sb.Append("  CrossSaveOverride: ").Append(CrossSaveOverride).Append("\n");
            sb.Append("  ApplicableMembershipTypes: ").Append(ApplicableMembershipTypes).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  MembershipType: ").Append(MembershipType).Append("\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  BungieGlobalDisplayName: ").Append(BungieGlobalDisplayName).Append("\n");
            sb.Append("  BungieGlobalDisplayNameCode: ").Append(BungieGlobalDisplayNameCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyProfileUserInfoCard);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyProfileUserInfoCard instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyProfileUserInfoCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyProfileUserInfoCard input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateLastPlayed == input.DateLastPlayed ||
                    (this.DateLastPlayed != null &&
                    this.DateLastPlayed.Equals(input.DateLastPlayed))
                ) && 
                (
                    this.IsOverridden == input.IsOverridden ||
                    this.IsOverridden.Equals(input.IsOverridden)
                ) && 
                (
                    this.IsCrossSavePrimary == input.IsCrossSavePrimary ||
                    this.IsCrossSavePrimary.Equals(input.IsCrossSavePrimary)
                ) && 
                (
                    this.PlatformSilver == input.PlatformSilver ||
                    (this.PlatformSilver != null &&
                    this.PlatformSilver.Equals(input.PlatformSilver))
                ) && 
                (
                    this.UnpairedGameVersions == input.UnpairedGameVersions ||
                    this.UnpairedGameVersions.Equals(input.UnpairedGameVersions)
                ) && 
                (
                    this.SupplementalDisplayName == input.SupplementalDisplayName ||
                    (this.SupplementalDisplayName != null &&
                    this.SupplementalDisplayName.Equals(input.SupplementalDisplayName))
                ) && 
                (
                    this.IconPath == input.IconPath ||
                    (this.IconPath != null &&
                    this.IconPath.Equals(input.IconPath))
                ) && 
                (
                    this.CrossSaveOverride == input.CrossSaveOverride ||
                    this.CrossSaveOverride.Equals(input.CrossSaveOverride)
                ) && 
                (
                    this.ApplicableMembershipTypes == input.ApplicableMembershipTypes ||
                    this.ApplicableMembershipTypes != null &&
                    input.ApplicableMembershipTypes != null &&
                    this.ApplicableMembershipTypes.SequenceEqual(input.ApplicableMembershipTypes)
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    this.IsPublic.Equals(input.IsPublic)
                ) && 
                (
                    this.MembershipType == input.MembershipType ||
                    this.MembershipType.Equals(input.MembershipType)
                ) && 
                (
                    this.MembershipId == input.MembershipId ||
                    this.MembershipId.Equals(input.MembershipId)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.BungieGlobalDisplayName == input.BungieGlobalDisplayName ||
                    (this.BungieGlobalDisplayName != null &&
                    this.BungieGlobalDisplayName.Equals(input.BungieGlobalDisplayName))
                ) && 
                (
                    this.BungieGlobalDisplayNameCode == input.BungieGlobalDisplayNameCode ||
                    (this.BungieGlobalDisplayNameCode != null &&
                    this.BungieGlobalDisplayNameCode.Equals(input.BungieGlobalDisplayNameCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateLastPlayed != null)
                {
                    hashCode = (hashCode * 59) + this.DateLastPlayed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOverridden.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCrossSavePrimary.GetHashCode();
                if (this.PlatformSilver != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformSilver.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnpairedGameVersions.GetHashCode();
                if (this.SupplementalDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.SupplementalDisplayName.GetHashCode();
                }
                if (this.IconPath != null)
                {
                    hashCode = (hashCode * 59) + this.IconPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CrossSaveOverride.GetHashCode();
                if (this.ApplicableMembershipTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableMembershipTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPublic.GetHashCode();
                hashCode = (hashCode * 59) + this.MembershipType.GetHashCode();
                hashCode = (hashCode * 59) + this.MembershipId.GetHashCode();
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.BungieGlobalDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.BungieGlobalDisplayName.GetHashCode();
                }
                if (this.BungieGlobalDisplayNameCode != null)
                {
                    hashCode = (hashCode * 59) + this.BungieGlobalDisplayNameCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
