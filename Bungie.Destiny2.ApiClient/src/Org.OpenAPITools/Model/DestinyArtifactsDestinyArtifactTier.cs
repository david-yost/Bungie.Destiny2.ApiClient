/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyArtifactsDestinyArtifactTier
    /// </summary>
    [DataContract(Name = "Destiny.Artifacts.DestinyArtifactTier")]
    public partial class DestinyArtifactsDestinyArtifactTier : IEquatable<DestinyArtifactsDestinyArtifactTier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyArtifactsDestinyArtifactTier" /> class.
        /// </summary>
        /// <param name="tierHash">tierHash.</param>
        /// <param name="isUnlocked">isUnlocked.</param>
        /// <param name="pointsToUnlock">pointsToUnlock.</param>
        /// <param name="items">items.</param>
        public DestinyArtifactsDestinyArtifactTier(int tierHash = default(int), bool isUnlocked = default(bool), int pointsToUnlock = default(int), List<DestinyArtifactsDestinyArtifactTierItem> items = default(List<DestinyArtifactsDestinyArtifactTierItem>))
        {
            this.TierHash = tierHash;
            this.IsUnlocked = isUnlocked;
            this.PointsToUnlock = pointsToUnlock;
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets TierHash
        /// </summary>
        [DataMember(Name = "tierHash", EmitDefaultValue = false)]
        public int TierHash { get; set; }

        /// <summary>
        /// Gets or Sets IsUnlocked
        /// </summary>
        [DataMember(Name = "isUnlocked", EmitDefaultValue = true)]
        public bool IsUnlocked { get; set; }

        /// <summary>
        /// Gets or Sets PointsToUnlock
        /// </summary>
        [DataMember(Name = "pointsToUnlock", EmitDefaultValue = false)]
        public int PointsToUnlock { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<DestinyArtifactsDestinyArtifactTierItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyArtifactsDestinyArtifactTier {\n");
            sb.Append("  TierHash: ").Append(TierHash).Append("\n");
            sb.Append("  IsUnlocked: ").Append(IsUnlocked).Append("\n");
            sb.Append("  PointsToUnlock: ").Append(PointsToUnlock).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyArtifactsDestinyArtifactTier);
        }

        /// <summary>
        /// Returns true if DestinyArtifactsDestinyArtifactTier instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyArtifactsDestinyArtifactTier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyArtifactsDestinyArtifactTier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TierHash == input.TierHash ||
                    this.TierHash.Equals(input.TierHash)
                ) && 
                (
                    this.IsUnlocked == input.IsUnlocked ||
                    this.IsUnlocked.Equals(input.IsUnlocked)
                ) && 
                (
                    this.PointsToUnlock == input.PointsToUnlock ||
                    this.PointsToUnlock.Equals(input.PointsToUnlock)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TierHash.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUnlocked.GetHashCode();
                hashCode = (hashCode * 59) + this.PointsToUnlock.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
