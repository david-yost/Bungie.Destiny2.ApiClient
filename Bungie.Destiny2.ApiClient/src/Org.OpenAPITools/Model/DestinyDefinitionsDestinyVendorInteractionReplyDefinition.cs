/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.  You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyVendorInteractionReplyDefinition")]
    public partial class DestinyDefinitionsDestinyVendorInteractionReplyDefinition : IEquatable<DestinyDefinitionsDestinyVendorInteractionReplyDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyVendorInteractionReplyDefinition" /> class.
        /// </summary>
        /// <param name="itemRewardsSelection">The rewards granted upon responding to the vendor..</param>
        /// <param name="reply">The localized text for the reply..</param>
        /// <param name="replyType">An enum indicating the type of reply being made..</param>
        public DestinyDefinitionsDestinyVendorInteractionReplyDefinition(int itemRewardsSelection = default(int), string reply = default(string), int replyType = default(int))
        {
            this.ItemRewardsSelection = itemRewardsSelection;
            this.Reply = reply;
            this.ReplyType = replyType;
        }

        /// <summary>
        /// The rewards granted upon responding to the vendor.
        /// </summary>
        /// <value>The rewards granted upon responding to the vendor.</value>
        [DataMember(Name = "itemRewardsSelection", EmitDefaultValue = false)]
        public int ItemRewardsSelection { get; set; }

        /// <summary>
        /// The localized text for the reply.
        /// </summary>
        /// <value>The localized text for the reply.</value>
        [DataMember(Name = "reply", EmitDefaultValue = false)]
        public string Reply { get; set; }

        /// <summary>
        /// An enum indicating the type of reply being made.
        /// </summary>
        /// <value>An enum indicating the type of reply being made.</value>
        [DataMember(Name = "replyType", EmitDefaultValue = false)]
        public int ReplyType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyVendorInteractionReplyDefinition {\n");
            sb.Append("  ItemRewardsSelection: ").Append(ItemRewardsSelection).Append("\n");
            sb.Append("  Reply: ").Append(Reply).Append("\n");
            sb.Append("  ReplyType: ").Append(ReplyType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyVendorInteractionReplyDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyVendorInteractionReplyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyVendorInteractionReplyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyVendorInteractionReplyDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemRewardsSelection == input.ItemRewardsSelection ||
                    this.ItemRewardsSelection.Equals(input.ItemRewardsSelection)
                ) && 
                (
                    this.Reply == input.Reply ||
                    (this.Reply != null &&
                    this.Reply.Equals(input.Reply))
                ) && 
                (
                    this.ReplyType == input.ReplyType ||
                    this.ReplyType.Equals(input.ReplyType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ItemRewardsSelection.GetHashCode();
                if (this.Reply != null)
                {
                    hashCode = (hashCode * 59) + this.Reply.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReplyType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
