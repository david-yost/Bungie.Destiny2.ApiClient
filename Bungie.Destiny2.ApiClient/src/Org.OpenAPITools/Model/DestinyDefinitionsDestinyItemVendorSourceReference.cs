/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents that a vendor could sell this item, and provides a quick link to that vendor and sale item.   Note that we do not and cannot make a guarantee that the vendor will ever *actually* sell this item, only that the Vendor has a definition that indicates it *could* be sold.   Note also that a vendor may sell the same item in multiple \&quot;ways\&quot;, which means there may be multiple vendorItemIndexes for a single Vendor hash.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyItemVendorSourceReference")]
    public partial class DestinyDefinitionsDestinyItemVendorSourceReference : IEquatable<DestinyDefinitionsDestinyItemVendorSourceReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemVendorSourceReference" /> class.
        /// </summary>
        /// <param name="vendorHash">The identifier for the vendor that may sell this item..</param>
        /// <param name="vendorItemIndexes">The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \&quot;ways\&quot;, hence why this is a list. (for instance, a weapon may be \&quot;sold\&quot; as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index).</param>
        public DestinyDefinitionsDestinyItemVendorSourceReference(int vendorHash = default(int), List<int> vendorItemIndexes = default(List<int>))
        {
            this.VendorHash = vendorHash;
            this.VendorItemIndexes = vendorItemIndexes;
        }

        /// <summary>
        /// The identifier for the vendor that may sell this item.
        /// </summary>
        /// <value>The identifier for the vendor that may sell this item.</value>
        [DataMember(Name = "vendorHash", EmitDefaultValue = false)]
        public int VendorHash { get; set; }

        /// <summary>
        /// The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \&quot;ways\&quot;, hence why this is a list. (for instance, a weapon may be \&quot;sold\&quot; as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)
        /// </summary>
        /// <value>The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \&quot;ways\&quot;, hence why this is a list. (for instance, a weapon may be \&quot;sold\&quot; as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)</value>
        [DataMember(Name = "vendorItemIndexes", EmitDefaultValue = false)]
        public List<int> VendorItemIndexes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemVendorSourceReference {\n");
            sb.Append("  VendorHash: ").Append(VendorHash).Append("\n");
            sb.Append("  VendorItemIndexes: ").Append(VendorItemIndexes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemVendorSourceReference);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemVendorSourceReference instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemVendorSourceReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemVendorSourceReference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VendorHash == input.VendorHash ||
                    this.VendorHash.Equals(input.VendorHash)
                ) && 
                (
                    this.VendorItemIndexes == input.VendorItemIndexes ||
                    this.VendorItemIndexes != null &&
                    input.VendorItemIndexes != null &&
                    this.VendorItemIndexes.SequenceEqual(input.VendorItemIndexes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VendorHash.GetHashCode();
                if (this.VendorItemIndexes != null)
                {
                    hashCode = (hashCode * 59) + this.VendorItemIndexes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
