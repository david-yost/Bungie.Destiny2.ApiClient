/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// If you are playing in an activity, this is some information about it.  Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
    /// </summary>
    [DataContract(Name = "Destiny.Components.Profiles.DestinyProfileTransitoryCurrentActivity")]
    public partial class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity : IEquatable<DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity" /> class.
        /// </summary>
        /// <param name="startTime">When the activity started..</param>
        /// <param name="endTime">If you&#39;re still in it but it \&quot;ended\&quot; (like when folks are dancing around the loot after they beat a boss), this is when the activity ended..</param>
        /// <param name="score">This is what our non-authoritative source thought the score was..</param>
        /// <param name="highestOpposingFactionScore">If you have human opponents, this is the highest opposing team&#39;s score..</param>
        /// <param name="numberOfOpponents">This is how many human or poorly crafted aimbot opponents you have..</param>
        /// <param name="numberOfPlayers">This is how many human or poorly crafted aimbots are on your team..</param>
        public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity(DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), float score = default(float), float highestOpposingFactionScore = default(float), int numberOfOpponents = default(int), int numberOfPlayers = default(int))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Score = score;
            this.HighestOpposingFactionScore = highestOpposingFactionScore;
            this.NumberOfOpponents = numberOfOpponents;
            this.NumberOfPlayers = numberOfPlayers;
        }

        /// <summary>
        /// When the activity started.
        /// </summary>
        /// <value>When the activity started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = true)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// If you&#39;re still in it but it \&quot;ended\&quot; (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
        /// </summary>
        /// <value>If you&#39;re still in it but it \&quot;ended\&quot; (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = true)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// This is what our non-authoritative source thought the score was.
        /// </summary>
        /// <value>This is what our non-authoritative source thought the score was.</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public float Score { get; set; }

        /// <summary>
        /// If you have human opponents, this is the highest opposing team&#39;s score.
        /// </summary>
        /// <value>If you have human opponents, this is the highest opposing team&#39;s score.</value>
        [DataMember(Name = "highestOpposingFactionScore", EmitDefaultValue = false)]
        public float HighestOpposingFactionScore { get; set; }

        /// <summary>
        /// This is how many human or poorly crafted aimbot opponents you have.
        /// </summary>
        /// <value>This is how many human or poorly crafted aimbot opponents you have.</value>
        [DataMember(Name = "numberOfOpponents", EmitDefaultValue = false)]
        public int NumberOfOpponents { get; set; }

        /// <summary>
        /// This is how many human or poorly crafted aimbots are on your team.
        /// </summary>
        /// <value>This is how many human or poorly crafted aimbots are on your team.</value>
        [DataMember(Name = "numberOfPlayers", EmitDefaultValue = false)]
        public int NumberOfPlayers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  HighestOpposingFactionScore: ").Append(HighestOpposingFactionScore).Append("\n");
            sb.Append("  NumberOfOpponents: ").Append(NumberOfOpponents).Append("\n");
            sb.Append("  NumberOfPlayers: ").Append(NumberOfPlayers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity);
        }

        /// <summary>
        /// Returns true if DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.HighestOpposingFactionScore == input.HighestOpposingFactionScore ||
                    this.HighestOpposingFactionScore.Equals(input.HighestOpposingFactionScore)
                ) && 
                (
                    this.NumberOfOpponents == input.NumberOfOpponents ||
                    this.NumberOfOpponents.Equals(input.NumberOfOpponents)
                ) && 
                (
                    this.NumberOfPlayers == input.NumberOfPlayers ||
                    this.NumberOfPlayers.Equals(input.NumberOfPlayers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                hashCode = (hashCode * 59) + this.HighestOpposingFactionScore.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfOpponents.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfPlayers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
