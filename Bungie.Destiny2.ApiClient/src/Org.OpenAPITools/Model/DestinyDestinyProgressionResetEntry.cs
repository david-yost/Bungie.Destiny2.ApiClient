/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a season and the number of resets you had in that season.   We do not necessarily - even for progressions with resets - track it over all seasons. So be careful and check the season numbers being returned.
    /// </summary>
    [DataContract(Name = "Destiny.DestinyProgressionResetEntry")]
    public partial class DestinyDestinyProgressionResetEntry : IEquatable<DestinyDestinyProgressionResetEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDestinyProgressionResetEntry" /> class.
        /// </summary>
        /// <param name="season">season.</param>
        /// <param name="resets">resets.</param>
        public DestinyDestinyProgressionResetEntry(int season = default(int), int resets = default(int))
        {
            this.Season = season;
            this.Resets = resets;
        }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name = "season", EmitDefaultValue = false)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Resets
        /// </summary>
        [DataMember(Name = "resets", EmitDefaultValue = false)]
        public int Resets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDestinyProgressionResetEntry {\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Resets: ").Append(Resets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDestinyProgressionResetEntry);
        }

        /// <summary>
        /// Returns true if DestinyDestinyProgressionResetEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDestinyProgressionResetEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDestinyProgressionResetEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Season == input.Season ||
                    this.Season.Equals(input.Season)
                ) && 
                (
                    this.Resets == input.Resets ||
                    this.Resets.Equals(input.Resets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Season.GetHashCode();
                hashCode = (hashCode * 59) + this.Resets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
