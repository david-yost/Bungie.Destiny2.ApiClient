/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I&#39;m not sure yet whether I regret that.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyMaterialRequirement")]
    public partial class DestinyDefinitionsDestinyMaterialRequirement : IEquatable<DestinyDefinitionsDestinyMaterialRequirement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyMaterialRequirement" /> class.
        /// </summary>
        /// <param name="itemHash">The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition..</param>
        /// <param name="deleteOnAction">If True, the material will be removed from the character&#39;s inventory when the action is performed..</param>
        /// <param name="count">The amount of the material required..</param>
        /// <param name="countIsConstant">If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call..</param>
        /// <param name="omitFromRequirements">If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI..</param>
        public DestinyDefinitionsDestinyMaterialRequirement(int itemHash = default(int), bool deleteOnAction = default(bool), int count = default(int), bool countIsConstant = default(bool), bool omitFromRequirements = default(bool))
        {
            this.ItemHash = itemHash;
            this.DeleteOnAction = deleteOnAction;
            this.Count = count;
            this.CountIsConstant = countIsConstant;
            this.OmitFromRequirements = omitFromRequirements;
        }

        /// <summary>
        /// The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition.
        /// </summary>
        /// <value>The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition.</value>
        [DataMember(Name = "itemHash", EmitDefaultValue = false)]
        public int ItemHash { get; set; }

        /// <summary>
        /// If True, the material will be removed from the character&#39;s inventory when the action is performed.
        /// </summary>
        /// <value>If True, the material will be removed from the character&#39;s inventory when the action is performed.</value>
        [DataMember(Name = "deleteOnAction", EmitDefaultValue = true)]
        public bool DeleteOnAction { get; set; }

        /// <summary>
        /// The amount of the material required.
        /// </summary>
        /// <value>The amount of the material required.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.
        /// </summary>
        /// <value>If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.</value>
        [DataMember(Name = "countIsConstant", EmitDefaultValue = true)]
        public bool CountIsConstant { get; set; }

        /// <summary>
        /// If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI.
        /// </summary>
        /// <value>If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI.</value>
        [DataMember(Name = "omitFromRequirements", EmitDefaultValue = true)]
        public bool OmitFromRequirements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyMaterialRequirement {\n");
            sb.Append("  ItemHash: ").Append(ItemHash).Append("\n");
            sb.Append("  DeleteOnAction: ").Append(DeleteOnAction).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CountIsConstant: ").Append(CountIsConstant).Append("\n");
            sb.Append("  OmitFromRequirements: ").Append(OmitFromRequirements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyMaterialRequirement);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyMaterialRequirement instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyMaterialRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyMaterialRequirement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ItemHash == input.ItemHash ||
                    this.ItemHash.Equals(input.ItemHash)
                ) && 
                (
                    this.DeleteOnAction == input.DeleteOnAction ||
                    this.DeleteOnAction.Equals(input.DeleteOnAction)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.CountIsConstant == input.CountIsConstant ||
                    this.CountIsConstant.Equals(input.CountIsConstant)
                ) && 
                (
                    this.OmitFromRequirements == input.OmitFromRequirements ||
                    this.OmitFromRequirements.Equals(input.OmitFromRequirements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ItemHash.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteOnAction.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.CountIsConstant.GetHashCode();
                hashCode = (hashCode * 59) + this.OmitFromRequirements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
