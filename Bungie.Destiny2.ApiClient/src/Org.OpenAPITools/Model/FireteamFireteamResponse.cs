/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FireteamFireteamResponse
    /// </summary>
    [DataContract(Name = "Fireteam.FireteamResponse")]
    public partial class FireteamFireteamResponse : IEquatable<FireteamFireteamResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamFireteamResponse" /> class.
        /// </summary>
        /// <param name="summary">summary.</param>
        /// <param name="members">members.</param>
        /// <param name="alternates">alternates.</param>
        public FireteamFireteamResponse(FireteamFireteamSummary summary = default(FireteamFireteamSummary), List<FireteamFireteamMember> members = default(List<FireteamFireteamMember>), List<FireteamFireteamMember> alternates = default(List<FireteamFireteamMember>))
        {
            this.Summary = summary;
            this.Members = members;
            this.Alternates = alternates;
        }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "Summary", EmitDefaultValue = false)]
        public FireteamFireteamSummary Summary { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "Members", EmitDefaultValue = false)]
        public List<FireteamFireteamMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets Alternates
        /// </summary>
        [DataMember(Name = "Alternates", EmitDefaultValue = false)]
        public List<FireteamFireteamMember> Alternates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FireteamFireteamResponse {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Alternates: ").Append(Alternates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FireteamFireteamResponse);
        }

        /// <summary>
        /// Returns true if FireteamFireteamResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FireteamFireteamResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FireteamFireteamResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.Alternates == input.Alternates ||
                    this.Alternates != null &&
                    input.Alternates != null &&
                    this.Alternates.SequenceEqual(input.Alternates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                if (this.Members != null)
                {
                    hashCode = (hashCode * 59) + this.Members.GetHashCode();
                }
                if (this.Alternates != null)
                {
                    hashCode = (hashCode * 59) + this.Alternates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
