/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Summary information about the activity that was played.
    /// </summary>
    [DataContract(Name = "Destiny.HistoricalStats.DestinyHistoricalStatsActivity")]
    public partial class DestinyHistoricalStatsDestinyHistoricalStatsActivity : IEquatable<DestinyHistoricalStatsDestinyHistoricalStatsActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyHistoricalStatsDestinyHistoricalStatsActivity" /> class.
        /// </summary>
        /// <param name="referenceId">The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now..</param>
        /// <param name="directorActivityHash">The unique hash identifier of the DestinyActivityDefinition that was played..</param>
        /// <param name="instanceId">The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint..</param>
        /// <param name="mode">Indicates the most specific game mode of the activity that we could find..</param>
        /// <param name="modes">The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event..</param>
        /// <param name="isPrivate">Whether or not the match was a private match..</param>
        /// <param name="membershipType">The Membership Type indicating the platform on which this match was played..</param>
        public DestinyHistoricalStatsDestinyHistoricalStatsActivity(int referenceId = default(int), int directorActivityHash = default(int), long instanceId = default(long), int mode = default(int), List<int> modes = default(List<int>), bool isPrivate = default(bool), int membershipType = default(int))
        {
            this.ReferenceId = referenceId;
            this.DirectorActivityHash = directorActivityHash;
            this.InstanceId = instanceId;
            this.Mode = mode;
            this.Modes = modes;
            this.IsPrivate = isPrivate;
            this.MembershipType = membershipType;
        }

        /// <summary>
        /// The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now.
        /// </summary>
        /// <value>The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now.</value>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        public int ReferenceId { get; set; }

        /// <summary>
        /// The unique hash identifier of the DestinyActivityDefinition that was played.
        /// </summary>
        /// <value>The unique hash identifier of the DestinyActivityDefinition that was played.</value>
        [DataMember(Name = "directorActivityHash", EmitDefaultValue = false)]
        public int DirectorActivityHash { get; set; }

        /// <summary>
        /// The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.
        /// </summary>
        /// <value>The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.</value>
        [DataMember(Name = "instanceId", EmitDefaultValue = false)]
        public long InstanceId { get; set; }

        /// <summary>
        /// Indicates the most specific game mode of the activity that we could find.
        /// </summary>
        /// <value>Indicates the most specific game mode of the activity that we could find.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public int Mode { get; set; }

        /// <summary>
        /// The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.
        /// </summary>
        /// <value>The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.</value>
        [DataMember(Name = "modes", EmitDefaultValue = false)]
        public List<int> Modes { get; set; }

        /// <summary>
        /// Whether or not the match was a private match.
        /// </summary>
        /// <value>Whether or not the match was a private match.</value>
        [DataMember(Name = "isPrivate", EmitDefaultValue = true)]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// The Membership Type indicating the platform on which this match was played.
        /// </summary>
        /// <value>The Membership Type indicating the platform on which this match was played.</value>
        [DataMember(Name = "membershipType", EmitDefaultValue = false)]
        public int MembershipType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyHistoricalStatsDestinyHistoricalStatsActivity {\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  DirectorActivityHash: ").Append(DirectorActivityHash).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Modes: ").Append(Modes).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  MembershipType: ").Append(MembershipType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyHistoricalStatsDestinyHistoricalStatsActivity);
        }

        /// <summary>
        /// Returns true if DestinyHistoricalStatsDestinyHistoricalStatsActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyHistoricalStatsDestinyHistoricalStatsActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyHistoricalStatsDestinyHistoricalStatsActivity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceId == input.ReferenceId ||
                    this.ReferenceId.Equals(input.ReferenceId)
                ) && 
                (
                    this.DirectorActivityHash == input.DirectorActivityHash ||
                    this.DirectorActivityHash.Equals(input.DirectorActivityHash)
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    this.InstanceId.Equals(input.InstanceId)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Modes == input.Modes ||
                    this.Modes != null &&
                    input.Modes != null &&
                    this.Modes.SequenceEqual(input.Modes)
                ) && 
                (
                    this.IsPrivate == input.IsPrivate ||
                    this.IsPrivate.Equals(input.IsPrivate)
                ) && 
                (
                    this.MembershipType == input.MembershipType ||
                    this.MembershipType.Equals(input.MembershipType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReferenceId.GetHashCode();
                hashCode = (hashCode * 59) + this.DirectorActivityHash.GetHashCode();
                hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.Modes != null)
                {
                    hashCode = (hashCode * 59) + this.Modes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPrivate.GetHashCode();
                hashCode = (hashCode * 59) + this.MembershipType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
