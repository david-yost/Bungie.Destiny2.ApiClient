/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyItemSocketEntryPlugItemRandomizedDefinition")]
    public partial class DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition : IEquatable<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition" /> class.
        /// </summary>
        /// <param name="craftingRequirements">craftingRequirements.</param>
        /// <param name="currentlyCanRoll">Indicates if the plug can be rolled on the current version of the item. For example, older versions of weapons may have plug rolls that are no longer possible on the current versions..</param>
        /// <param name="plugItemHash">The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted..</param>
        public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition(DestinyDefinitionsDestinyPlugItemCraftingRequirements craftingRequirements = default(DestinyDefinitionsDestinyPlugItemCraftingRequirements), bool currentlyCanRoll = default(bool), int plugItemHash = default(int))
        {
            this.CraftingRequirements = craftingRequirements;
            this.CurrentlyCanRoll = currentlyCanRoll;
            this.PlugItemHash = plugItemHash;
        }

        /// <summary>
        /// Gets or Sets CraftingRequirements
        /// </summary>
        [DataMember(Name = "craftingRequirements", EmitDefaultValue = false)]
        public DestinyDefinitionsDestinyPlugItemCraftingRequirements CraftingRequirements { get; set; }

        /// <summary>
        /// Indicates if the plug can be rolled on the current version of the item. For example, older versions of weapons may have plug rolls that are no longer possible on the current versions.
        /// </summary>
        /// <value>Indicates if the plug can be rolled on the current version of the item. For example, older versions of weapons may have plug rolls that are no longer possible on the current versions.</value>
        [DataMember(Name = "currentlyCanRoll", EmitDefaultValue = true)]
        public bool CurrentlyCanRoll { get; set; }

        /// <summary>
        /// The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.
        /// </summary>
        /// <value>The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.</value>
        [DataMember(Name = "plugItemHash", EmitDefaultValue = false)]
        public int PlugItemHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition {\n");
            sb.Append("  CraftingRequirements: ").Append(CraftingRequirements).Append("\n");
            sb.Append("  CurrentlyCanRoll: ").Append(CurrentlyCanRoll).Append("\n");
            sb.Append("  PlugItemHash: ").Append(PlugItemHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CraftingRequirements == input.CraftingRequirements ||
                    (this.CraftingRequirements != null &&
                    this.CraftingRequirements.Equals(input.CraftingRequirements))
                ) && 
                (
                    this.CurrentlyCanRoll == input.CurrentlyCanRoll ||
                    this.CurrentlyCanRoll.Equals(input.CurrentlyCanRoll)
                ) && 
                (
                    this.PlugItemHash == input.PlugItemHash ||
                    this.PlugItemHash.Equals(input.PlugItemHash)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CraftingRequirements != null)
                {
                    hashCode = (hashCode * 59) + this.CraftingRequirements.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentlyCanRoll.GetHashCode();
                hashCode = (hashCode * 59) + this.PlugItemHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
