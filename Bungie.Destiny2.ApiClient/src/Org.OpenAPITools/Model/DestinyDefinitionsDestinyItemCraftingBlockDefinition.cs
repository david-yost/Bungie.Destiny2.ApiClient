/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
    /// </summary>
    [DataContract(Name = "Destiny.Definitions.DestinyItemCraftingBlockDefinition")]
    public partial class DestinyDefinitionsDestinyItemCraftingBlockDefinition : IEquatable<DestinyDefinitionsDestinyItemCraftingBlockDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsDestinyItemCraftingBlockDefinition" /> class.
        /// </summary>
        /// <param name="outputItemHash">A reference to the item definition that is created when crafting with this &#39;recipe&#39; item..</param>
        /// <param name="requiredSocketTypeHashes">A list of socket type hashes that describes which sockets are required for crafting with this recipe..</param>
        /// <param name="failedRequirementStrings">failedRequirementStrings.</param>
        /// <param name="baseMaterialRequirements">A reference to the base material requirements for crafting with this recipe..</param>
        /// <param name="bonusPlugs">A list of &#39;bonus&#39; socket plugs that may be available if certain requirements are met..</param>
        public DestinyDefinitionsDestinyItemCraftingBlockDefinition(int outputItemHash = default(int), List<int> requiredSocketTypeHashes = default(List<int>), List<string> failedRequirementStrings = default(List<string>), int? baseMaterialRequirements = default(int?), List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> bonusPlugs = default(List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition>))
        {
            this.OutputItemHash = outputItemHash;
            this.RequiredSocketTypeHashes = requiredSocketTypeHashes;
            this.FailedRequirementStrings = failedRequirementStrings;
            this.BaseMaterialRequirements = baseMaterialRequirements;
            this.BonusPlugs = bonusPlugs;
        }

        /// <summary>
        /// A reference to the item definition that is created when crafting with this &#39;recipe&#39; item.
        /// </summary>
        /// <value>A reference to the item definition that is created when crafting with this &#39;recipe&#39; item.</value>
        [DataMember(Name = "outputItemHash", EmitDefaultValue = false)]
        public int OutputItemHash { get; set; }

        /// <summary>
        /// A list of socket type hashes that describes which sockets are required for crafting with this recipe.
        /// </summary>
        /// <value>A list of socket type hashes that describes which sockets are required for crafting with this recipe.</value>
        [DataMember(Name = "requiredSocketTypeHashes", EmitDefaultValue = false)]
        public List<int> RequiredSocketTypeHashes { get; set; }

        /// <summary>
        /// Gets or Sets FailedRequirementStrings
        /// </summary>
        [DataMember(Name = "failedRequirementStrings", EmitDefaultValue = false)]
        public List<string> FailedRequirementStrings { get; set; }

        /// <summary>
        /// A reference to the base material requirements for crafting with this recipe.
        /// </summary>
        /// <value>A reference to the base material requirements for crafting with this recipe.</value>
        [DataMember(Name = "baseMaterialRequirements", EmitDefaultValue = true)]
        public int? BaseMaterialRequirements { get; set; }

        /// <summary>
        /// A list of &#39;bonus&#39; socket plugs that may be available if certain requirements are met.
        /// </summary>
        /// <value>A list of &#39;bonus&#39; socket plugs that may be available if certain requirements are met.</value>
        [DataMember(Name = "bonusPlugs", EmitDefaultValue = false)]
        public List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> BonusPlugs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsDestinyItemCraftingBlockDefinition {\n");
            sb.Append("  OutputItemHash: ").Append(OutputItemHash).Append("\n");
            sb.Append("  RequiredSocketTypeHashes: ").Append(RequiredSocketTypeHashes).Append("\n");
            sb.Append("  FailedRequirementStrings: ").Append(FailedRequirementStrings).Append("\n");
            sb.Append("  BaseMaterialRequirements: ").Append(BaseMaterialRequirements).Append("\n");
            sb.Append("  BonusPlugs: ").Append(BonusPlugs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsDestinyItemCraftingBlockDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsDestinyItemCraftingBlockDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsDestinyItemCraftingBlockDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsDestinyItemCraftingBlockDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OutputItemHash == input.OutputItemHash ||
                    this.OutputItemHash.Equals(input.OutputItemHash)
                ) && 
                (
                    this.RequiredSocketTypeHashes == input.RequiredSocketTypeHashes ||
                    this.RequiredSocketTypeHashes != null &&
                    input.RequiredSocketTypeHashes != null &&
                    this.RequiredSocketTypeHashes.SequenceEqual(input.RequiredSocketTypeHashes)
                ) && 
                (
                    this.FailedRequirementStrings == input.FailedRequirementStrings ||
                    this.FailedRequirementStrings != null &&
                    input.FailedRequirementStrings != null &&
                    this.FailedRequirementStrings.SequenceEqual(input.FailedRequirementStrings)
                ) && 
                (
                    this.BaseMaterialRequirements == input.BaseMaterialRequirements ||
                    (this.BaseMaterialRequirements != null &&
                    this.BaseMaterialRequirements.Equals(input.BaseMaterialRequirements))
                ) && 
                (
                    this.BonusPlugs == input.BonusPlugs ||
                    this.BonusPlugs != null &&
                    input.BonusPlugs != null &&
                    this.BonusPlugs.SequenceEqual(input.BonusPlugs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OutputItemHash.GetHashCode();
                if (this.RequiredSocketTypeHashes != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredSocketTypeHashes.GetHashCode();
                }
                if (this.FailedRequirementStrings != null)
                {
                    hashCode = (hashCode * 59) + this.FailedRequirementStrings.GetHashCode();
                }
                if (this.BaseMaterialRequirements != null)
                {
                    hashCode = (hashCode * 59) + this.BaseMaterialRequirements.GetHashCode();
                }
                if (this.BonusPlugs != null)
                {
                    hashCode = (hashCode * 59) + this.BonusPlugs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
