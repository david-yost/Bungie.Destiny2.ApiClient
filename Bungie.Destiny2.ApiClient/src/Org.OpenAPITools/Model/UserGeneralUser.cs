/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserGeneralUser
    /// </summary>
    [DataContract(Name = "User.GeneralUser")]
    public partial class UserGeneralUser : IEquatable<UserGeneralUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGeneralUser" /> class.
        /// </summary>
        /// <param name="membershipId">membershipId.</param>
        /// <param name="uniqueName">uniqueName.</param>
        /// <param name="normalizedName">normalizedName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="profilePicture">profilePicture.</param>
        /// <param name="profileTheme">profileTheme.</param>
        /// <param name="userTitle">userTitle.</param>
        /// <param name="successMessageFlags">successMessageFlags.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="about">about.</param>
        /// <param name="firstAccess">firstAccess.</param>
        /// <param name="lastUpdate">lastUpdate.</param>
        /// <param name="legacyPortalUID">legacyPortalUID.</param>
        /// <param name="context">context.</param>
        /// <param name="psnDisplayName">psnDisplayName.</param>
        /// <param name="xboxDisplayName">xboxDisplayName.</param>
        /// <param name="fbDisplayName">fbDisplayName.</param>
        /// <param name="showActivity">showActivity.</param>
        /// <param name="locale">locale.</param>
        /// <param name="localeInheritDefault">localeInheritDefault.</param>
        /// <param name="lastBanReportId">lastBanReportId.</param>
        /// <param name="showGroupMessaging">showGroupMessaging.</param>
        /// <param name="profilePicturePath">profilePicturePath.</param>
        /// <param name="profilePictureWidePath">profilePictureWidePath.</param>
        /// <param name="profileThemeName">profileThemeName.</param>
        /// <param name="userTitleDisplay">userTitleDisplay.</param>
        /// <param name="statusText">statusText.</param>
        /// <param name="statusDate">statusDate.</param>
        /// <param name="profileBanExpire">profileBanExpire.</param>
        /// <param name="blizzardDisplayName">blizzardDisplayName.</param>
        /// <param name="steamDisplayName">steamDisplayName.</param>
        /// <param name="stadiaDisplayName">stadiaDisplayName.</param>
        /// <param name="twitchDisplayName">twitchDisplayName.</param>
        /// <param name="cachedBungieGlobalDisplayName">cachedBungieGlobalDisplayName.</param>
        /// <param name="cachedBungieGlobalDisplayNameCode">cachedBungieGlobalDisplayNameCode.</param>
        /// <param name="egsDisplayName">egsDisplayName.</param>
        public UserGeneralUser(long membershipId = default(long), string uniqueName = default(string), string normalizedName = default(string), string displayName = default(string), int profilePicture = default(int), int profileTheme = default(int), int userTitle = default(int), long successMessageFlags = default(long), bool isDeleted = default(bool), string about = default(string), DateTime? firstAccess = default(DateTime?), DateTime? lastUpdate = default(DateTime?), long? legacyPortalUID = default(long?), UserUserToUserContext context = default(UserUserToUserContext), string psnDisplayName = default(string), string xboxDisplayName = default(string), string fbDisplayName = default(string), bool? showActivity = default(bool?), string locale = default(string), bool localeInheritDefault = default(bool), long? lastBanReportId = default(long?), bool showGroupMessaging = default(bool), string profilePicturePath = default(string), string profilePictureWidePath = default(string), string profileThemeName = default(string), string userTitleDisplay = default(string), string statusText = default(string), DateTime statusDate = default(DateTime), DateTime? profileBanExpire = default(DateTime?), string blizzardDisplayName = default(string), string steamDisplayName = default(string), string stadiaDisplayName = default(string), string twitchDisplayName = default(string), string cachedBungieGlobalDisplayName = default(string), int? cachedBungieGlobalDisplayNameCode = default(int?), string egsDisplayName = default(string))
        {
            this.MembershipId = membershipId;
            this.UniqueName = uniqueName;
            this.NormalizedName = normalizedName;
            this.DisplayName = displayName;
            this.ProfilePicture = profilePicture;
            this.ProfileTheme = profileTheme;
            this.UserTitle = userTitle;
            this.SuccessMessageFlags = successMessageFlags;
            this.IsDeleted = isDeleted;
            this.About = about;
            this.FirstAccess = firstAccess;
            this.LastUpdate = lastUpdate;
            this.LegacyPortalUID = legacyPortalUID;
            this.Context = context;
            this.PsnDisplayName = psnDisplayName;
            this.XboxDisplayName = xboxDisplayName;
            this.FbDisplayName = fbDisplayName;
            this.ShowActivity = showActivity;
            this.Locale = locale;
            this.LocaleInheritDefault = localeInheritDefault;
            this.LastBanReportId = lastBanReportId;
            this.ShowGroupMessaging = showGroupMessaging;
            this.ProfilePicturePath = profilePicturePath;
            this.ProfilePictureWidePath = profilePictureWidePath;
            this.ProfileThemeName = profileThemeName;
            this.UserTitleDisplay = userTitleDisplay;
            this.StatusText = statusText;
            this.StatusDate = statusDate;
            this.ProfileBanExpire = profileBanExpire;
            this.BlizzardDisplayName = blizzardDisplayName;
            this.SteamDisplayName = steamDisplayName;
            this.StadiaDisplayName = stadiaDisplayName;
            this.TwitchDisplayName = twitchDisplayName;
            this.CachedBungieGlobalDisplayName = cachedBungieGlobalDisplayName;
            this.CachedBungieGlobalDisplayNameCode = cachedBungieGlobalDisplayNameCode;
            this.EgsDisplayName = egsDisplayName;
        }

        /// <summary>
        /// Gets or Sets MembershipId
        /// </summary>
        [DataMember(Name = "membershipId", EmitDefaultValue = false)]
        public long MembershipId { get; set; }

        /// <summary>
        /// Gets or Sets UniqueName
        /// </summary>
        [DataMember(Name = "uniqueName", EmitDefaultValue = false)]
        public string UniqueName { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedName
        /// </summary>
        [DataMember(Name = "normalizedName", EmitDefaultValue = false)]
        public string NormalizedName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicture
        /// </summary>
        [DataMember(Name = "profilePicture", EmitDefaultValue = false)]
        public int ProfilePicture { get; set; }

        /// <summary>
        /// Gets or Sets ProfileTheme
        /// </summary>
        [DataMember(Name = "profileTheme", EmitDefaultValue = false)]
        public int ProfileTheme { get; set; }

        /// <summary>
        /// Gets or Sets UserTitle
        /// </summary>
        [DataMember(Name = "userTitle", EmitDefaultValue = false)]
        public int UserTitle { get; set; }

        /// <summary>
        /// Gets or Sets SuccessMessageFlags
        /// </summary>
        [DataMember(Name = "successMessageFlags", EmitDefaultValue = false)]
        public long SuccessMessageFlags { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets About
        /// </summary>
        [DataMember(Name = "about", EmitDefaultValue = false)]
        public string About { get; set; }

        /// <summary>
        /// Gets or Sets FirstAccess
        /// </summary>
        [DataMember(Name = "firstAccess", EmitDefaultValue = true)]
        public DateTime? FirstAccess { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = true)]
        public DateTime? LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LegacyPortalUID
        /// </summary>
        [DataMember(Name = "legacyPortalUID", EmitDefaultValue = true)]
        public long? LegacyPortalUID { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public UserUserToUserContext Context { get; set; }

        /// <summary>
        /// Gets or Sets PsnDisplayName
        /// </summary>
        [DataMember(Name = "psnDisplayName", EmitDefaultValue = false)]
        public string PsnDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets XboxDisplayName
        /// </summary>
        [DataMember(Name = "xboxDisplayName", EmitDefaultValue = false)]
        public string XboxDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FbDisplayName
        /// </summary>
        [DataMember(Name = "fbDisplayName", EmitDefaultValue = false)]
        public string FbDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ShowActivity
        /// </summary>
        [DataMember(Name = "showActivity", EmitDefaultValue = true)]
        public bool? ShowActivity { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocaleInheritDefault
        /// </summary>
        [DataMember(Name = "localeInheritDefault", EmitDefaultValue = true)]
        public bool LocaleInheritDefault { get; set; }

        /// <summary>
        /// Gets or Sets LastBanReportId
        /// </summary>
        [DataMember(Name = "lastBanReportId", EmitDefaultValue = true)]
        public long? LastBanReportId { get; set; }

        /// <summary>
        /// Gets or Sets ShowGroupMessaging
        /// </summary>
        [DataMember(Name = "showGroupMessaging", EmitDefaultValue = true)]
        public bool ShowGroupMessaging { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicturePath
        /// </summary>
        [DataMember(Name = "profilePicturePath", EmitDefaultValue = false)]
        public string ProfilePicturePath { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePictureWidePath
        /// </summary>
        [DataMember(Name = "profilePictureWidePath", EmitDefaultValue = false)]
        public string ProfilePictureWidePath { get; set; }

        /// <summary>
        /// Gets or Sets ProfileThemeName
        /// </summary>
        [DataMember(Name = "profileThemeName", EmitDefaultValue = false)]
        public string ProfileThemeName { get; set; }

        /// <summary>
        /// Gets or Sets UserTitleDisplay
        /// </summary>
        [DataMember(Name = "userTitleDisplay", EmitDefaultValue = false)]
        public string UserTitleDisplay { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name = "statusText", EmitDefaultValue = false)]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets StatusDate
        /// </summary>
        [DataMember(Name = "statusDate", EmitDefaultValue = false)]
        public DateTime StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets ProfileBanExpire
        /// </summary>
        [DataMember(Name = "profileBanExpire", EmitDefaultValue = true)]
        public DateTime? ProfileBanExpire { get; set; }

        /// <summary>
        /// Gets or Sets BlizzardDisplayName
        /// </summary>
        [DataMember(Name = "blizzardDisplayName", EmitDefaultValue = false)]
        public string BlizzardDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SteamDisplayName
        /// </summary>
        [DataMember(Name = "steamDisplayName", EmitDefaultValue = false)]
        public string SteamDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets StadiaDisplayName
        /// </summary>
        [DataMember(Name = "stadiaDisplayName", EmitDefaultValue = false)]
        public string StadiaDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets TwitchDisplayName
        /// </summary>
        [DataMember(Name = "twitchDisplayName", EmitDefaultValue = false)]
        public string TwitchDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets CachedBungieGlobalDisplayName
        /// </summary>
        [DataMember(Name = "cachedBungieGlobalDisplayName", EmitDefaultValue = false)]
        public string CachedBungieGlobalDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets CachedBungieGlobalDisplayNameCode
        /// </summary>
        [DataMember(Name = "cachedBungieGlobalDisplayNameCode", EmitDefaultValue = true)]
        public int? CachedBungieGlobalDisplayNameCode { get; set; }

        /// <summary>
        /// Gets or Sets EgsDisplayName
        /// </summary>
        [DataMember(Name = "egsDisplayName", EmitDefaultValue = false)]
        public string EgsDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGeneralUser {\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  UniqueName: ").Append(UniqueName).Append("\n");
            sb.Append("  NormalizedName: ").Append(NormalizedName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ProfilePicture: ").Append(ProfilePicture).Append("\n");
            sb.Append("  ProfileTheme: ").Append(ProfileTheme).Append("\n");
            sb.Append("  UserTitle: ").Append(UserTitle).Append("\n");
            sb.Append("  SuccessMessageFlags: ").Append(SuccessMessageFlags).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  About: ").Append(About).Append("\n");
            sb.Append("  FirstAccess: ").Append(FirstAccess).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LegacyPortalUID: ").Append(LegacyPortalUID).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  PsnDisplayName: ").Append(PsnDisplayName).Append("\n");
            sb.Append("  XboxDisplayName: ").Append(XboxDisplayName).Append("\n");
            sb.Append("  FbDisplayName: ").Append(FbDisplayName).Append("\n");
            sb.Append("  ShowActivity: ").Append(ShowActivity).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocaleInheritDefault: ").Append(LocaleInheritDefault).Append("\n");
            sb.Append("  LastBanReportId: ").Append(LastBanReportId).Append("\n");
            sb.Append("  ShowGroupMessaging: ").Append(ShowGroupMessaging).Append("\n");
            sb.Append("  ProfilePicturePath: ").Append(ProfilePicturePath).Append("\n");
            sb.Append("  ProfilePictureWidePath: ").Append(ProfilePictureWidePath).Append("\n");
            sb.Append("  ProfileThemeName: ").Append(ProfileThemeName).Append("\n");
            sb.Append("  UserTitleDisplay: ").Append(UserTitleDisplay).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  ProfileBanExpire: ").Append(ProfileBanExpire).Append("\n");
            sb.Append("  BlizzardDisplayName: ").Append(BlizzardDisplayName).Append("\n");
            sb.Append("  SteamDisplayName: ").Append(SteamDisplayName).Append("\n");
            sb.Append("  StadiaDisplayName: ").Append(StadiaDisplayName).Append("\n");
            sb.Append("  TwitchDisplayName: ").Append(TwitchDisplayName).Append("\n");
            sb.Append("  CachedBungieGlobalDisplayName: ").Append(CachedBungieGlobalDisplayName).Append("\n");
            sb.Append("  CachedBungieGlobalDisplayNameCode: ").Append(CachedBungieGlobalDisplayNameCode).Append("\n");
            sb.Append("  EgsDisplayName: ").Append(EgsDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGeneralUser);
        }

        /// <summary>
        /// Returns true if UserGeneralUser instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGeneralUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGeneralUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MembershipId == input.MembershipId ||
                    this.MembershipId.Equals(input.MembershipId)
                ) && 
                (
                    this.UniqueName == input.UniqueName ||
                    (this.UniqueName != null &&
                    this.UniqueName.Equals(input.UniqueName))
                ) && 
                (
                    this.NormalizedName == input.NormalizedName ||
                    (this.NormalizedName != null &&
                    this.NormalizedName.Equals(input.NormalizedName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ProfilePicture == input.ProfilePicture ||
                    this.ProfilePicture.Equals(input.ProfilePicture)
                ) && 
                (
                    this.ProfileTheme == input.ProfileTheme ||
                    this.ProfileTheme.Equals(input.ProfileTheme)
                ) && 
                (
                    this.UserTitle == input.UserTitle ||
                    this.UserTitle.Equals(input.UserTitle)
                ) && 
                (
                    this.SuccessMessageFlags == input.SuccessMessageFlags ||
                    this.SuccessMessageFlags.Equals(input.SuccessMessageFlags)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.About == input.About ||
                    (this.About != null &&
                    this.About.Equals(input.About))
                ) && 
                (
                    this.FirstAccess == input.FirstAccess ||
                    (this.FirstAccess != null &&
                    this.FirstAccess.Equals(input.FirstAccess))
                ) && 
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) && 
                (
                    this.LegacyPortalUID == input.LegacyPortalUID ||
                    (this.LegacyPortalUID != null &&
                    this.LegacyPortalUID.Equals(input.LegacyPortalUID))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.PsnDisplayName == input.PsnDisplayName ||
                    (this.PsnDisplayName != null &&
                    this.PsnDisplayName.Equals(input.PsnDisplayName))
                ) && 
                (
                    this.XboxDisplayName == input.XboxDisplayName ||
                    (this.XboxDisplayName != null &&
                    this.XboxDisplayName.Equals(input.XboxDisplayName))
                ) && 
                (
                    this.FbDisplayName == input.FbDisplayName ||
                    (this.FbDisplayName != null &&
                    this.FbDisplayName.Equals(input.FbDisplayName))
                ) && 
                (
                    this.ShowActivity == input.ShowActivity ||
                    (this.ShowActivity != null &&
                    this.ShowActivity.Equals(input.ShowActivity))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.LocaleInheritDefault == input.LocaleInheritDefault ||
                    this.LocaleInheritDefault.Equals(input.LocaleInheritDefault)
                ) && 
                (
                    this.LastBanReportId == input.LastBanReportId ||
                    (this.LastBanReportId != null &&
                    this.LastBanReportId.Equals(input.LastBanReportId))
                ) && 
                (
                    this.ShowGroupMessaging == input.ShowGroupMessaging ||
                    this.ShowGroupMessaging.Equals(input.ShowGroupMessaging)
                ) && 
                (
                    this.ProfilePicturePath == input.ProfilePicturePath ||
                    (this.ProfilePicturePath != null &&
                    this.ProfilePicturePath.Equals(input.ProfilePicturePath))
                ) && 
                (
                    this.ProfilePictureWidePath == input.ProfilePictureWidePath ||
                    (this.ProfilePictureWidePath != null &&
                    this.ProfilePictureWidePath.Equals(input.ProfilePictureWidePath))
                ) && 
                (
                    this.ProfileThemeName == input.ProfileThemeName ||
                    (this.ProfileThemeName != null &&
                    this.ProfileThemeName.Equals(input.ProfileThemeName))
                ) && 
                (
                    this.UserTitleDisplay == input.UserTitleDisplay ||
                    (this.UserTitleDisplay != null &&
                    this.UserTitleDisplay.Equals(input.UserTitleDisplay))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.ProfileBanExpire == input.ProfileBanExpire ||
                    (this.ProfileBanExpire != null &&
                    this.ProfileBanExpire.Equals(input.ProfileBanExpire))
                ) && 
                (
                    this.BlizzardDisplayName == input.BlizzardDisplayName ||
                    (this.BlizzardDisplayName != null &&
                    this.BlizzardDisplayName.Equals(input.BlizzardDisplayName))
                ) && 
                (
                    this.SteamDisplayName == input.SteamDisplayName ||
                    (this.SteamDisplayName != null &&
                    this.SteamDisplayName.Equals(input.SteamDisplayName))
                ) && 
                (
                    this.StadiaDisplayName == input.StadiaDisplayName ||
                    (this.StadiaDisplayName != null &&
                    this.StadiaDisplayName.Equals(input.StadiaDisplayName))
                ) && 
                (
                    this.TwitchDisplayName == input.TwitchDisplayName ||
                    (this.TwitchDisplayName != null &&
                    this.TwitchDisplayName.Equals(input.TwitchDisplayName))
                ) && 
                (
                    this.CachedBungieGlobalDisplayName == input.CachedBungieGlobalDisplayName ||
                    (this.CachedBungieGlobalDisplayName != null &&
                    this.CachedBungieGlobalDisplayName.Equals(input.CachedBungieGlobalDisplayName))
                ) && 
                (
                    this.CachedBungieGlobalDisplayNameCode == input.CachedBungieGlobalDisplayNameCode ||
                    (this.CachedBungieGlobalDisplayNameCode != null &&
                    this.CachedBungieGlobalDisplayNameCode.Equals(input.CachedBungieGlobalDisplayNameCode))
                ) && 
                (
                    this.EgsDisplayName == input.EgsDisplayName ||
                    (this.EgsDisplayName != null &&
                    this.EgsDisplayName.Equals(input.EgsDisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MembershipId.GetHashCode();
                if (this.UniqueName != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueName.GetHashCode();
                }
                if (this.NormalizedName != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedName.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProfilePicture.GetHashCode();
                hashCode = (hashCode * 59) + this.ProfileTheme.GetHashCode();
                hashCode = (hashCode * 59) + this.UserTitle.GetHashCode();
                hashCode = (hashCode * 59) + this.SuccessMessageFlags.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDeleted.GetHashCode();
                if (this.About != null)
                {
                    hashCode = (hashCode * 59) + this.About.GetHashCode();
                }
                if (this.FirstAccess != null)
                {
                    hashCode = (hashCode * 59) + this.FirstAccess.GetHashCode();
                }
                if (this.LastUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdate.GetHashCode();
                }
                if (this.LegacyPortalUID != null)
                {
                    hashCode = (hashCode * 59) + this.LegacyPortalUID.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.PsnDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.PsnDisplayName.GetHashCode();
                }
                if (this.XboxDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.XboxDisplayName.GetHashCode();
                }
                if (this.FbDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.FbDisplayName.GetHashCode();
                }
                if (this.ShowActivity != null)
                {
                    hashCode = (hashCode * 59) + this.ShowActivity.GetHashCode();
                }
                if (this.Locale != null)
                {
                    hashCode = (hashCode * 59) + this.Locale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocaleInheritDefault.GetHashCode();
                if (this.LastBanReportId != null)
                {
                    hashCode = (hashCode * 59) + this.LastBanReportId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowGroupMessaging.GetHashCode();
                if (this.ProfilePicturePath != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePicturePath.GetHashCode();
                }
                if (this.ProfilePictureWidePath != null)
                {
                    hashCode = (hashCode * 59) + this.ProfilePictureWidePath.GetHashCode();
                }
                if (this.ProfileThemeName != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileThemeName.GetHashCode();
                }
                if (this.UserTitleDisplay != null)
                {
                    hashCode = (hashCode * 59) + this.UserTitleDisplay.GetHashCode();
                }
                if (this.StatusText != null)
                {
                    hashCode = (hashCode * 59) + this.StatusText.GetHashCode();
                }
                if (this.StatusDate != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDate.GetHashCode();
                }
                if (this.ProfileBanExpire != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileBanExpire.GetHashCode();
                }
                if (this.BlizzardDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.BlizzardDisplayName.GetHashCode();
                }
                if (this.SteamDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.SteamDisplayName.GetHashCode();
                }
                if (this.StadiaDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.StadiaDisplayName.GetHashCode();
                }
                if (this.TwitchDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchDisplayName.GetHashCode();
                }
                if (this.CachedBungieGlobalDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.CachedBungieGlobalDisplayName.GetHashCode();
                }
                if (this.CachedBungieGlobalDisplayNameCode != null)
                {
                    hashCode = (hashCode * 59) + this.CachedBungieGlobalDisplayNameCode.GetHashCode();
                }
                if (this.EgsDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.EgsDisplayName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
