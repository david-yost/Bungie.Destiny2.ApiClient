/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response GroupV2AbdicateFoundership(long founderIdNew, long groupId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2AbdicateFoundershipWithHttpInfo(long founderIdNew, long groupId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        ForumGetTopicForContent200Response GroupV2AddOptionalConversation(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        ApiResponse<ForumGetTopicForContent200Response> GroupV2AddOptionalConversationWithHttpInfo(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        GroupV2ApproveAllPending200Response GroupV2ApproveAllPending(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        ApiResponse<GroupV2ApproveAllPending200Response> GroupV2ApproveAllPendingWithHttpInfo(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response GroupV2ApprovePending(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2ApprovePendingWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        GroupV2ApproveAllPending200Response GroupV2ApprovePendingForList(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        ApiResponse<GroupV2ApproveAllPending200Response> GroupV2ApprovePendingForListWithHttpInfo(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2BanMember(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2BanMemberWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        GroupV2ApproveAllPending200Response GroupV2DenyAllPending(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        ApiResponse<GroupV2ApproveAllPending200Response> GroupV2DenyAllPendingWithHttpInfo(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        GroupV2ApproveAllPending200Response GroupV2DenyPendingForList(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        ApiResponse<GroupV2ApproveAllPending200Response> GroupV2DenyPendingForListWithHttpInfo(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2EditClanBanner(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2EditClanBannerWithHttpInfo(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2EditFounderOptions(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2EditFounderOptionsWithHttpInfo(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2EditGroup(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2EditGroupWithHttpInfo(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2EditGroupMembership(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2EditGroupMembershipWithHttpInfo(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        ForumGetTopicForContent200Response GroupV2EditOptionalConversation(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        ApiResponse<ForumGetTopicForContent200Response> GroupV2EditOptionalConversationWithHttpInfo(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetMembersOfGroup200Response</returns>
        GroupV2GetMembersOfGroup200Response GroupV2GetAdminsAndFounderOfGroup(int currentpage, long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetMembersOfGroup200Response</returns>
        ApiResponse<GroupV2GetMembersOfGroup200Response> GroupV2GetAdminsAndFounderOfGroupWithHttpInfo(int currentpage, long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetAvailableAvatars200Response</returns>
        GroupV2GetAvailableAvatars200Response GroupV2GetAvailableAvatars(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetAvailableAvatars200Response</returns>
        ApiResponse<GroupV2GetAvailableAvatars200Response> GroupV2GetAvailableAvatarsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetAvailableThemes200Response</returns>
        GroupV2GetAvailableThemes200Response GroupV2GetAvailableThemes(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetAvailableThemes200Response</returns>
        ApiResponse<GroupV2GetAvailableThemes200Response> GroupV2GetAvailableThemesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetBannedMembersOfGroup200Response</returns>
        GroupV2GetBannedMembersOfGroup200Response GroupV2GetBannedMembersOfGroup(int currentpage, long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetBannedMembersOfGroup200Response</returns>
        ApiResponse<GroupV2GetBannedMembersOfGroup200Response> GroupV2GetBannedMembersOfGroupWithHttpInfo(int currentpage, long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        GroupV2GetGroup200Response GroupV2GetGroup(long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupWithHttpInfo(long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        GroupV2GetGroup200Response GroupV2GetGroupByName(string groupName, int groupType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupByNameWithHttpInfo(string groupName, int groupType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        GroupV2GetGroup200Response GroupV2GetGroupByNameV2(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupByNameV2WithHttpInfo(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroupOptionalConversations200Response</returns>
        GroupV2GetGroupOptionalConversations200Response GroupV2GetGroupOptionalConversations(long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroupOptionalConversations200Response</returns>
        ApiResponse<GroupV2GetGroupOptionalConversations200Response> GroupV2GetGroupOptionalConversationsWithHttpInfo(long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroupsForMember200Response</returns>
        GroupV2GetGroupsForMember200Response GroupV2GetGroupsForMember(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroupsForMember200Response</returns>
        ApiResponse<GroupV2GetGroupsForMember200Response> GroupV2GetGroupsForMemberWithHttpInfo(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPendingMemberships200Response</returns>
        GroupV2GetPendingMemberships200Response GroupV2GetInvitedIndividuals(int currentpage, long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPendingMemberships200Response</returns>
        ApiResponse<GroupV2GetPendingMemberships200Response> GroupV2GetInvitedIndividualsWithHttpInfo(int currentpage, long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetMembersOfGroup200Response</returns>
        GroupV2GetMembersOfGroup200Response GroupV2GetMembersOfGroup(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetMembersOfGroup200Response</returns>
        ApiResponse<GroupV2GetMembersOfGroup200Response> GroupV2GetMembersOfGroupWithHttpInfo(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPendingMemberships200Response</returns>
        GroupV2GetPendingMemberships200Response GroupV2GetPendingMemberships(int currentpage, long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPendingMemberships200Response</returns>
        ApiResponse<GroupV2GetPendingMemberships200Response> GroupV2GetPendingMembershipsWithHttpInfo(int currentpage, long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPotentialGroupsForMember200Response</returns>
        GroupV2GetPotentialGroupsForMember200Response GroupV2GetPotentialGroupsForMember(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPotentialGroupsForMember200Response</returns>
        ApiResponse<GroupV2GetPotentialGroupsForMember200Response> GroupV2GetPotentialGroupsForMemberWithHttpInfo(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetRecommendedGroups200Response</returns>
        GroupV2GetRecommendedGroups200Response GroupV2GetRecommendedGroups(int createDateRange, int groupType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetRecommendedGroups200Response</returns>
        ApiResponse<GroupV2GetRecommendedGroups200Response> GroupV2GetRecommendedGroupsWithHttpInfo(int createDateRange, int groupType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response GroupV2GetUserClanInviteSetting(int mType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2GetUserClanInviteSettingWithHttpInfo(int mType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GroupSearch200Response</returns>
        GroupV2GroupSearch200Response GroupV2GroupSearch(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GroupSearch200Response</returns>
        ApiResponse<GroupV2GroupSearch200Response> GroupV2GroupSearchWithHttpInfo(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2IndividualGroupInvite200Response</returns>
        GroupV2IndividualGroupInvite200Response GroupV2IndividualGroupInvite(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2IndividualGroupInvite200Response</returns>
        ApiResponse<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2IndividualGroupInvite200Response</returns>
        GroupV2IndividualGroupInvite200Response GroupV2IndividualGroupInviteCancel(long groupId, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2IndividualGroupInvite200Response</returns>
        ApiResponse<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteCancelWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2KickMember200Response</returns>
        GroupV2KickMember200Response GroupV2KickMember(long groupId, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2KickMember200Response</returns>
        ApiResponse<GroupV2KickMember200Response> GroupV2KickMemberWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2RecoverGroupForFounder200Response</returns>
        GroupV2RecoverGroupForFounder200Response GroupV2RecoverGroupForFounder(int groupType, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2RecoverGroupForFounder200Response</returns>
        ApiResponse<GroupV2RecoverGroupForFounder200Response> GroupV2RecoverGroupForFounderWithHttpInfo(int groupType, long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response GroupV2UnbanMember(long groupId, long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> GroupV2UnbanMemberWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2AbdicateFoundershipAsync(long founderIdNew, long groupId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2AbdicateFoundershipWithHttpInfoAsync(long founderIdNew, long groupId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicForContent200Response> GroupV2AddOptionalConversationAsync(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicForContent200Response>> GroupV2AddOptionalConversationWithHttpInfoAsync(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2ApproveAllPendingAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2ApproveAllPendingWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2ApprovePendingAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2ApprovePendingWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2ApprovePendingForListAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2ApprovePendingForListWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2BanMemberAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2BanMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2DenyAllPendingAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2DenyAllPendingWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2DenyPendingForListAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2DenyPendingForListWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditClanBannerAsync(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2EditClanBannerWithHttpInfoAsync(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditFounderOptionsAsync(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2EditFounderOptionsWithHttpInfoAsync(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditGroupAsync(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2EditGroupWithHttpInfoAsync(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditGroupMembershipAsync(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2EditGroupMembershipWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicForContent200Response> GroupV2EditOptionalConversationAsync(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicForContent200Response>> GroupV2EditOptionalConversationWithHttpInfoAsync(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetMembersOfGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetMembersOfGroup200Response> GroupV2GetAdminsAndFounderOfGroupAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetMembersOfGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetMembersOfGroup200Response>> GroupV2GetAdminsAndFounderOfGroupWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetAvailableAvatars200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetAvailableAvatars200Response> GroupV2GetAvailableAvatarsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetAvailableAvatars200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetAvailableAvatars200Response>> GroupV2GetAvailableAvatarsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetAvailableThemes200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetAvailableThemes200Response> GroupV2GetAvailableThemesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetAvailableThemes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetAvailableThemes200Response>> GroupV2GetAvailableThemesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetBannedMembersOfGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetBannedMembersOfGroup200Response> GroupV2GetBannedMembersOfGroupAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetBannedMembersOfGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetBannedMembersOfGroup200Response>> GroupV2GetBannedMembersOfGroupWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupByNameAsync(string groupName, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupByNameWithHttpInfoAsync(string groupName, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupByNameV2Async(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupByNameV2WithHttpInfoAsync(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroupOptionalConversations200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetGroupOptionalConversations200Response> GroupV2GetGroupOptionalConversationsAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroupOptionalConversations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetGroupOptionalConversations200Response>> GroupV2GetGroupOptionalConversationsWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroupsForMember200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetGroupsForMember200Response> GroupV2GetGroupsForMemberAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroupsForMember200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetGroupsForMember200Response>> GroupV2GetGroupsForMemberWithHttpInfoAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPendingMemberships200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetPendingMemberships200Response> GroupV2GetInvitedIndividualsAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPendingMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetPendingMemberships200Response>> GroupV2GetInvitedIndividualsWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetMembersOfGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetMembersOfGroup200Response> GroupV2GetMembersOfGroupAsync(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetMembersOfGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetMembersOfGroup200Response>> GroupV2GetMembersOfGroupWithHttpInfoAsync(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPendingMemberships200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetPendingMemberships200Response> GroupV2GetPendingMembershipsAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPendingMemberships200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetPendingMemberships200Response>> GroupV2GetPendingMembershipsWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPotentialGroupsForMember200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetPotentialGroupsForMember200Response> GroupV2GetPotentialGroupsForMemberAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPotentialGroupsForMember200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetPotentialGroupsForMember200Response>> GroupV2GetPotentialGroupsForMemberWithHttpInfoAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetRecommendedGroups200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetRecommendedGroups200Response> GroupV2GetRecommendedGroupsAsync(int createDateRange, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetRecommendedGroups200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetRecommendedGroups200Response>> GroupV2GetRecommendedGroupsWithHttpInfoAsync(int createDateRange, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2GetUserClanInviteSettingAsync(int mType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2GetUserClanInviteSettingWithHttpInfoAsync(int mType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GroupSearch200Response</returns>
        System.Threading.Tasks.Task<GroupV2GroupSearch200Response> GroupV2GroupSearchAsync(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GroupSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GroupSearch200Response>> GroupV2GroupSearchWithHttpInfoAsync(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2IndividualGroupInvite200Response</returns>
        System.Threading.Tasks.Task<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2IndividualGroupInvite200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2IndividualGroupInvite200Response>> GroupV2IndividualGroupInviteWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2IndividualGroupInvite200Response</returns>
        System.Threading.Tasks.Task<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteCancelAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2IndividualGroupInvite200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2IndividualGroupInvite200Response>> GroupV2IndividualGroupInviteCancelWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2KickMember200Response</returns>
        System.Threading.Tasks.Task<GroupV2KickMember200Response> GroupV2KickMemberAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2KickMember200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2KickMember200Response>> GroupV2KickMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2RecoverGroupForFounder200Response</returns>
        System.Threading.Tasks.Task<GroupV2RecoverGroupForFounder200Response> GroupV2RecoverGroupForFounderAsync(int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2RecoverGroupForFounder200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2RecoverGroupForFounder200Response>> GroupV2RecoverGroupForFounderWithHttpInfoAsync(int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2UnbanMemberAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> GroupV2UnbanMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2Api : IGroupV2ApiSync, IGroupV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupV2Api : IGroupV2Api
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupV2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupV2Api(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupV2Api(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupV2Api(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response GroupV2AbdicateFoundership(long founderIdNew, long groupId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = GroupV2AbdicateFoundershipWithHttpInfo(founderIdNew, groupId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2AbdicateFoundershipWithHttpInfo(long founderIdNew, long groupId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("founderIdNew", Org.OpenAPITools.Client.ClientUtils.ParameterToString(founderIdNew)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2AbdicateFoundership";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2AbdicateFoundershipAsync(long founderIdNew, long groupId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await GroupV2AbdicateFoundershipWithHttpInfoAsync(founderIdNew, groupId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2AbdicateFoundershipWithHttpInfoAsync(long founderIdNew, long groupId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("founderIdNew", Org.OpenAPITools.Client.ClientUtils.ParameterToString(founderIdNew)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2AbdicateFoundership";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        public ForumGetTopicForContent200Response GroupV2AddOptionalConversation(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = GroupV2AddOptionalConversationWithHttpInfo(groupId, groupsV2GroupOptionalConversationAddRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> GroupV2AddOptionalConversationWithHttpInfo(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupOptionalConversationAddRequest' is set
            if (groupsV2GroupOptionalConversationAddRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionalConversationAddRequest' when calling GroupV2Api->GroupV2AddOptionalConversation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionalConversationAddRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2AddOptionalConversation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ForumGetTopicForContent200Response>("/GroupV2/{groupId}/OptionalConversations/Add/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicForContent200Response> GroupV2AddOptionalConversationAsync(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = await GroupV2AddOptionalConversationWithHttpInfoAsync(groupId, groupsV2GroupOptionalConversationAddRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationAddRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response>> GroupV2AddOptionalConversationWithHttpInfoAsync(long groupId, GroupsV2GroupOptionalConversationAddRequest groupsV2GroupOptionalConversationAddRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupOptionalConversationAddRequest' is set
            if (groupsV2GroupOptionalConversationAddRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionalConversationAddRequest' when calling GroupV2Api->GroupV2AddOptionalConversation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionalConversationAddRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2AddOptionalConversation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ForumGetTopicForContent200Response>("/GroupV2/{groupId}/OptionalConversations/Add/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        public GroupV2ApproveAllPending200Response GroupV2ApproveAllPending(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = GroupV2ApproveAllPendingWithHttpInfo(groupId, groupsV2GroupApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> GroupV2ApproveAllPendingWithHttpInfo(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2ApproveAllPending");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApproveAllPending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/ApproveAll/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2ApproveAllPendingAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = await GroupV2ApproveAllPendingWithHttpInfoAsync(groupId, groupsV2GroupApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2ApproveAllPendingWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2ApproveAllPending");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApproveAllPending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/ApproveAll/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response GroupV2ApprovePending(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = GroupV2ApprovePendingWithHttpInfo(groupId, membershipId, membershipType, groupsV2GroupApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2ApprovePendingWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2ApprovePending");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApprovePending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2ApprovePendingAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await GroupV2ApprovePendingWithHttpInfoAsync(groupId, membershipId, membershipType, groupsV2GroupApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2ApprovePendingWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2ApprovePending");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApprovePending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        public GroupV2ApproveAllPending200Response GroupV2ApprovePendingForList(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = GroupV2ApprovePendingForListWithHttpInfo(groupId, groupsV2GroupApplicationListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> GroupV2ApprovePendingForListWithHttpInfo(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationListRequest' is set
            if (groupsV2GroupApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationListRequest' when calling GroupV2Api->GroupV2ApprovePendingForList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationListRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApprovePendingForList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/ApproveList/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2ApprovePendingForListAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = await GroupV2ApprovePendingForListWithHttpInfoAsync(groupId, groupsV2GroupApplicationListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2ApprovePendingForListWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationListRequest' is set
            if (groupsV2GroupApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationListRequest' when calling GroupV2Api->GroupV2ApprovePendingForList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationListRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2ApprovePendingForList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/ApproveList/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2BanMember(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2BanMemberWithHttpInfo(groupId, membershipId, membershipType, groupsV2GroupBanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2BanMemberWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupBanRequest' is set
            if (groupsV2GroupBanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupBanRequest' when calling GroupV2Api->GroupV2BanMember");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupBanRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2BanMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2BanMemberAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2BanMemberWithHttpInfoAsync(groupId, membershipId, membershipType, groupsV2GroupBanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="groupsV2GroupBanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2BanMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupBanRequest groupsV2GroupBanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupBanRequest' is set
            if (groupsV2GroupBanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupBanRequest' when calling GroupV2Api->GroupV2BanMember");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupBanRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2BanMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        public GroupV2ApproveAllPending200Response GroupV2DenyAllPending(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = GroupV2DenyAllPendingWithHttpInfo(groupId, groupsV2GroupApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> GroupV2DenyAllPendingWithHttpInfo(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2DenyAllPending");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2DenyAllPending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/DenyAll/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2DenyAllPendingAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = await GroupV2DenyAllPendingWithHttpInfoAsync(groupId, groupsV2GroupApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2DenyAllPendingWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2DenyAllPending");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2DenyAllPending";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/DenyAll/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2ApproveAllPending200Response</returns>
        public GroupV2ApproveAllPending200Response GroupV2DenyPendingForList(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = GroupV2DenyPendingForListWithHttpInfo(groupId, groupsV2GroupApplicationListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2ApproveAllPending200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> GroupV2DenyPendingForListWithHttpInfo(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationListRequest' is set
            if (groupsV2GroupApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationListRequest' when calling GroupV2Api->GroupV2DenyPendingForList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationListRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2DenyPendingForList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/DenyList/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2ApproveAllPending200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2ApproveAllPending200Response> GroupV2DenyPendingForListAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response> localVarResponse = await GroupV2DenyPendingForListWithHttpInfoAsync(groupId, groupsV2GroupApplicationListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="groupsV2GroupApplicationListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2ApproveAllPending200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2ApproveAllPending200Response>> GroupV2DenyPendingForListWithHttpInfoAsync(long groupId, GroupsV2GroupApplicationListRequest groupsV2GroupApplicationListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationListRequest' is set
            if (groupsV2GroupApplicationListRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationListRequest' when calling GroupV2Api->GroupV2DenyPendingForList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationListRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2DenyPendingForList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2ApproveAllPending200Response>("/GroupV2/{groupId}/Members/DenyList/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2EditClanBanner(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2EditClanBannerWithHttpInfo(groupId, groupsV2ClanBanner);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2EditClanBannerWithHttpInfo(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2ClanBanner' is set
            if (groupsV2ClanBanner == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2ClanBanner' when calling GroupV2Api->GroupV2EditClanBanner");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2ClanBanner;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditClanBanner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/EditClanBanner/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditClanBannerAsync(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2EditClanBannerWithHttpInfoAsync(groupId, groupsV2ClanBanner, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2ClanBanner"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2EditClanBannerWithHttpInfoAsync(long groupId, GroupsV2ClanBanner groupsV2ClanBanner, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2ClanBanner' is set
            if (groupsV2ClanBanner == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2ClanBanner' when calling GroupV2Api->GroupV2EditClanBanner");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2ClanBanner;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditClanBanner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/EditClanBanner/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2EditFounderOptions(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2EditFounderOptionsWithHttpInfo(groupId, groupsV2GroupOptionsEditAction);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2EditFounderOptionsWithHttpInfo(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupOptionsEditAction' is set
            if (groupsV2GroupOptionsEditAction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionsEditAction' when calling GroupV2Api->GroupV2EditFounderOptions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionsEditAction;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditFounderOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/EditFounderOptions/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditFounderOptionsAsync(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2EditFounderOptionsWithHttpInfoAsync(groupId, groupsV2GroupOptionsEditAction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionsEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2EditFounderOptionsWithHttpInfoAsync(long groupId, GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupOptionsEditAction' is set
            if (groupsV2GroupOptionsEditAction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionsEditAction' when calling GroupV2Api->GroupV2EditFounderOptions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionsEditAction;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditFounderOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/EditFounderOptions/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2EditGroup(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2EditGroupWithHttpInfo(groupId, groupsV2GroupEditAction);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2EditGroupWithHttpInfo(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupEditAction' is set
            if (groupsV2GroupEditAction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupEditAction' when calling GroupV2Api->GroupV2EditGroup");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupEditAction;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Edit/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditGroupAsync(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2EditGroupWithHttpInfoAsync(groupId, groupsV2GroupEditAction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupEditAction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2EditGroupWithHttpInfoAsync(long groupId, GroupsV2GroupEditAction groupsV2GroupEditAction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupEditAction' is set
            if (groupsV2GroupEditAction == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupEditAction' when calling GroupV2Api->GroupV2EditGroup");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupEditAction;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Edit/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2EditGroupMembership(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2EditGroupMembershipWithHttpInfo(groupId, membershipId, membershipType, memberType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2EditGroupMembershipWithHttpInfo(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memberType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditGroupMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2EditGroupMembershipAsync(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2EditGroupMembershipWithHttpInfoAsync(groupId, membershipId, membershipType, memberType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2EditGroupMembershipWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int memberType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(memberType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditGroupMembership";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        public ForumGetTopicForContent200Response GroupV2EditOptionalConversation(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = GroupV2EditOptionalConversationWithHttpInfo(conversationId, groupId, groupsV2GroupOptionalConversationEditRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> GroupV2EditOptionalConversationWithHttpInfo(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupOptionalConversationEditRequest' is set
            if (groupsV2GroupOptionalConversationEditRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionalConversationEditRequest' when calling GroupV2Api->GroupV2EditOptionalConversation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("conversationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionalConversationEditRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditOptionalConversation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ForumGetTopicForContent200Response>("/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicForContent200Response> GroupV2EditOptionalConversationAsync(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = await GroupV2EditOptionalConversationWithHttpInfoAsync(conversationId, groupId, groupsV2GroupOptionalConversationEditRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <param name="groupsV2GroupOptionalConversationEditRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response>> GroupV2EditOptionalConversationWithHttpInfoAsync(long conversationId, long groupId, GroupsV2GroupOptionalConversationEditRequest groupsV2GroupOptionalConversationEditRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupOptionalConversationEditRequest' is set
            if (groupsV2GroupOptionalConversationEditRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupOptionalConversationEditRequest' when calling GroupV2Api->GroupV2EditOptionalConversation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("conversationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupOptionalConversationEditRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2EditOptionalConversation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ForumGetTopicForContent200Response>("/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetMembersOfGroup200Response</returns>
        public GroupV2GetMembersOfGroup200Response GroupV2GetAdminsAndFounderOfGroup(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> localVarResponse = GroupV2GetAdminsAndFounderOfGroupWithHttpInfo(currentpage, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetMembersOfGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> GroupV2GetAdminsAndFounderOfGroupWithHttpInfo(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAdminsAndFounderOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetMembersOfGroup200Response>("/GroupV2/{groupId}/AdminsAndFounder/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetMembersOfGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetMembersOfGroup200Response> GroupV2GetAdminsAndFounderOfGroupAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> localVarResponse = await GroupV2GetAdminsAndFounderOfGroupWithHttpInfoAsync(currentpage, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetMembersOfGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response>> GroupV2GetAdminsAndFounderOfGroupWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAdminsAndFounderOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetMembersOfGroup200Response>("/GroupV2/{groupId}/AdminsAndFounder/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetAvailableAvatars200Response</returns>
        public GroupV2GetAvailableAvatars200Response GroupV2GetAvailableAvatars(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableAvatars200Response> localVarResponse = GroupV2GetAvailableAvatarsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetAvailableAvatars200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableAvatars200Response> GroupV2GetAvailableAvatarsWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAvailableAvatars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetAvailableAvatars200Response>("/GroupV2/GetAvailableAvatars/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetAvailableAvatars200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetAvailableAvatars200Response> GroupV2GetAvailableAvatarsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableAvatars200Response> localVarResponse = await GroupV2GetAvailableAvatarsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetAvailableAvatars200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableAvatars200Response>> GroupV2GetAvailableAvatarsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAvailableAvatars";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetAvailableAvatars200Response>("/GroupV2/GetAvailableAvatars/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetAvailableThemes200Response</returns>
        public GroupV2GetAvailableThemes200Response GroupV2GetAvailableThemes(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableThemes200Response> localVarResponse = GroupV2GetAvailableThemesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetAvailableThemes200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableThemes200Response> GroupV2GetAvailableThemesWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAvailableThemes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetAvailableThemes200Response>("/GroupV2/GetAvailableThemes/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetAvailableThemes200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetAvailableThemes200Response> GroupV2GetAvailableThemesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableThemes200Response> localVarResponse = await GroupV2GetAvailableThemesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetAvailableThemes200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetAvailableThemes200Response>> GroupV2GetAvailableThemesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetAvailableThemes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetAvailableThemes200Response>("/GroupV2/GetAvailableThemes/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetBannedMembersOfGroup200Response</returns>
        public GroupV2GetBannedMembersOfGroup200Response GroupV2GetBannedMembersOfGroup(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetBannedMembersOfGroup200Response> localVarResponse = GroupV2GetBannedMembersOfGroupWithHttpInfo(currentpage, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetBannedMembersOfGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetBannedMembersOfGroup200Response> GroupV2GetBannedMembersOfGroupWithHttpInfo(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetBannedMembersOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetBannedMembersOfGroup200Response>("/GroupV2/{groupId}/Banned/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetBannedMembersOfGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetBannedMembersOfGroup200Response> GroupV2GetBannedMembersOfGroupAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetBannedMembersOfGroup200Response> localVarResponse = await GroupV2GetBannedMembersOfGroupWithHttpInfoAsync(currentpage, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetBannedMembersOfGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetBannedMembersOfGroup200Response>> GroupV2GetBannedMembersOfGroupWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetBannedMembersOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetBannedMembersOfGroup200Response>("/GroupV2/{groupId}/Banned/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        public GroupV2GetGroup200Response GroupV2GetGroup(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = GroupV2GetGroupWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupWithHttpInfo(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetGroup200Response>("/GroupV2/{groupId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = await GroupV2GetGroupWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetGroup200Response>("/GroupV2/{groupId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        public GroupV2GetGroup200Response GroupV2GetGroupByName(string groupName, int groupType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = GroupV2GetGroupByNameWithHttpInfo(groupName, groupType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupByNameWithHttpInfo(string groupName, int groupType, int operationIndex = 0)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupByName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetGroup200Response>("/GroupV2/Name/{groupName}/{groupType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupByNameAsync(string groupName, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = await GroupV2GetGroupByNameWithHttpInfoAsync(groupName, groupType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupByNameWithHttpInfoAsync(string groupName, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupByName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetGroup200Response>("/GroupV2/Name/{groupName}/{groupType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroup200Response</returns>
        public GroupV2GetGroup200Response GroupV2GetGroupByNameV2(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = GroupV2GetGroupByNameV2WithHttpInfo(groupsV2GroupNameSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> GroupV2GetGroupByNameV2WithHttpInfo(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupNameSearchRequest' is set
            if (groupsV2GroupNameSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupNameSearchRequest' when calling GroupV2Api->GroupV2GetGroupByNameV2");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsV2GroupNameSearchRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupByNameV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetGroup200Response>("/GroupV2/NameV2/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByNameV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetGroup200Response> GroupV2GetGroupByNameV2Async(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response> localVarResponse = await GroupV2GetGroupByNameV2WithHttpInfoAsync(groupsV2GroupNameSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupNameSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroup200Response>> GroupV2GetGroupByNameV2WithHttpInfoAsync(GroupsV2GroupNameSearchRequest groupsV2GroupNameSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupNameSearchRequest' is set
            if (groupsV2GroupNameSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupNameSearchRequest' when calling GroupV2Api->GroupV2GetGroupByNameV2");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsV2GroupNameSearchRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupByNameV2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetGroup200Response>("/GroupV2/NameV2/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByNameV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroupOptionalConversations200Response</returns>
        public GroupV2GetGroupOptionalConversations200Response GroupV2GetGroupOptionalConversations(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupOptionalConversations200Response> localVarResponse = GroupV2GetGroupOptionalConversationsWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroupOptionalConversations200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupOptionalConversations200Response> GroupV2GetGroupOptionalConversationsWithHttpInfo(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupOptionalConversations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetGroupOptionalConversations200Response>("/GroupV2/{groupId}/OptionalConversations/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroupOptionalConversations200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetGroupOptionalConversations200Response> GroupV2GetGroupOptionalConversationsAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupOptionalConversations200Response> localVarResponse = await GroupV2GetGroupOptionalConversationsWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroupOptionalConversations200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupOptionalConversations200Response>> GroupV2GetGroupOptionalConversationsWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupOptionalConversations";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetGroupOptionalConversations200Response>("/GroupV2/{groupId}/OptionalConversations/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetGroupsForMember200Response</returns>
        public GroupV2GetGroupsForMember200Response GroupV2GetGroupsForMember(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupsForMember200Response> localVarResponse = GroupV2GetGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetGroupsForMember200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupsForMember200Response> GroupV2GetGroupsForMemberWithHttpInfo(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupsForMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetGroupsForMember200Response>("/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetGroupsForMember200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetGroupsForMember200Response> GroupV2GetGroupsForMemberAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupsForMember200Response> localVarResponse = await GroupV2GetGroupsForMemberWithHttpInfoAsync(filter, groupType, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetGroupsForMember200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetGroupsForMember200Response>> GroupV2GetGroupsForMemberWithHttpInfoAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetGroupsForMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetGroupsForMember200Response>("/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPendingMemberships200Response</returns>
        public GroupV2GetPendingMemberships200Response GroupV2GetInvitedIndividuals(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> localVarResponse = GroupV2GetInvitedIndividualsWithHttpInfo(currentpage, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPendingMemberships200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> GroupV2GetInvitedIndividualsWithHttpInfo(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetInvitedIndividuals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetPendingMemberships200Response>("/GroupV2/{groupId}/Members/InvitedIndividuals/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPendingMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetPendingMemberships200Response> GroupV2GetInvitedIndividualsAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> localVarResponse = await GroupV2GetInvitedIndividualsWithHttpInfoAsync(currentpage, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPendingMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response>> GroupV2GetInvitedIndividualsWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetInvitedIndividuals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetPendingMemberships200Response>("/GroupV2/{groupId}/Members/InvitedIndividuals/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetMembersOfGroup200Response</returns>
        public GroupV2GetMembersOfGroup200Response GroupV2GetMembersOfGroup(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> localVarResponse = GroupV2GetMembersOfGroupWithHttpInfo(currentpage, groupId, memberType, nameSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetMembersOfGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> GroupV2GetMembersOfGroupWithHttpInfo(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "memberType", memberType));
            }
            if (nameSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nameSearch", nameSearch));
            }

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetMembersOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetMembersOfGroup200Response>("/GroupV2/{groupId}/Members/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetMembersOfGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetMembersOfGroup200Response> GroupV2GetMembersOfGroupAsync(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response> localVarResponse = await GroupV2GetMembersOfGroupWithHttpInfoAsync(currentpage, groupId, memberType, nameSearch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetMembersOfGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetMembersOfGroup200Response>> GroupV2GetMembersOfGroupWithHttpInfoAsync(int currentpage, long groupId, int? memberType = default(int?), string? nameSearch = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "memberType", memberType));
            }
            if (nameSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "nameSearch", nameSearch));
            }

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetMembersOfGroup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetMembersOfGroup200Response>("/GroupV2/{groupId}/Members/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPendingMemberships200Response</returns>
        public GroupV2GetPendingMemberships200Response GroupV2GetPendingMemberships(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> localVarResponse = GroupV2GetPendingMembershipsWithHttpInfo(currentpage, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPendingMemberships200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> GroupV2GetPendingMembershipsWithHttpInfo(int currentpage, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetPendingMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetPendingMemberships200Response>("/GroupV2/{groupId}/Members/Pending/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPendingMemberships200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetPendingMemberships200Response> GroupV2GetPendingMembershipsAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response> localVarResponse = await GroupV2GetPendingMembershipsWithHttpInfoAsync(currentpage, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPendingMemberships200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetPendingMemberships200Response>> GroupV2GetPendingMembershipsWithHttpInfoAsync(int currentpage, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("currentpage", Org.OpenAPITools.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetPendingMemberships";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetPendingMemberships200Response>("/GroupV2/{groupId}/Members/Pending/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetPotentialGroupsForMember200Response</returns>
        public GroupV2GetPotentialGroupsForMember200Response GroupV2GetPotentialGroupsForMember(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPotentialGroupsForMember200Response> localVarResponse = GroupV2GetPotentialGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetPotentialGroupsForMember200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetPotentialGroupsForMember200Response> GroupV2GetPotentialGroupsForMemberWithHttpInfo(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetPotentialGroupsForMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetPotentialGroupsForMember200Response>("/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetPotentialGroupsForMember200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetPotentialGroupsForMember200Response> GroupV2GetPotentialGroupsForMemberAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetPotentialGroupsForMember200Response> localVarResponse = await GroupV2GetPotentialGroupsForMemberWithHttpInfoAsync(filter, groupType, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetPotentialGroupsForMember200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetPotentialGroupsForMember200Response>> GroupV2GetPotentialGroupsForMemberWithHttpInfoAsync(int filter, int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetPotentialGroupsForMember";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetPotentialGroupsForMember200Response>("/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetRecommendedGroups200Response</returns>
        public GroupV2GetRecommendedGroups200Response GroupV2GetRecommendedGroups(int createDateRange, int groupType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetRecommendedGroups200Response> localVarResponse = GroupV2GetRecommendedGroupsWithHttpInfo(createDateRange, groupType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetRecommendedGroups200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetRecommendedGroups200Response> GroupV2GetRecommendedGroupsWithHttpInfo(int createDateRange, int groupType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("createDateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(createDateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetRecommendedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetRecommendedGroups200Response>("/GroupV2/Recommended/{groupType}/{createDateRange}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetRecommendedGroups200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetRecommendedGroups200Response> GroupV2GetRecommendedGroupsAsync(int createDateRange, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetRecommendedGroups200Response> localVarResponse = await GroupV2GetRecommendedGroupsWithHttpInfoAsync(createDateRange, groupType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetRecommendedGroups200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetRecommendedGroups200Response>> GroupV2GetRecommendedGroupsWithHttpInfoAsync(int createDateRange, int groupType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("createDateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(createDateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetRecommendedGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetRecommendedGroups200Response>("/GroupV2/Recommended/{groupType}/{createDateRange}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response GroupV2GetUserClanInviteSetting(int mType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = GroupV2GetUserClanInviteSettingWithHttpInfo(mType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> GroupV2GetUserClanInviteSettingWithHttpInfo(int mType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetUserClanInviteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/GetUserClanInviteSetting/{mType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> GroupV2GetUserClanInviteSettingAsync(int mType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await GroupV2GetUserClanInviteSettingWithHttpInfoAsync(mType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> GroupV2GetUserClanInviteSettingWithHttpInfoAsync(int mType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GetUserClanInviteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2GetUserClanInviteSetting200Response>("/GroupV2/GetUserClanInviteSetting/{mType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GroupSearch200Response</returns>
        public GroupV2GroupSearch200Response GroupV2GroupSearch(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GroupSearch200Response> localVarResponse = GroupV2GroupSearchWithHttpInfo(groupsV2GroupQuery);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GroupSearch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GroupSearch200Response> GroupV2GroupSearchWithHttpInfo(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupQuery' is set
            if (groupsV2GroupQuery == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupQuery' when calling GroupV2Api->GroupV2GroupSearch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsV2GroupQuery;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GroupSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GroupSearch200Response>("/GroupV2/Search/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GroupSearch200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GroupSearch200Response> GroupV2GroupSearchAsync(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GroupSearch200Response> localVarResponse = await GroupV2GroupSearchWithHttpInfoAsync(groupsV2GroupQuery, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupsV2GroupQuery"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GroupSearch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GroupSearch200Response>> GroupV2GroupSearchWithHttpInfoAsync(GroupsV2GroupQuery groupsV2GroupQuery, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupQuery' is set
            if (groupsV2GroupQuery == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupQuery' when calling GroupV2Api->GroupV2GroupSearch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = groupsV2GroupQuery;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2GroupSearch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GroupSearch200Response>("/GroupV2/Search/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2IndividualGroupInvite200Response</returns>
        public GroupV2IndividualGroupInvite200Response GroupV2IndividualGroupInvite(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResponse = GroupV2IndividualGroupInviteWithHttpInfo(groupId, membershipId, membershipType, groupsV2GroupApplicationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2IndividualGroupInvite200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteWithHttpInfo(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2IndividualGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2IndividualGroupInvite200Response>("/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2IndividualGroupInvite200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResponse = await GroupV2IndividualGroupInviteWithHttpInfoAsync(groupId, membershipId, membershipType, groupsV2GroupApplicationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <param name="groupsV2GroupApplicationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2IndividualGroupInvite200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response>> GroupV2IndividualGroupInviteWithHttpInfoAsync(long groupId, long membershipId, int membershipType, GroupsV2GroupApplicationRequest groupsV2GroupApplicationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupsV2GroupApplicationRequest' is set
            if (groupsV2GroupApplicationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'groupsV2GroupApplicationRequest' when calling GroupV2Api->GroupV2IndividualGroupInvite");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = groupsV2GroupApplicationRequest;

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2IndividualGroupInvite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2IndividualGroupInvite200Response>("/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2IndividualGroupInvite200Response</returns>
        public GroupV2IndividualGroupInvite200Response GroupV2IndividualGroupInviteCancel(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResponse = GroupV2IndividualGroupInviteCancelWithHttpInfo(groupId, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2IndividualGroupInvite200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteCancelWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2IndividualGroupInviteCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2IndividualGroupInvite200Response>("/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2IndividualGroupInvite200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2IndividualGroupInvite200Response> GroupV2IndividualGroupInviteCancelAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResponse = await GroupV2IndividualGroupInviteCancelWithHttpInfoAsync(groupId, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2IndividualGroupInvite200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2IndividualGroupInvite200Response>> GroupV2IndividualGroupInviteCancelWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2IndividualGroupInviteCancel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2IndividualGroupInvite200Response>("/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2KickMember200Response</returns>
        public GroupV2KickMember200Response GroupV2KickMember(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2KickMember200Response> localVarResponse = GroupV2KickMemberWithHttpInfo(groupId, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2KickMember200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2KickMember200Response> GroupV2KickMemberWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2KickMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2KickMember200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2KickMember200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2KickMember200Response> GroupV2KickMemberAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2KickMember200Response> localVarResponse = await GroupV2KickMemberWithHttpInfoAsync(groupId, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2KickMember200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2KickMember200Response>> GroupV2KickMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2KickMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2KickMember200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2RecoverGroupForFounder200Response</returns>
        public GroupV2RecoverGroupForFounder200Response GroupV2RecoverGroupForFounder(int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2RecoverGroupForFounder200Response> localVarResponse = GroupV2RecoverGroupForFounderWithHttpInfo(groupType, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2RecoverGroupForFounder200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2RecoverGroupForFounder200Response> GroupV2RecoverGroupForFounderWithHttpInfo(int groupType, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2RecoverGroupForFounder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2RecoverGroupForFounder200Response>("/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2RecoverGroupForFounder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2RecoverGroupForFounder200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2RecoverGroupForFounder200Response> GroupV2RecoverGroupForFounderAsync(int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2RecoverGroupForFounder200Response> localVarResponse = await GroupV2RecoverGroupForFounderWithHttpInfoAsync(groupType, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2RecoverGroupForFounder200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2RecoverGroupForFounder200Response>> GroupV2RecoverGroupForFounderWithHttpInfoAsync(int groupType, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2RecoverGroupForFounder";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2RecoverGroupForFounder200Response>("/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2RecoverGroupForFounder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response GroupV2UnbanMember(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = GroupV2UnbanMemberWithHttpInfo(groupId, membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> GroupV2UnbanMemberWithHttpInfo(long groupId, long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2UnbanMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> GroupV2UnbanMemberAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await GroupV2UnbanMemberWithHttpInfoAsync(groupId, membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> GroupV2UnbanMemberWithHttpInfoAsync(long groupId, long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "GroupV2Api.GroupV2UnbanMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
