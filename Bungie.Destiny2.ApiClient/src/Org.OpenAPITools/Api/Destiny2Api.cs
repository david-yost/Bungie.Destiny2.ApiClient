/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestiny2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2AwaGetActionToken200Response</returns>
        Destiny2AwaGetActionToken200Response Destiny2AwaGetActionToken(string correlationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2AwaGetActionToken200Response</returns>
        ApiResponse<Destiny2AwaGetActionToken200Response> Destiny2AwaGetActionTokenWithHttpInfo(string correlationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2AwaInitializeRequest200Response</returns>
        Destiny2AwaInitializeRequest200Response Destiny2AwaInitializeRequest(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2AwaInitializeRequest200Response</returns>
        ApiResponse<Destiny2AwaInitializeRequest200Response> Destiny2AwaInitializeRequestWithHttpInfo(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2AwaProvideAuthorizationResult(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2AwaProvideAuthorizationResultWithHttpInfo(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear the identifiers and items of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2ClearLoadout(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear the identifiers and items of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2ClearLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2EquipItem(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2EquipItemWithHttpInfo(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2EquipItems200Response</returns>
        Destiny2EquipItems200Response Destiny2EquipItems(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2EquipItems200Response</returns>
        ApiResponse<Destiny2EquipItems200Response> Destiny2EquipItemsWithHttpInfo(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2EquipLoadout(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2EquipLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetActivityHistory200Response</returns>
        Destiny2GetActivityHistory200Response Destiny2GetActivityHistory(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetActivityHistory200Response</returns>
        ApiResponse<Destiny2GetActivityHistory200Response> Destiny2GetActivityHistoryWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetCharacter200Response</returns>
        Destiny2GetCharacter200Response Destiny2GetCharacter(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetCharacter200Response</returns>
        ApiResponse<Destiny2GetCharacter200Response> Destiny2GetCharacterWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanAggregateStats200Response</returns>
        Destiny2GetClanAggregateStats200Response Destiny2GetClanAggregateStats(long groupId, string? modes = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanAggregateStats200Response</returns>
        ApiResponse<Destiny2GetClanAggregateStats200Response> Destiny2GetClanAggregateStatsWithHttpInfo(long groupId, string? modes = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the dictionary of values for the Clan Banner
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanBannerSource200Response</returns>
        Destiny2GetClanBannerSource200Response Destiny2GetClanBannerSource(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the dictionary of values for the Clan Banner
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanBannerSource200Response</returns>
        ApiResponse<Destiny2GetClanBannerSource200Response> Destiny2GetClanBannerSourceWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        Destiny2GetClanLeaderboards200Response Destiny2GetClanLeaderboards(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetClanLeaderboardsWithHttpInfo(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanWeeklyRewardState200Response</returns>
        Destiny2GetClanWeeklyRewardState200Response Destiny2GetClanWeeklyRewardState(long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanWeeklyRewardState200Response</returns>
        ApiResponse<Destiny2GetClanWeeklyRewardState200Response> Destiny2GetClanWeeklyRewardStateWithHttpInfo(long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetCollectibleNodeDetails200Response</returns>
        Destiny2GetCollectibleNodeDetails200Response Destiny2GetCollectibleNodeDetails(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetCollectibleNodeDetails200Response</returns>
        ApiResponse<Destiny2GetCollectibleNodeDetails200Response> Destiny2GetCollectibleNodeDetailsWithHttpInfo(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyAggregateActivityStats200Response</returns>
        Destiny2GetDestinyAggregateActivityStats200Response Destiny2GetDestinyAggregateActivityStats(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyAggregateActivityStats200Response</returns>
        ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> Destiny2GetDestinyAggregateActivityStatsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyEntityDefinition200Response</returns>
        Destiny2GetDestinyEntityDefinition200Response Destiny2GetDestinyEntityDefinition(string entityType, int hashIdentifier, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyEntityDefinition200Response</returns>
        ApiResponse<Destiny2GetDestinyEntityDefinition200Response> Destiny2GetDestinyEntityDefinitionWithHttpInfo(string entityType, int hashIdentifier, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyManifest200Response</returns>
        Destiny2GetDestinyManifest200Response Destiny2GetDestinyManifest(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyManifest200Response</returns>
        ApiResponse<Destiny2GetDestinyManifest200Response> Destiny2GetDestinyManifestWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStats200Response</returns>
        Destiny2GetHistoricalStats200Response Destiny2GetHistoricalStats(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStats200Response</returns>
        ApiResponse<Destiny2GetHistoricalStats200Response> Destiny2GetHistoricalStatsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStatsDefinition200Response</returns>
        Destiny2GetHistoricalStatsDefinition200Response Destiny2GetHistoricalStatsDefinition(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStatsDefinition200Response</returns>
        ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> Destiny2GetHistoricalStatsDefinitionWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStatsForAccount200Response</returns>
        Destiny2GetHistoricalStatsForAccount200Response Destiny2GetHistoricalStatsForAccount(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStatsForAccount200Response</returns>
        ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> Destiny2GetHistoricalStatsForAccountWithHttpInfo(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetItem200Response</returns>
        Destiny2GetItem200Response Destiny2GetItem(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetItem200Response</returns>
        ApiResponse<Destiny2GetItem200Response> Destiny2GetItemWithHttpInfo(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        Destiny2GetClanLeaderboards200Response Destiny2GetLeaderboards(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsWithHttpInfo(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        Destiny2GetClanLeaderboards200Response Destiny2GetLeaderboardsForCharacter(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsForCharacterWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetLinkedProfiles200Response</returns>
        Destiny2GetLinkedProfiles200Response Destiny2GetLinkedProfiles(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetLinkedProfiles200Response</returns>
        ApiResponse<Destiny2GetLinkedProfiles200Response> Destiny2GetLinkedProfilesWithHttpInfo(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPostGameCarnageReport200Response</returns>
        Destiny2GetPostGameCarnageReport200Response Destiny2GetPostGameCarnageReport(long activityId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPostGameCarnageReport200Response</returns>
        ApiResponse<Destiny2GetPostGameCarnageReport200Response> Destiny2GetPostGameCarnageReportWithHttpInfo(long activityId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetProfile200Response</returns>
        Destiny2GetProfile200Response Destiny2GetProfile(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetProfile200Response</returns>
        ApiResponse<Destiny2GetProfile200Response> Destiny2GetProfileWithHttpInfo(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicMilestoneContent200Response</returns>
        Destiny2GetPublicMilestoneContent200Response Destiny2GetPublicMilestoneContent(int milestoneHash, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicMilestoneContent200Response</returns>
        ApiResponse<Destiny2GetPublicMilestoneContent200Response> Destiny2GetPublicMilestoneContentWithHttpInfo(int milestoneHash, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicMilestones200Response</returns>
        Destiny2GetPublicMilestones200Response Destiny2GetPublicMilestones(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicMilestones200Response</returns>
        ApiResponse<Destiny2GetPublicMilestones200Response> Destiny2GetPublicMilestonesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicVendors200Response</returns>
        Destiny2GetPublicVendors200Response Destiny2GetPublicVendors(List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicVendors200Response</returns>
        ApiResponse<Destiny2GetPublicVendors200Response> Destiny2GetPublicVendorsWithHttpInfo(List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetUniqueWeaponHistory200Response</returns>
        Destiny2GetUniqueWeaponHistory200Response Destiny2GetUniqueWeaponHistory(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetUniqueWeaponHistory200Response</returns>
        ApiResponse<Destiny2GetUniqueWeaponHistory200Response> Destiny2GetUniqueWeaponHistoryWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetVendor200Response</returns>
        Destiny2GetVendor200Response Destiny2GetVendor(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetVendor200Response</returns>
        ApiResponse<Destiny2GetVendor200Response> Destiny2GetVendorWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetVendors200Response</returns>
        Destiny2GetVendors200Response Destiny2GetVendors(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetVendors200Response</returns>
        ApiResponse<Destiny2GetVendors200Response> Destiny2GetVendorsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2InsertSocketPlug200Response</returns>
        Destiny2InsertSocketPlug200Response Destiny2InsertSocketPlug(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2InsertSocketPlug200Response</returns>
        ApiResponse<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugWithHttpInfo(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2InsertSocketPlug200Response</returns>
        Destiny2InsertSocketPlug200Response Destiny2InsertSocketPlugFree(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2InsertSocketPlug200Response</returns>
        ApiResponse<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugFreeWithHttpInfo(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2PullFromPostmaster(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2PullFromPostmasterWithHttpInfo(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2ReportOffensivePostGameCarnageReportPlayer(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2SearchDestinyEntities200Response</returns>
        Destiny2SearchDestinyEntities200Response Destiny2SearchDestinyEntities(string searchTerm, string type, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2SearchDestinyEntities200Response</returns>
        ApiResponse<Destiny2SearchDestinyEntities200Response> Destiny2SearchDestinyEntitiesWithHttpInfo(string searchTerm, string type, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        Destiny2SearchDestinyPlayerByBungieName200Response Destiny2SearchDestinyPlayerByBungieName(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> Destiny2SearchDestinyPlayerByBungieNameWithHttpInfo(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2SetItemLockState(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2SetItemLockStateWithHttpInfo(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2SetQuestTrackedState(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2SetQuestTrackedStateWithHttpInfo(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Snapshot a loadout with the currently equipped items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2SnapshotLoadout(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Snapshot a loadout with the currently equipped items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2SnapshotLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2TransferItem(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2TransferItemWithHttpInfo(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the color, icon, and name of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response Destiny2UpdateLoadoutIdentifiers(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the color, icon, and name of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> Destiny2UpdateLoadoutIdentifiersWithHttpInfo(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestiny2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2AwaGetActionToken200Response</returns>
        System.Threading.Tasks.Task<Destiny2AwaGetActionToken200Response> Destiny2AwaGetActionTokenAsync(string correlationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the action token if user approves the request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2AwaGetActionToken200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2AwaGetActionToken200Response>> Destiny2AwaGetActionTokenWithHttpInfoAsync(string correlationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2AwaInitializeRequest200Response</returns>
        System.Threading.Tasks.Task<Destiny2AwaInitializeRequest200Response> Destiny2AwaInitializeRequestAsync(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Initialize a request to perform an advanced write action.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2AwaInitializeRequest200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2AwaInitializeRequest200Response>> Destiny2AwaInitializeRequestWithHttpInfoAsync(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2AwaProvideAuthorizationResultAsync(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2AwaProvideAuthorizationResultWithHttpInfoAsync(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear the identifiers and items of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2ClearLoadoutAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Clear the identifiers and items of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2ClearLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2EquipItemAsync(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2EquipItemWithHttpInfoAsync(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2EquipItems200Response</returns>
        System.Threading.Tasks.Task<Destiny2EquipItems200Response> Destiny2EquipItemsAsync(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2EquipItems200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2EquipItems200Response>> Destiny2EquipItemsWithHttpInfoAsync(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2EquipLoadoutAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2EquipLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetActivityHistory200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetActivityHistory200Response> Destiny2GetActivityHistoryAsync(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets activity history stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetActivityHistory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetActivityHistory200Response>> Destiny2GetActivityHistoryWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetCharacter200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetCharacter200Response> Destiny2GetCharacterAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns character information for the supplied character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetCharacter200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetCharacter200Response>> Destiny2GetCharacterWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanAggregateStats200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanAggregateStats200Response> Destiny2GetClanAggregateStatsAsync(long groupId, string? modes = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanAggregateStats200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanAggregateStats200Response>> Destiny2GetClanAggregateStatsWithHttpInfoAsync(long groupId, string? modes = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the dictionary of values for the Clan Banner
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanBannerSource200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanBannerSource200Response> Destiny2GetClanBannerSourceAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the dictionary of values for the Clan Banner
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanBannerSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanBannerSource200Response>> Destiny2GetClanBannerSourceWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetClanLeaderboardsAsync(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetClanLeaderboardsWithHttpInfoAsync(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanWeeklyRewardState200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanWeeklyRewardState200Response> Destiny2GetClanWeeklyRewardStateAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanWeeklyRewardState200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanWeeklyRewardState200Response>> Destiny2GetClanWeeklyRewardStateWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetCollectibleNodeDetails200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetCollectibleNodeDetails200Response> Destiny2GetCollectibleNodeDetailsAsync(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetCollectibleNodeDetails200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetCollectibleNodeDetails200Response>> Destiny2GetCollectibleNodeDetailsWithHttpInfoAsync(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyAggregateActivityStats200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetDestinyAggregateActivityStats200Response> Destiny2GetDestinyAggregateActivityStatsAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyAggregateActivityStats200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response>> Destiny2GetDestinyAggregateActivityStatsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyEntityDefinition200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetDestinyEntityDefinition200Response> Destiny2GetDestinyEntityDefinitionAsync(string entityType, int hashIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyEntityDefinition200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetDestinyEntityDefinition200Response>> Destiny2GetDestinyEntityDefinitionWithHttpInfoAsync(string entityType, int hashIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyManifest200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetDestinyManifest200Response> Destiny2GetDestinyManifestAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current version of the manifest as a json object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyManifest200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetDestinyManifest200Response>> Destiny2GetDestinyManifestWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStats200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetHistoricalStats200Response> Destiny2GetHistoricalStatsAsync(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats for indicated character.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStats200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetHistoricalStats200Response>> Destiny2GetHistoricalStatsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStatsDefinition200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetHistoricalStatsDefinition200Response> Destiny2GetHistoricalStatsDefinitionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets historical stats definitions.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStatsDefinition200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetHistoricalStatsDefinition200Response>> Destiny2GetHistoricalStatsDefinitionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStatsForAccount200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetHistoricalStatsForAccount200Response> Destiny2GetHistoricalStatsForAccountAsync(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets aggregate historical stats organized around each character for a given account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStatsForAccount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetHistoricalStatsForAccount200Response>> Destiny2GetHistoricalStatsForAccountWithHttpInfoAsync(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetItem200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetItem200Response> Destiny2GetItemAsync(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetItem200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetItem200Response>> Destiny2GetItemWithHttpInfoAsync(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsAsync(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetLeaderboardsWithHttpInfoAsync(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsForCharacterAsync(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetLeaderboardsForCharacterWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetLinkedProfiles200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetLinkedProfiles200Response> Destiny2GetLinkedProfilesAsync(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetLinkedProfiles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetLinkedProfiles200Response>> Destiny2GetLinkedProfilesWithHttpInfoAsync(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPostGameCarnageReport200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetPostGameCarnageReport200Response> Destiny2GetPostGameCarnageReportAsync(long activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the available post game carnage report for the activity ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPostGameCarnageReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetPostGameCarnageReport200Response>> Destiny2GetPostGameCarnageReportWithHttpInfoAsync(long activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetProfile200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetProfile200Response> Destiny2GetProfileAsync(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Destiny Profile information for the supplied membership.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetProfile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetProfile200Response>> Destiny2GetProfileWithHttpInfoAsync(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicMilestoneContent200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetPublicMilestoneContent200Response> Destiny2GetPublicMilestoneContentAsync(int milestoneHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets custom localized content for the milestone of the given hash, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicMilestoneContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetPublicMilestoneContent200Response>> Destiny2GetPublicMilestoneContentWithHttpInfoAsync(int milestoneHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicMilestones200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetPublicMilestones200Response> Destiny2GetPublicMilestonesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets public information about currently available Milestones.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicMilestones200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetPublicMilestones200Response>> Destiny2GetPublicMilestonesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicVendors200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetPublicVendors200Response> Destiny2GetPublicVendorsAsync(List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicVendors200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetPublicVendors200Response>> Destiny2GetPublicVendorsWithHttpInfoAsync(List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetUniqueWeaponHistory200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetUniqueWeaponHistory200Response> Destiny2GetUniqueWeaponHistoryAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets details about unique weapon usage, including all exotic weapons.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetUniqueWeaponHistory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetUniqueWeaponHistory200Response>> Destiny2GetUniqueWeaponHistoryWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetVendor200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetVendor200Response> Destiny2GetVendorAsync(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the details of a specific Vendor.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetVendor200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetVendor200Response>> Destiny2GetVendorWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetVendors200Response</returns>
        System.Threading.Tasks.Task<Destiny2GetVendors200Response> Destiny2GetVendorsAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetVendors200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2GetVendors200Response>> Destiny2GetVendorsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2InsertSocketPlug200Response</returns>
        System.Threading.Tasks.Task<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugAsync(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2InsertSocketPlug200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2InsertSocketPlug200Response>> Destiny2InsertSocketPlugWithHttpInfoAsync(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2InsertSocketPlug200Response</returns>
        System.Threading.Tasks.Task<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugFreeAsync(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2InsertSocketPlug200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2InsertSocketPlug200Response>> Destiny2InsertSocketPlugFreeWithHttpInfoAsync(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2PullFromPostmasterAsync(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2PullFromPostmasterWithHttpInfoAsync(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2ReportOffensivePostGameCarnageReportPlayerAsync(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfoAsync(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2SearchDestinyEntities200Response</returns>
        System.Threading.Tasks.Task<Destiny2SearchDestinyEntities200Response> Destiny2SearchDestinyEntitiesAsync(string searchTerm, string type, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a page list of Destiny items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2SearchDestinyEntities200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2SearchDestinyEntities200Response>> Destiny2SearchDestinyEntitiesWithHttpInfoAsync(string searchTerm, string type, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        System.Threading.Tasks.Task<Destiny2SearchDestinyPlayerByBungieName200Response> Destiny2SearchDestinyPlayerByBungieNameAsync(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2SearchDestinyPlayerByBungieName200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response>> Destiny2SearchDestinyPlayerByBungieNameWithHttpInfoAsync(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SetItemLockStateAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2SetItemLockStateWithHttpInfoAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SetQuestTrackedStateAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2SetQuestTrackedStateWithHttpInfoAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Snapshot a loadout with the currently equipped items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SnapshotLoadoutAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Snapshot a loadout with the currently equipped items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2SnapshotLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2TransferItemAsync(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2TransferItemWithHttpInfoAsync(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the color, icon, and name of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2UpdateLoadoutIdentifiersAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the color, icon, and name of a loadout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> Destiny2UpdateLoadoutIdentifiersWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestiny2Api : IDestiny2ApiSync, IDestiny2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Destiny2Api : IDestiny2Api
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Destiny2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Destiny2Api(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Destiny2Api(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Destiny2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public Destiny2Api(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2AwaGetActionToken200Response</returns>
        public Destiny2AwaGetActionToken200Response Destiny2AwaGetActionToken(string correlationId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2AwaGetActionToken200Response> localVarResponse = Destiny2AwaGetActionTokenWithHttpInfo(correlationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2AwaGetActionToken200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2AwaGetActionToken200Response> Destiny2AwaGetActionTokenWithHttpInfo(string correlationId, int operationIndex = 0)
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'correlationId' when calling Destiny2Api->Destiny2AwaGetActionToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("correlationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(correlationId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaGetActionToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2AwaGetActionToken200Response>("/Destiny2/Awa/GetActionToken/{correlationId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaGetActionToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2AwaGetActionToken200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2AwaGetActionToken200Response> Destiny2AwaGetActionTokenAsync(string correlationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2AwaGetActionToken200Response> localVarResponse = await Destiny2AwaGetActionTokenWithHttpInfoAsync(correlationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the action token if user approves the request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">The identifier for the advanced write action request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2AwaGetActionToken200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2AwaGetActionToken200Response>> Destiny2AwaGetActionTokenWithHttpInfoAsync(string correlationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'correlationId' when calling Destiny2Api->Destiny2AwaGetActionToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("correlationId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(correlationId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaGetActionToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2AwaGetActionToken200Response>("/Destiny2/Awa/GetActionToken/{correlationId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaGetActionToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2AwaInitializeRequest200Response</returns>
        public Destiny2AwaInitializeRequest200Response Destiny2AwaInitializeRequest(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2AwaInitializeRequest200Response> localVarResponse = Destiny2AwaInitializeRequestWithHttpInfo(destinyAdvancedAwaPermissionRequested);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2AwaInitializeRequest200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2AwaInitializeRequest200Response> Destiny2AwaInitializeRequestWithHttpInfo(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0)
        {
            // verify the required parameter 'destinyAdvancedAwaPermissionRequested' is set
            if (destinyAdvancedAwaPermissionRequested == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyAdvancedAwaPermissionRequested' when calling Destiny2Api->Destiny2AwaInitializeRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyAdvancedAwaPermissionRequested;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaInitializeRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Destiny2AwaInitializeRequest200Response>("/Destiny2/Awa/Initialize/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaInitializeRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2AwaInitializeRequest200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2AwaInitializeRequest200Response> Destiny2AwaInitializeRequestAsync(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2AwaInitializeRequest200Response> localVarResponse = await Destiny2AwaInitializeRequestWithHttpInfoAsync(destinyAdvancedAwaPermissionRequested, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Initialize a request to perform an advanced write action.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaPermissionRequested"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2AwaInitializeRequest200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2AwaInitializeRequest200Response>> Destiny2AwaInitializeRequestWithHttpInfoAsync(DestinyAdvancedAwaPermissionRequested destinyAdvancedAwaPermissionRequested, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyAdvancedAwaPermissionRequested' is set
            if (destinyAdvancedAwaPermissionRequested == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyAdvancedAwaPermissionRequested' when calling Destiny2Api->Destiny2AwaInitializeRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyAdvancedAwaPermissionRequested;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaInitializeRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Destiny2AwaInitializeRequest200Response>("/Destiny2/Awa/Initialize/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaInitializeRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2AwaProvideAuthorizationResult(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2AwaProvideAuthorizationResultWithHttpInfo(destinyAdvancedAwaUserResponse);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2AwaProvideAuthorizationResultWithHttpInfo(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0)
        {
            // verify the required parameter 'destinyAdvancedAwaUserResponse' is set
            if (destinyAdvancedAwaUserResponse == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyAdvancedAwaUserResponse' when calling Destiny2Api->Destiny2AwaProvideAuthorizationResult");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyAdvancedAwaUserResponse;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaProvideAuthorizationResult";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Awa/AwaProvideAuthorizationResult/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaProvideAuthorizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2AwaProvideAuthorizationResultAsync(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2AwaProvideAuthorizationResultWithHttpInfoAsync(destinyAdvancedAwaUserResponse, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyAdvancedAwaUserResponse"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2AwaProvideAuthorizationResultWithHttpInfoAsync(DestinyAdvancedAwaUserResponse destinyAdvancedAwaUserResponse, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyAdvancedAwaUserResponse' is set
            if (destinyAdvancedAwaUserResponse == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyAdvancedAwaUserResponse' when calling Destiny2Api->Destiny2AwaProvideAuthorizationResult");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyAdvancedAwaUserResponse;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2AwaProvideAuthorizationResult";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Awa/AwaProvideAuthorizationResult/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2AwaProvideAuthorizationResult", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clear the identifiers and items of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2ClearLoadout(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2ClearLoadoutWithHttpInfo(destinyRequestsActionsDestinyLoadoutActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Clear the identifiers and items of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2ClearLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' when calling Destiny2Api->Destiny2ClearLoadout");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2ClearLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/ClearLoadout/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2ClearLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Clear the identifiers and items of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2ClearLoadoutAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2ClearLoadoutWithHttpInfoAsync(destinyRequestsActionsDestinyLoadoutActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Clear the identifiers and items of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2ClearLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' when calling Destiny2Api->Destiny2ClearLoadout");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2ClearLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/ClearLoadout/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2ClearLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2EquipItem(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2EquipItemWithHttpInfo(destinyRequestsActionsDestinyItemActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2EquipItemWithHttpInfo(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemActionRequest' is set
            if (destinyRequestsActionsDestinyItemActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemActionRequest' when calling Destiny2Api->Destiny2EquipItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/EquipItem/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2EquipItemAsync(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2EquipItemWithHttpInfoAsync(destinyRequestsActionsDestinyItemActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2EquipItemWithHttpInfoAsync(DestinyRequestsActionsDestinyItemActionRequest destinyRequestsActionsDestinyItemActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemActionRequest' is set
            if (destinyRequestsActionsDestinyItemActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemActionRequest' when calling Destiny2Api->Destiny2EquipItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/EquipItem/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2EquipItems200Response</returns>
        public Destiny2EquipItems200Response Destiny2EquipItems(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2EquipItems200Response> localVarResponse = Destiny2EquipItemsWithHttpInfo(destinyRequestsActionsDestinyItemSetActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2EquipItems200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2EquipItems200Response> Destiny2EquipItemsWithHttpInfo(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemSetActionRequest' is set
            if (destinyRequestsActionsDestinyItemSetActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemSetActionRequest' when calling Destiny2Api->Destiny2EquipItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemSetActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Destiny2EquipItems200Response>("/Destiny2/Actions/Items/EquipItems/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2EquipItems200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2EquipItems200Response> Destiny2EquipItemsAsync(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2EquipItems200Response> localVarResponse = await Destiny2EquipItemsWithHttpInfoAsync(destinyRequestsActionsDestinyItemSetActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemSetActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2EquipItems200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2EquipItems200Response>> Destiny2EquipItemsWithHttpInfoAsync(DestinyRequestsActionsDestinyItemSetActionRequest destinyRequestsActionsDestinyItemSetActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemSetActionRequest' is set
            if (destinyRequestsActionsDestinyItemSetActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemSetActionRequest' when calling Destiny2Api->Destiny2EquipItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemSetActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Destiny2EquipItems200Response>("/Destiny2/Actions/Items/EquipItems/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2EquipLoadout(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2EquipLoadoutWithHttpInfo(destinyRequestsActionsDestinyLoadoutActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2EquipLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' when calling Destiny2Api->Destiny2EquipLoadout");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/EquipLoadout/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2EquipLoadoutAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2EquipLoadoutWithHttpInfoAsync(destinyRequestsActionsDestinyLoadoutActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2EquipLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutActionRequest destinyRequestsActionsDestinyLoadoutActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutActionRequest' when calling Destiny2Api->Destiny2EquipLoadout");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2EquipLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/EquipLoadout/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2EquipLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetActivityHistory200Response</returns>
        public Destiny2GetActivityHistory200Response Destiny2GetActivityHistory(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetActivityHistory200Response> localVarResponse = Destiny2GetActivityHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetActivityHistory200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetActivityHistory200Response> Destiny2GetActivityHistoryWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetActivityHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetActivityHistory200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetActivityHistory200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetActivityHistory200Response> Destiny2GetActivityHistoryAsync(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetActivityHistory200Response> localVarResponse = await Destiny2GetActivityHistoryWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, count, mode, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets activity history stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="count">Number of rows to return (optional)</param>
        /// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetActivityHistory200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetActivityHistory200Response>> Destiny2GetActivityHistoryWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int? count = default(int?), int? mode = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetActivityHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetActivityHistory200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetActivityHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetCharacter200Response</returns>
        public Destiny2GetCharacter200Response Destiny2GetCharacter(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetCharacter200Response> localVarResponse = Destiny2GetCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetCharacter200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetCharacter200Response> Destiny2GetCharacterWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetCharacter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetCharacter200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetCharacter200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetCharacter200Response> Destiny2GetCharacterAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetCharacter200Response> localVarResponse = await Destiny2GetCharacterWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns character information for the supplied character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">ID of the character.</param>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetCharacter200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetCharacter200Response>> Destiny2GetCharacterWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetCharacter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetCharacter200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetCharacter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanAggregateStats200Response</returns>
        public Destiny2GetClanAggregateStats200Response Destiny2GetClanAggregateStats(long groupId, string? modes = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanAggregateStats200Response> localVarResponse = Destiny2GetClanAggregateStatsWithHttpInfo(groupId, modes);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanAggregateStats200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanAggregateStats200Response> Destiny2GetClanAggregateStatsWithHttpInfo(long groupId, string? modes = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanAggregateStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanAggregateStats200Response>("/Destiny2/Stats/AggregateClanStats/{groupId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanAggregateStats200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanAggregateStats200Response> Destiny2GetClanAggregateStatsAsync(long groupId, string? modes = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanAggregateStats200Response> localVarResponse = await Destiny2GetClanAggregateStatsWithHttpInfoAsync(groupId, modes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanAggregateStats200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanAggregateStats200Response>> Destiny2GetClanAggregateStatsWithHttpInfoAsync(long groupId, string? modes = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanAggregateStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanAggregateStats200Response>("/Destiny2/Stats/AggregateClanStats/{groupId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanAggregateStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the dictionary of values for the Clan Banner
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanBannerSource200Response</returns>
        public Destiny2GetClanBannerSource200Response Destiny2GetClanBannerSource(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanBannerSource200Response> localVarResponse = Destiny2GetClanBannerSourceWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the dictionary of values for the Clan Banner
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanBannerSource200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanBannerSource200Response> Destiny2GetClanBannerSourceWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanBannerSource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanBannerSource200Response>("/Destiny2/Clan/ClanBannerDictionary/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanBannerSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the dictionary of values for the Clan Banner
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanBannerSource200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanBannerSource200Response> Destiny2GetClanBannerSourceAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanBannerSource200Response> localVarResponse = await Destiny2GetClanBannerSourceWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the dictionary of values for the Clan Banner
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanBannerSource200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanBannerSource200Response>> Destiny2GetClanBannerSourceWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanBannerSource";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanBannerSource200Response>("/Destiny2/Clan/ClanBannerDictionary/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanBannerSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        public Destiny2GetClanLeaderboards200Response Destiny2GetClanLeaderboards(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = Destiny2GetClanLeaderboardsWithHttpInfo(groupId, maxtop, modes, statid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetClanLeaderboardsWithHttpInfo(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanLeaderboards";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanLeaderboards200Response>("/Destiny2/Stats/Leaderboards/Clans/{groupId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetClanLeaderboardsAsync(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = await Destiny2GetClanLeaderboardsWithHttpInfoAsync(groupId, maxtop, modes, statid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetClanLeaderboardsWithHttpInfoAsync(long groupId, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanLeaderboards";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanLeaderboards200Response>("/Destiny2/Stats/Leaderboards/Clans/{groupId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanLeaderboards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanWeeklyRewardState200Response</returns>
        public Destiny2GetClanWeeklyRewardState200Response Destiny2GetClanWeeklyRewardState(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanWeeklyRewardState200Response> localVarResponse = Destiny2GetClanWeeklyRewardStateWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanWeeklyRewardState200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanWeeklyRewardState200Response> Destiny2GetClanWeeklyRewardStateWithHttpInfo(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanWeeklyRewardState";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanWeeklyRewardState200Response>("/Destiny2/Clan/{groupId}/WeeklyRewardState/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanWeeklyRewardState200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanWeeklyRewardState200Response> Destiny2GetClanWeeklyRewardStateAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanWeeklyRewardState200Response> localVarResponse = await Destiny2GetClanWeeklyRewardStateWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">A valid group id of clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanWeeklyRewardState200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanWeeklyRewardState200Response>> Destiny2GetClanWeeklyRewardStateWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetClanWeeklyRewardState";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanWeeklyRewardState200Response>("/Destiny2/Clan/{groupId}/WeeklyRewardState/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetClanWeeklyRewardState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetCollectibleNodeDetails200Response</returns>
        public Destiny2GetCollectibleNodeDetails200Response Destiny2GetCollectibleNodeDetails(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetCollectibleNodeDetails200Response> localVarResponse = Destiny2GetCollectibleNodeDetailsWithHttpInfo(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetCollectibleNodeDetails200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetCollectibleNodeDetails200Response> Destiny2GetCollectibleNodeDetailsWithHttpInfo(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectiblePresentationNodeHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(collectiblePresentationNodeHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetCollectibleNodeDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetCollectibleNodeDetails200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetCollectibleNodeDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetCollectibleNodeDetails200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetCollectibleNodeDetails200Response> Destiny2GetCollectibleNodeDetailsAsync(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetCollectibleNodeDetails200Response> localVarResponse = await Destiny2GetCollectibleNodeDetailsWithHttpInfoAsync(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting collectible detail info.</param>
        /// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetCollectibleNodeDetails200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetCollectibleNodeDetails200Response>> Destiny2GetCollectibleNodeDetailsWithHttpInfoAsync(long characterId, int collectiblePresentationNodeHash, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("collectiblePresentationNodeHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(collectiblePresentationNodeHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetCollectibleNodeDetails";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetCollectibleNodeDetails200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetCollectibleNodeDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyAggregateActivityStats200Response</returns>
        public Destiny2GetDestinyAggregateActivityStats200Response Destiny2GetDestinyAggregateActivityStats(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> localVarResponse = Destiny2GetDestinyAggregateActivityStatsWithHttpInfo(characterId, destinyMembershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyAggregateActivityStats200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> Destiny2GetDestinyAggregateActivityStatsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyAggregateActivityStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetDestinyAggregateActivityStats200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyAggregateActivityStats200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetDestinyAggregateActivityStats200Response> Destiny2GetDestinyAggregateActivityStatsAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> localVarResponse = await Destiny2GetDestinyAggregateActivityStatsWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all activities the character has participated in together with aggregate statistics for those activities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character whose activities should be returned.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyAggregateActivityStats200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response>> Destiny2GetDestinyAggregateActivityStatsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyAggregateActivityStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetDestinyAggregateActivityStats200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyAggregateActivityStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyEntityDefinition200Response</returns>
        public Destiny2GetDestinyEntityDefinition200Response Destiny2GetDestinyEntityDefinition(string entityType, int hashIdentifier, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyEntityDefinition200Response> localVarResponse = Destiny2GetDestinyEntityDefinitionWithHttpInfo(entityType, hashIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyEntityDefinition200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyEntityDefinition200Response> Destiny2GetDestinyEntityDefinitionWithHttpInfo(string entityType, int hashIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("hashIdentifier", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hashIdentifier)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyEntityDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetDestinyEntityDefinition200Response>("/Destiny2/Manifest/{entityType}/{hashIdentifier}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyEntityDefinition200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetDestinyEntityDefinition200Response> Destiny2GetDestinyEntityDefinitionAsync(string entityType, int hashIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyEntityDefinition200Response> localVarResponse = await Destiny2GetDestinyEntityDefinitionWithHttpInfoAsync(entityType, hashIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
        /// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyEntityDefinition200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyEntityDefinition200Response>> Destiny2GetDestinyEntityDefinitionWithHttpInfoAsync(string entityType, int hashIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entityType' when calling Destiny2Api->Destiny2GetDestinyEntityDefinition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("entityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(entityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("hashIdentifier", Org.OpenAPITools.Client.ClientUtils.ParameterToString(hashIdentifier)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyEntityDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetDestinyEntityDefinition200Response>("/Destiny2/Manifest/{entityType}/{hashIdentifier}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyEntityDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetDestinyManifest200Response</returns>
        public Destiny2GetDestinyManifest200Response Destiny2GetDestinyManifest(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyManifest200Response> localVarResponse = Destiny2GetDestinyManifestWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetDestinyManifest200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyManifest200Response> Destiny2GetDestinyManifestWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyManifest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetDestinyManifest200Response>("/Destiny2/Manifest/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetDestinyManifest200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetDestinyManifest200Response> Destiny2GetDestinyManifestAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyManifest200Response> localVarResponse = await Destiny2GetDestinyManifestWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current version of the manifest as a json object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetDestinyManifest200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetDestinyManifest200Response>> Destiny2GetDestinyManifestWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetDestinyManifest";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetDestinyManifest200Response>("/Destiny2/Manifest/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetDestinyManifest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStats200Response</returns>
        public Destiny2GetHistoricalStats200Response Destiny2GetHistoricalStats(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStats200Response> localVarResponse = Destiny2GetHistoricalStatsWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStats200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStats200Response> Destiny2GetHistoricalStatsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (dayend != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dayend", dayend));
            }
            if (daystart != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daystart", daystart));
            }
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "groups", groups));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "modes", modes));
            }
            if (periodType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periodType", periodType));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetHistoricalStats200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStats200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetHistoricalStats200Response> Destiny2GetHistoricalStatsAsync(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStats200Response> localVarResponse = await Destiny2GetHistoricalStatsWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats for indicated character.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)</param>
        /// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)</param>
        /// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStats200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStats200Response>> Destiny2GetHistoricalStatsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, DateTime? dayend = default(DateTime?), DateTime? daystart = default(DateTime?), List<int>? groups = default(List<int>?), List<int>? modes = default(List<int>?), int? periodType = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (dayend != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "dayend", dayend));
            }
            if (daystart != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daystart", daystart));
            }
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "groups", groups));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "modes", modes));
            }
            if (periodType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "periodType", periodType));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetHistoricalStats200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStatsDefinition200Response</returns>
        public Destiny2GetHistoricalStatsDefinition200Response Destiny2GetHistoricalStatsDefinition(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> localVarResponse = Destiny2GetHistoricalStatsDefinitionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStatsDefinition200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> Destiny2GetHistoricalStatsDefinitionWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStatsDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetHistoricalStatsDefinition200Response>("/Destiny2/Stats/Definition/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStatsDefinition200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetHistoricalStatsDefinition200Response> Destiny2GetHistoricalStatsDefinitionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> localVarResponse = await Destiny2GetHistoricalStatsDefinitionWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets historical stats definitions.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStatsDefinition200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsDefinition200Response>> Destiny2GetHistoricalStatsDefinitionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStatsDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetHistoricalStatsDefinition200Response>("/Destiny2/Stats/Definition/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStatsDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetHistoricalStatsForAccount200Response</returns>
        public Destiny2GetHistoricalStatsForAccount200Response Destiny2GetHistoricalStatsForAccount(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> localVarResponse = Destiny2GetHistoricalStatsForAccountWithHttpInfo(destinyMembershipId, membershipType, groups);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetHistoricalStatsForAccount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> Destiny2GetHistoricalStatsForAccountWithHttpInfo(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "groups", groups));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStatsForAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetHistoricalStatsForAccount200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetHistoricalStatsForAccount200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetHistoricalStatsForAccount200Response> Destiny2GetHistoricalStatsForAccountAsync(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> localVarResponse = await Destiny2GetHistoricalStatsForAccountWithHttpInfoAsync(destinyMembershipId, membershipType, groups, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets aggregate historical stats organized around each character for a given account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetHistoricalStatsForAccount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetHistoricalStatsForAccount200Response>> Destiny2GetHistoricalStatsForAccountWithHttpInfoAsync(long destinyMembershipId, int membershipType, List<int>? groups = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (groups != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "groups", groups));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetHistoricalStatsForAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetHistoricalStatsForAccount200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetHistoricalStatsForAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetItem200Response</returns>
        public Destiny2GetItem200Response Destiny2GetItem(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetItem200Response> localVarResponse = Destiny2GetItemWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetItem200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetItem200Response> Destiny2GetItemWithHttpInfo(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemInstanceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetItem200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetItem200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetItem200Response> Destiny2GetItemAsync(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetItem200Response> localVarResponse = await Destiny2GetItemWithHttpInfoAsync(destinyMembershipId, itemInstanceId, membershipType, components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
        /// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetItem200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetItem200Response>> Destiny2GetItemWithHttpInfoAsync(long destinyMembershipId, long itemInstanceId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("itemInstanceId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(itemInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetItem";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetItem200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        public Destiny2GetClanLeaderboards200Response Destiny2GetLeaderboards(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = Destiny2GetLeaderboardsWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsWithHttpInfo(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLeaderboards";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanLeaderboards200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsAsync(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = await Destiny2GetLeaderboardsWithHttpInfoAsync(destinyMembershipId, membershipType, maxtop, modes, statid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetLeaderboardsWithHttpInfoAsync(long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLeaderboards";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanLeaderboards200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLeaderboards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetClanLeaderboards200Response</returns>
        public Destiny2GetClanLeaderboards200Response Destiny2GetLeaderboardsForCharacter(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = Destiny2GetLeaderboardsForCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetClanLeaderboards200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsForCharacterWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLeaderboardsForCharacter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetClanLeaderboards200Response>("/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetClanLeaderboards200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetClanLeaderboards200Response> Destiny2GetLeaderboardsForCharacterAsync(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResponse = await Destiny2GetLeaderboardsForCharacterWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)</param>
        /// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)</param>
        /// <param name="statid">ID of stat to return rather than returning all Leaderboard stats. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetClanLeaderboards200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetClanLeaderboards200Response>> Destiny2GetLeaderboardsForCharacterWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int? maxtop = default(int?), string? modes = default(string?), string? statid = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (maxtop != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxtop", maxtop));
            }
            if (modes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "modes", modes));
            }
            if (statid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "statid", statid));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLeaderboardsForCharacter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetClanLeaderboards200Response>("/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLeaderboardsForCharacter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetLinkedProfiles200Response</returns>
        public Destiny2GetLinkedProfiles200Response Destiny2GetLinkedProfiles(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetLinkedProfiles200Response> localVarResponse = Destiny2GetLinkedProfilesWithHttpInfo(membershipId, membershipType, getAllMemberships);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetLinkedProfiles200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetLinkedProfiles200Response> Destiny2GetLinkedProfilesWithHttpInfo(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (getAllMemberships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "getAllMemberships", getAllMemberships));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLinkedProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetLinkedProfiles200Response>("/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLinkedProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetLinkedProfiles200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetLinkedProfiles200Response> Destiny2GetLinkedProfilesAsync(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetLinkedProfiles200Response> localVarResponse = await Destiny2GetLinkedProfilesWithHttpInfoAsync(membershipId, membershipType, getAllMemberships, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work!</param>
        /// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
        /// <param name="getAllMemberships">(optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetLinkedProfiles200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetLinkedProfiles200Response>> Destiny2GetLinkedProfilesWithHttpInfoAsync(long membershipId, int membershipType, bool? getAllMemberships = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (getAllMemberships != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "getAllMemberships", getAllMemberships));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetLinkedProfiles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetLinkedProfiles200Response>("/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetLinkedProfiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPostGameCarnageReport200Response</returns>
        public Destiny2GetPostGameCarnageReport200Response Destiny2GetPostGameCarnageReport(long activityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPostGameCarnageReport200Response> localVarResponse = Destiny2GetPostGameCarnageReportWithHttpInfo(activityId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPostGameCarnageReport200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetPostGameCarnageReport200Response> Destiny2GetPostGameCarnageReportWithHttpInfo(long activityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPostGameCarnageReport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetPostGameCarnageReport200Response>("/Destiny2/Stats/PostGameCarnageReport/{activityId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPostGameCarnageReport200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetPostGameCarnageReport200Response> Destiny2GetPostGameCarnageReportAsync(long activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPostGameCarnageReport200Response> localVarResponse = await Destiny2GetPostGameCarnageReportWithHttpInfoAsync(activityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the available post game carnage report for the activity ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPostGameCarnageReport200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetPostGameCarnageReport200Response>> Destiny2GetPostGameCarnageReportWithHttpInfoAsync(long activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPostGameCarnageReport";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetPostGameCarnageReport200Response>("/Destiny2/Stats/PostGameCarnageReport/{activityId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPostGameCarnageReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetProfile200Response</returns>
        public Destiny2GetProfile200Response Destiny2GetProfile(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetProfile200Response> localVarResponse = Destiny2GetProfileWithHttpInfo(destinyMembershipId, membershipType, components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetProfile200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetProfile200Response> Destiny2GetProfileWithHttpInfo(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetProfile200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetProfile200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetProfile200Response> Destiny2GetProfileAsync(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetProfile200Response> localVarResponse = await Destiny2GetProfileWithHttpInfoAsync(destinyMembershipId, membershipType, components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Destiny Profile information for the supplied membership.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyMembershipId">Destiny membership ID.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetProfile200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetProfile200Response>> Destiny2GetProfileWithHttpInfoAsync(long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetProfile";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetProfile200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetProfile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicMilestoneContent200Response</returns>
        public Destiny2GetPublicMilestoneContent200Response Destiny2GetPublicMilestoneContent(int milestoneHash, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestoneContent200Response> localVarResponse = Destiny2GetPublicMilestoneContentWithHttpInfo(milestoneHash);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicMilestoneContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestoneContent200Response> Destiny2GetPublicMilestoneContentWithHttpInfo(int milestoneHash, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("milestoneHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(milestoneHash)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicMilestoneContent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetPublicMilestoneContent200Response>("/Destiny2/Milestones/{milestoneHash}/Content/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicMilestoneContent200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetPublicMilestoneContent200Response> Destiny2GetPublicMilestoneContentAsync(int milestoneHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestoneContent200Response> localVarResponse = await Destiny2GetPublicMilestoneContentWithHttpInfoAsync(milestoneHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets custom localized content for the milestone of the given hash, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicMilestoneContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestoneContent200Response>> Destiny2GetPublicMilestoneContentWithHttpInfoAsync(int milestoneHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("milestoneHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(milestoneHash)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicMilestoneContent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetPublicMilestoneContent200Response>("/Destiny2/Milestones/{milestoneHash}/Content/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicMilestoneContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicMilestones200Response</returns>
        public Destiny2GetPublicMilestones200Response Destiny2GetPublicMilestones(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestones200Response> localVarResponse = Destiny2GetPublicMilestonesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicMilestones200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestones200Response> Destiny2GetPublicMilestonesWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicMilestones";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetPublicMilestones200Response>("/Destiny2/Milestones/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicMilestones200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetPublicMilestones200Response> Destiny2GetPublicMilestonesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestones200Response> localVarResponse = await Destiny2GetPublicMilestonesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets public information about currently available Milestones.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicMilestones200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicMilestones200Response>> Destiny2GetPublicMilestonesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicMilestones";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetPublicMilestones200Response>("/Destiny2/Milestones/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicMilestones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetPublicVendors200Response</returns>
        public Destiny2GetPublicVendors200Response Destiny2GetPublicVendors(List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicVendors200Response> localVarResponse = Destiny2GetPublicVendorsWithHttpInfo(components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetPublicVendors200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicVendors200Response> Destiny2GetPublicVendorsWithHttpInfo(List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetPublicVendors200Response>("/Destiny2/Vendors/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetPublicVendors200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetPublicVendors200Response> Destiny2GetPublicVendorsAsync(List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicVendors200Response> localVarResponse = await Destiny2GetPublicVendorsWithHttpInfoAsync(components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetPublicVendors200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetPublicVendors200Response>> Destiny2GetPublicVendorsWithHttpInfoAsync(List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetPublicVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetPublicVendors200Response>("/Destiny2/Vendors/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetPublicVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetUniqueWeaponHistory200Response</returns>
        public Destiny2GetUniqueWeaponHistory200Response Destiny2GetUniqueWeaponHistory(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetUniqueWeaponHistory200Response> localVarResponse = Destiny2GetUniqueWeaponHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetUniqueWeaponHistory200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetUniqueWeaponHistory200Response> Destiny2GetUniqueWeaponHistoryWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetUniqueWeaponHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetUniqueWeaponHistory200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetUniqueWeaponHistory200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetUniqueWeaponHistory200Response> Destiny2GetUniqueWeaponHistoryAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetUniqueWeaponHistory200Response> localVarResponse = await Destiny2GetUniqueWeaponHistoryWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets details about unique weapon usage, including all exotic weapons.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The id of the character to retrieve.</param>
        /// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetUniqueWeaponHistory200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetUniqueWeaponHistory200Response>> Destiny2GetUniqueWeaponHistoryWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetUniqueWeaponHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetUniqueWeaponHistory200Response>("/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetUniqueWeaponHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetVendor200Response</returns>
        public Destiny2GetVendor200Response Destiny2GetVendor(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendor200Response> localVarResponse = Destiny2GetVendorWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetVendor200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendor200Response> Destiny2GetVendorWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("vendorHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(vendorHash)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetVendor";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetVendor200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetVendor200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetVendor200Response> Destiny2GetVendorAsync(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendor200Response> localVarResponse = await Destiny2GetVendorWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, vendorHash, components, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the details of a specific Vendor.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetVendor200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendor200Response>> Destiny2GetVendorWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, int vendorHash, List<int>? components = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("vendorHash", Org.OpenAPITools.Client.ClientUtils.ParameterToString(vendorHash)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetVendor";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetVendor200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetVendor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2GetVendors200Response</returns>
        public Destiny2GetVendors200Response Destiny2GetVendors(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendors200Response> localVarResponse = Destiny2GetVendorsWithHttpInfo(characterId, destinyMembershipId, membershipType, components, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2GetVendors200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendors200Response> Destiny2GetVendorsWithHttpInfo(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2GetVendors200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2GetVendors200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2GetVendors200Response> Destiny2GetVendorsAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendors200Response> localVarResponse = await Destiny2GetVendorsWithHttpInfoAsync(characterId, destinyMembershipId, membershipType, components, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="characterId">The Destiny Character ID of the character for whom we&#39;re getting vendor info.</param>
        /// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
        /// <param name="membershipType">A valid non-BungieNet membership type.</param>
        /// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)</param>
        /// <param name="filter">The filter of what vendors and items to return, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2GetVendors200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2GetVendors200Response>> Destiny2GetVendorsWithHttpInfoAsync(long characterId, long destinyMembershipId, int membershipType, List<int>? components = default(List<int>?), int? filter = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("characterId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(characterId)); // path parameter
            localVarRequestOptions.PathParameters.Add("destinyMembershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(destinyMembershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            if (components != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "components", components));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2GetVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2GetVendors200Response>("/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2GetVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2InsertSocketPlug200Response</returns>
        public Destiny2InsertSocketPlug200Response Destiny2InsertSocketPlug(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> localVarResponse = Destiny2InsertSocketPlugWithHttpInfo(destinyRequestsActionsDestinyInsertPlugsActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2InsertSocketPlug200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugWithHttpInfo(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyInsertPlugsActionRequest' is set
            if (destinyRequestsActionsDestinyInsertPlugsActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyInsertPlugsActionRequest' when calling Destiny2Api->Destiny2InsertSocketPlug");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyInsertPlugsActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2InsertSocketPlug";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Destiny2InsertSocketPlug200Response>("/Destiny2/Actions/Items/InsertSocketPlug/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2InsertSocketPlug200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugAsync(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> localVarResponse = await Destiny2InsertSocketPlugWithHttpInfoAsync(destinyRequestsActionsDestinyInsertPlugsActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2InsertSocketPlug200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response>> Destiny2InsertSocketPlugWithHttpInfoAsync(DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyInsertPlugsActionRequest' is set
            if (destinyRequestsActionsDestinyInsertPlugsActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyInsertPlugsActionRequest' when calling Destiny2Api->Destiny2InsertSocketPlug");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyInsertPlugsActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2InsertSocketPlug";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Destiny2InsertSocketPlug200Response>("/Destiny2/Actions/Items/InsertSocketPlug/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2InsertSocketPlug", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2InsertSocketPlug200Response</returns>
        public Destiny2InsertSocketPlug200Response Destiny2InsertSocketPlugFree(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> localVarResponse = Destiny2InsertSocketPlugFreeWithHttpInfo(destinyRequestsActionsDestinyInsertPlugsFreeActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2InsertSocketPlug200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugFreeWithHttpInfo(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyInsertPlugsFreeActionRequest' is set
            if (destinyRequestsActionsDestinyInsertPlugsFreeActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyInsertPlugsFreeActionRequest' when calling Destiny2Api->Destiny2InsertSocketPlugFree");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyInsertPlugsFreeActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2InsertSocketPlugFree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Destiny2InsertSocketPlug200Response>("/Destiny2/Actions/Items/InsertSocketPlugFree/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2InsertSocketPlugFree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2InsertSocketPlug200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2InsertSocketPlug200Response> Destiny2InsertSocketPlugFreeAsync(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response> localVarResponse = await Destiny2InsertSocketPlugFreeWithHttpInfoAsync(destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyInsertPlugsFreeActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2InsertSocketPlug200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2InsertSocketPlug200Response>> Destiny2InsertSocketPlugFreeWithHttpInfoAsync(DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest destinyRequestsActionsDestinyInsertPlugsFreeActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyInsertPlugsFreeActionRequest' is set
            if (destinyRequestsActionsDestinyInsertPlugsFreeActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyInsertPlugsFreeActionRequest' when calling Destiny2Api->Destiny2InsertSocketPlugFree");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyInsertPlugsFreeActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2InsertSocketPlugFree";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Destiny2InsertSocketPlug200Response>("/Destiny2/Actions/Items/InsertSocketPlugFree/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2InsertSocketPlugFree", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2PullFromPostmaster(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2PullFromPostmasterWithHttpInfo(destinyRequestsActionsDestinyPostmasterTransferRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2PullFromPostmasterWithHttpInfo(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyPostmasterTransferRequest' is set
            if (destinyRequestsActionsDestinyPostmasterTransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyPostmasterTransferRequest' when calling Destiny2Api->Destiny2PullFromPostmaster");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyPostmasterTransferRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2PullFromPostmaster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/PullFromPostmaster/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2PullFromPostmaster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2PullFromPostmasterAsync(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2PullFromPostmasterWithHttpInfoAsync(destinyRequestsActionsDestinyPostmasterTransferRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyPostmasterTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2PullFromPostmasterWithHttpInfoAsync(DestinyRequestsActionsDestinyPostmasterTransferRequest destinyRequestsActionsDestinyPostmasterTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyPostmasterTransferRequest' is set
            if (destinyRequestsActionsDestinyPostmasterTransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyPostmasterTransferRequest' when calling Destiny2Api->Destiny2PullFromPostmaster");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyPostmasterTransferRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2PullFromPostmaster";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/PullFromPostmaster/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2PullFromPostmaster", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2ReportOffensivePostGameCarnageReportPlayer(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(activityId, destinyReportingRequestsDestinyReportOffensePgcrRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyReportingRequestsDestinyReportOffensePgcrRequest' is set
            if (destinyReportingRequestsDestinyReportOffensePgcrRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyReportingRequestsDestinyReportOffensePgcrRequest' when calling Destiny2Api->Destiny2ReportOffensivePostGameCarnageReportPlayer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = destinyReportingRequestsDestinyReportOffensePgcrRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2ReportOffensivePostGameCarnageReportPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2ReportOffensivePostGameCarnageReportPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2ReportOffensivePostGameCarnageReportPlayerAsync(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfoAsync(activityId, destinyReportingRequestsDestinyReportOffensePgcrRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The ID of the activity where you ran into the brigand that you&#39;re reporting.</param>
        /// <param name="destinyReportingRequestsDestinyReportOffensePgcrRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfoAsync(long activityId, DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyReportingRequestsDestinyReportOffensePgcrRequest' is set
            if (destinyReportingRequestsDestinyReportOffensePgcrRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyReportingRequestsDestinyReportOffensePgcrRequest' when calling Destiny2Api->Destiny2ReportOffensivePostGameCarnageReportPlayer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = destinyReportingRequestsDestinyReportOffensePgcrRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2ReportOffensivePostGameCarnageReportPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2ReportOffensivePostGameCarnageReportPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2SearchDestinyEntities200Response</returns>
        public Destiny2SearchDestinyEntities200Response Destiny2SearchDestinyEntities(string searchTerm, string type, int? page = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyEntities200Response> localVarResponse = Destiny2SearchDestinyEntitiesWithHttpInfo(searchTerm, type, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2SearchDestinyEntities200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyEntities200Response> Destiny2SearchDestinyEntitiesWithHttpInfo(string searchTerm, string type, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchTerm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(searchTerm)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SearchDestinyEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Destiny2SearchDestinyEntities200Response>("/Destiny2/Armory/Search/{type}/{searchTerm}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2SearchDestinyEntities200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2SearchDestinyEntities200Response> Destiny2SearchDestinyEntitiesAsync(string searchTerm, string type, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyEntities200Response> localVarResponse = await Destiny2SearchDestinyEntitiesWithHttpInfoAsync(searchTerm, type, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a page list of Destiny items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
        /// <param name="type">The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;.</param>
        /// <param name="page">Page number to return, starting with 0. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2SearchDestinyEntities200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyEntities200Response>> Destiny2SearchDestinyEntitiesWithHttpInfoAsync(string searchTerm, string type, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'searchTerm' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling Destiny2Api->Destiny2SearchDestinyEntities");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchTerm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(searchTerm)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SearchDestinyEntities";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Destiny2SearchDestinyEntities200Response>("/Destiny2/Armory/Search/{type}/{searchTerm}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SearchDestinyEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        public Destiny2SearchDestinyPlayerByBungieName200Response Destiny2SearchDestinyPlayerByBungieName(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> localVarResponse = Destiny2SearchDestinyPlayerByBungieNameWithHttpInfo(membershipType, userExactSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> Destiny2SearchDestinyPlayerByBungieNameWithHttpInfo(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userExactSearchRequest' is set
            if (userExactSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userExactSearchRequest' when calling Destiny2Api->Destiny2SearchDestinyPlayerByBungieName");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = userExactSearchRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SearchDestinyPlayerByBungieName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Destiny2SearchDestinyPlayerByBungieName200Response>("/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SearchDestinyPlayerByBungieName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Destiny2SearchDestinyPlayerByBungieName200Response</returns>
        public async System.Threading.Tasks.Task<Destiny2SearchDestinyPlayerByBungieName200Response> Destiny2SearchDestinyPlayerByBungieNameAsync(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> localVarResponse = await Destiny2SearchDestinyPlayerByBungieNameWithHttpInfoAsync(membershipType, userExactSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
        /// <param name="userExactSearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Destiny2SearchDestinyPlayerByBungieName200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response>> Destiny2SearchDestinyPlayerByBungieNameWithHttpInfoAsync(int membershipType, UserExactSearchRequest userExactSearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userExactSearchRequest' is set
            if (userExactSearchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userExactSearchRequest' when calling Destiny2Api->Destiny2SearchDestinyPlayerByBungieName");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.Data = userExactSearchRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SearchDestinyPlayerByBungieName";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Destiny2SearchDestinyPlayerByBungieName200Response>("/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SearchDestinyPlayerByBungieName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2SetItemLockState(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2SetItemLockStateWithHttpInfo(destinyRequestsActionsDestinyItemStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2SetItemLockStateWithHttpInfo(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemStateRequest' is set
            if (destinyRequestsActionsDestinyItemStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemStateRequest' when calling Destiny2Api->Destiny2SetItemLockState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemStateRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SetItemLockState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/SetLockState/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SetItemLockStateAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2SetItemLockStateWithHttpInfoAsync(destinyRequestsActionsDestinyItemStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Lock State for an instanced item. You must have a valid Destiny Account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2SetItemLockStateWithHttpInfoAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemStateRequest' is set
            if (destinyRequestsActionsDestinyItemStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemStateRequest' when calling Destiny2Api->Destiny2SetItemLockState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemStateRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SetItemLockState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/SetLockState/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SetItemLockState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2SetQuestTrackedState(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2SetQuestTrackedStateWithHttpInfo(destinyRequestsActionsDestinyItemStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2SetQuestTrackedStateWithHttpInfo(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemStateRequest' is set
            if (destinyRequestsActionsDestinyItemStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemStateRequest' when calling Destiny2Api->Destiny2SetQuestTrackedState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemStateRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SetQuestTrackedState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/SetTrackedState/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SetQuestTrackedState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SetQuestTrackedStateAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2SetQuestTrackedStateWithHttpInfoAsync(destinyRequestsActionsDestinyItemStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyItemStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2SetQuestTrackedStateWithHttpInfoAsync(DestinyRequestsActionsDestinyItemStateRequest destinyRequestsActionsDestinyItemStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyItemStateRequest' is set
            if (destinyRequestsActionsDestinyItemStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyItemStateRequest' when calling Destiny2Api->Destiny2SetQuestTrackedState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyItemStateRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SetQuestTrackedState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/SetTrackedState/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SetQuestTrackedState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Snapshot a loadout with the currently equipped items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2SnapshotLoadout(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2SnapshotLoadoutWithHttpInfo(destinyRequestsActionsDestinyLoadoutUpdateActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Snapshot a loadout with the currently equipped items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2SnapshotLoadoutWithHttpInfo(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutUpdateActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' when calling Destiny2Api->Destiny2SnapshotLoadout");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutUpdateActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SnapshotLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/SnapshotLoadout/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SnapshotLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Snapshot a loadout with the currently equipped items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2SnapshotLoadoutAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2SnapshotLoadoutWithHttpInfoAsync(destinyRequestsActionsDestinyLoadoutUpdateActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Snapshot a loadout with the currently equipped items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2SnapshotLoadoutWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutUpdateActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' when calling Destiny2Api->Destiny2SnapshotLoadout");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutUpdateActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2SnapshotLoadout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/SnapshotLoadout/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2SnapshotLoadout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2TransferItem(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2TransferItemWithHttpInfo(destinyRequestsDestinyItemTransferRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2TransferItemWithHttpInfo(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsDestinyItemTransferRequest' is set
            if (destinyRequestsDestinyItemTransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsDestinyItemTransferRequest' when calling Destiny2Api->Destiny2TransferItem");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsDestinyItemTransferRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2TransferItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/TransferItem/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2TransferItemAsync(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2TransferItemWithHttpInfoAsync(destinyRequestsDestinyItemTransferRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsDestinyItemTransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2TransferItemWithHttpInfoAsync(DestinyRequestsDestinyItemTransferRequest destinyRequestsDestinyItemTransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsDestinyItemTransferRequest' is set
            if (destinyRequestsDestinyItemTransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsDestinyItemTransferRequest' when calling Destiny2Api->Destiny2TransferItem");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsDestinyItemTransferRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2TransferItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Items/TransferItem/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2TransferItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the color, icon, and name of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response Destiny2UpdateLoadoutIdentifiers(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = Destiny2UpdateLoadoutIdentifiersWithHttpInfo(destinyRequestsActionsDestinyLoadoutUpdateActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the color, icon, and name of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> Destiny2UpdateLoadoutIdentifiersWithHttpInfo(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutUpdateActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' when calling Destiny2Api->Destiny2UpdateLoadoutIdentifiers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutUpdateActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2UpdateLoadoutIdentifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2UpdateLoadoutIdentifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update the color, icon, and name of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> Destiny2UpdateLoadoutIdentifiersAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await Destiny2UpdateLoadoutIdentifiersWithHttpInfoAsync(destinyRequestsActionsDestinyLoadoutUpdateActionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the color, icon, and name of a loadout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinyRequestsActionsDestinyLoadoutUpdateActionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> Destiny2UpdateLoadoutIdentifiersWithHttpInfoAsync(DestinyRequestsActionsDestinyLoadoutUpdateActionRequest destinyRequestsActionsDestinyLoadoutUpdateActionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' is set
            if (destinyRequestsActionsDestinyLoadoutUpdateActionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'destinyRequestsActionsDestinyLoadoutUpdateActionRequest' when calling Destiny2Api->Destiny2UpdateLoadoutIdentifiers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = destinyRequestsActionsDestinyLoadoutUpdateActionRequest;

            localVarRequestOptions.Operation = "Destiny2Api.Destiny2UpdateLoadoutIdentifiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2EditGroup200Response>("/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Destiny2UpdateLoadoutIdentifiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
