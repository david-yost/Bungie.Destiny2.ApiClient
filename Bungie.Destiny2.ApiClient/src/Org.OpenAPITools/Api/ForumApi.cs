/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetCoreTopicsPaged(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetCoreTopicsPagedWithHttpInfo(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetForumTagSuggestions200Response</returns>
        ForumGetForumTagSuggestions200Response ForumGetForumTagSuggestions(string? partialtag = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetForumTagSuggestions200Response</returns>
        ApiResponse<ForumGetForumTagSuggestions200Response> ForumGetForumTagSuggestionsWithHttpInfo(string? partialtag = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetPoll(long topicId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetPollWithHttpInfo(long topicId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetPostAndParent(long childPostId, string? showbanned = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostAndParentWithHttpInfo(long childPostId, string? showbanned = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetPostAndParentAwaitingApproval(long childPostId, string? showbanned = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostAndParentAwaitingApprovalWithHttpInfo(long childPostId, string? showbanned = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetPostsThreadedPaged(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedWithHttpInfo(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetPostsThreadedPagedFromChild(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedFromChildWithHttpInfo(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetRecruitmentThreadSummaries200Response</returns>
        ForumGetRecruitmentThreadSummaries200Response ForumGetRecruitmentThreadSummaries(List<long> requestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetRecruitmentThreadSummaries200Response</returns>
        ApiResponse<ForumGetRecruitmentThreadSummaries200Response> ForumGetRecruitmentThreadSummariesWithHttpInfo(List<long> requestBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        ForumGetTopicForContent200Response ForumGetTopicForContent(long contentId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        ApiResponse<ForumGetTopicForContent200Response> ForumGetTopicForContentWithHttpInfo(long contentId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        ForumGetTopicsPaged200Response ForumGetTopicsPaged(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        ApiResponse<ForumGetTopicsPaged200Response> ForumGetTopicsPagedWithHttpInfo(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetCoreTopicsPagedAsync(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetCoreTopicsPagedWithHttpInfoAsync(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetForumTagSuggestions200Response</returns>
        System.Threading.Tasks.Task<ForumGetForumTagSuggestions200Response> ForumGetForumTagSuggestionsAsync(string? partialtag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetForumTagSuggestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetForumTagSuggestions200Response>> ForumGetForumTagSuggestionsWithHttpInfoAsync(string? partialtag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPollAsync(long topicId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPollWithHttpInfoAsync(long topicId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostAndParentAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostAndParentWithHttpInfoAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostAndParentAwaitingApprovalAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostAndParentAwaitingApprovalWithHttpInfoAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedAsync(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostsThreadedPagedWithHttpInfoAsync(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedFromChildAsync(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostsThreadedPagedFromChildWithHttpInfoAsync(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetRecruitmentThreadSummaries200Response</returns>
        System.Threading.Tasks.Task<ForumGetRecruitmentThreadSummaries200Response> ForumGetRecruitmentThreadSummariesAsync(List<long> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetRecruitmentThreadSummaries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetRecruitmentThreadSummaries200Response>> ForumGetRecruitmentThreadSummariesWithHttpInfoAsync(List<long> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicForContent200Response> ForumGetTopicForContentAsync(long contentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicForContent200Response>> ForumGetTopicForContentWithHttpInfoAsync(long contentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetTopicsPagedAsync(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumGetTopicsPaged200Response>> ForumGetTopicsPagedWithHttpInfoAsync(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApi : IForumApiSync, IForumApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForumApi : IForumApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ForumApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ForumApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetCoreTopicsPaged(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetCoreTopicsPagedWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetCoreTopicsPagedWithHttpInfo(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetCoreTopicsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetCoreTopicsPagedAsync(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetCoreTopicsPagedWithHttpInfoAsync(categoryFilter, page, quickDate, sort, locales, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetCoreTopicsPagedWithHttpInfoAsync(int categoryFilter, int page, int quickDate, int sort, string? locales = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetCoreTopicsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetForumTagSuggestions200Response</returns>
        public ForumGetForumTagSuggestions200Response ForumGetForumTagSuggestions(string? partialtag = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetForumTagSuggestions200Response> localVarResponse = ForumGetForumTagSuggestionsWithHttpInfo(partialtag);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetForumTagSuggestions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetForumTagSuggestions200Response> ForumGetForumTagSuggestionsWithHttpInfo(string? partialtag = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (partialtag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partialtag", partialtag));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetForumTagSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetForumTagSuggestions200Response>("/Forum/GetForumTagSuggestions/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetForumTagSuggestions200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetForumTagSuggestions200Response> ForumGetForumTagSuggestionsAsync(string? partialtag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetForumTagSuggestions200Response> localVarResponse = await ForumGetForumTagSuggestionsWithHttpInfoAsync(partialtag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetForumTagSuggestions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetForumTagSuggestions200Response>> ForumGetForumTagSuggestionsWithHttpInfoAsync(string? partialtag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (partialtag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "partialtag", partialtag));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetForumTagSuggestions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetForumTagSuggestions200Response>("/Forum/GetForumTagSuggestions/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetPoll(long topicId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetPollWithHttpInfo(topicId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetPollWithHttpInfo(long topicId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("topicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(topicId)); // path parameter

            localVarRequestOptions.Operation = "ForumApi.ForumGetPoll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/Poll/{topicId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPoll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPollAsync(long topicId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetPollWithHttpInfoAsync(topicId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPollWithHttpInfoAsync(long topicId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("topicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(topicId)); // path parameter

            localVarRequestOptions.Operation = "ForumApi.ForumGetPoll";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/Poll/{topicId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPoll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetPostAndParent(long childPostId, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetPostAndParentWithHttpInfo(childPostId, showbanned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostAndParentWithHttpInfo(long childPostId, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostAndParent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetPostAndParent/{childPostId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostAndParentAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetPostAndParentWithHttpInfoAsync(childPostId, showbanned, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostAndParentWithHttpInfoAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostAndParent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetPostAndParent/{childPostId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetPostAndParentAwaitingApproval(long childPostId, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetPostAndParentAwaitingApprovalWithHttpInfo(childPostId, showbanned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostAndParentAwaitingApprovalWithHttpInfo(long childPostId, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostAndParentAwaitingApproval";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetPostAndParentAwaitingApproval/{childPostId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostAndParentAwaitingApprovalAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetPostAndParentAwaitingApprovalWithHttpInfoAsync(childPostId, showbanned, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostAndParentAwaitingApprovalWithHttpInfoAsync(long childPostId, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostAndParentAwaitingApproval";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetPostAndParentAwaitingApproval/{childPostId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetPostsThreadedPaged(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetPostsThreadedPagedWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedWithHttpInfo(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("getParentPost", Org.OpenAPITools.Client.ClientUtils.ParameterToString(getParentPost)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("parentPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parentPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostsThreadedPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedAsync(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetPostsThreadedPagedWithHttpInfoAsync(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostsThreadedPagedWithHttpInfoAsync(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("getParentPost", Org.OpenAPITools.Client.ClientUtils.ParameterToString(getParentPost)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("parentPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(parentPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostsThreadedPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetPostsThreadedPagedFromChild(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetPostsThreadedPagedFromChildWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedFromChildWithHttpInfo(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostsThreadedPagedFromChild";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetPostsThreadedPagedFromChildAsync(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetPostsThreadedPagedFromChildWithHttpInfoAsync(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetPostsThreadedPagedFromChildWithHttpInfoAsync(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string? showbanned = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("childPostId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetPostsThreadedPagedFromChild";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetRecruitmentThreadSummaries200Response</returns>
        public ForumGetRecruitmentThreadSummaries200Response ForumGetRecruitmentThreadSummaries(List<long> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetRecruitmentThreadSummaries200Response> localVarResponse = ForumGetRecruitmentThreadSummariesWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetRecruitmentThreadSummaries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetRecruitmentThreadSummaries200Response> ForumGetRecruitmentThreadSummariesWithHttpInfo(List<long> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ForumApi->ForumGetRecruitmentThreadSummaries");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "ForumApi.ForumGetRecruitmentThreadSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ForumGetRecruitmentThreadSummaries200Response>("/Forum/Recruit/Summaries/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetRecruitmentThreadSummaries200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetRecruitmentThreadSummaries200Response> ForumGetRecruitmentThreadSummariesAsync(List<long> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetRecruitmentThreadSummaries200Response> localVarResponse = await ForumGetRecruitmentThreadSummariesWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetRecruitmentThreadSummaries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetRecruitmentThreadSummaries200Response>> ForumGetRecruitmentThreadSummariesWithHttpInfoAsync(List<long> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling ForumApi->ForumGetRecruitmentThreadSummaries");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "ForumApi.ForumGetRecruitmentThreadSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ForumGetRecruitmentThreadSummaries200Response>("/Forum/Recruit/Summaries/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicForContent200Response</returns>
        public ForumGetTopicForContent200Response ForumGetTopicForContent(long contentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = ForumGetTopicForContentWithHttpInfo(contentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicForContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> ForumGetTopicForContentWithHttpInfo(long contentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentId)); // path parameter

            localVarRequestOptions.Operation = "ForumApi.ForumGetTopicForContent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicForContent200Response>("/Forum/GetTopicForContent/{contentId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicForContent200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicForContent200Response> ForumGetTopicForContentAsync(long contentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response> localVarResponse = await ForumGetTopicForContentWithHttpInfoAsync(contentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicForContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicForContent200Response>> ForumGetTopicForContentWithHttpInfoAsync(long contentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contentId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentId)); // path parameter

            localVarRequestOptions.Operation = "ForumApi.ForumGetTopicForContent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicForContent200Response>("/Forum/GetTopicForContent/{contentId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ForumGetTopicsPaged200Response</returns>
        public ForumGetTopicsPaged200Response ForumGetTopicsPaged(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = ForumGetTopicsPagedWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ForumGetTopicsPaged200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> ForumGetTopicsPagedWithHttpInfo(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("group", Org.OpenAPITools.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }
            if (tagstring != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tagstring", tagstring));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetTopicsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ForumGetTopicsPaged200Response>("/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ForumGetTopicsPaged200Response</returns>
        public async System.Threading.Tasks.Task<ForumGetTopicsPaged200Response> ForumGetTopicsPagedAsync(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response> localVarResponse = await ForumGetTopicsPagedWithHttpInfoAsync(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ForumGetTopicsPaged200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ForumGetTopicsPaged200Response>> ForumGetTopicsPagedWithHttpInfoAsync(int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string? locales = default(string?), string? tagstring = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("categoryFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("group", Org.OpenAPITools.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }
            if (tagstring != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tagstring", tagstring));
            }

            localVarRequestOptions.Operation = "ForumApi.ForumGetTopicsPaged";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ForumGetTopicsPaged200Response>("/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
