/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response SocialAcceptFriendRequest(string membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialAcceptFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response SocialDeclineFriendRequest(string membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialDeclineFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your Bungie Friend list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetFriendList200Response</returns>
        SocialGetFriendList200Response SocialGetFriendList(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your Bungie Friend list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetFriendList200Response</returns>
        ApiResponse<SocialGetFriendList200Response> SocialGetFriendListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your friend request queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetFriendRequestList200Response</returns>
        SocialGetFriendRequestList200Response SocialGetFriendRequestList(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your friend request queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetFriendRequestList200Response</returns>
        ApiResponse<SocialGetFriendRequestList200Response> SocialGetFriendRequestListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetPlatformFriendList200Response</returns>
        SocialGetPlatformFriendList200Response SocialGetPlatformFriendList(int friendPlatform, string page, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetPlatformFriendList200Response</returns>
        ApiResponse<SocialGetPlatformFriendList200Response> SocialGetPlatformFriendListWithHttpInfo(int friendPlatform, string page, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response SocialIssueFriendRequest(string membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialIssueFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response SocialRemoveFriend(string membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendWithHttpInfo(string membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        GroupV2GetUserClanInviteSetting200Response SocialRemoveFriendRequest(string membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialAcceptFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialAcceptFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialDeclineFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialDeclineFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your Bungie Friend list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetFriendList200Response</returns>
        System.Threading.Tasks.Task<SocialGetFriendList200Response> SocialGetFriendListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your Bungie Friend list
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetFriendList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialGetFriendList200Response>> SocialGetFriendListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your friend request queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetFriendRequestList200Response</returns>
        System.Threading.Tasks.Task<SocialGetFriendRequestList200Response> SocialGetFriendRequestListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns your friend request queue.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetFriendRequestList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialGetFriendRequestList200Response>> SocialGetFriendRequestListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetPlatformFriendList200Response</returns>
        System.Threading.Tasks.Task<SocialGetPlatformFriendList200Response> SocialGetPlatformFriendListAsync(int friendPlatform, string page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetPlatformFriendList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialGetPlatformFriendList200Response>> SocialGetPlatformFriendListWithHttpInfoAsync(int friendPlatform, string page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialIssueFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialIssueFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialRemoveFriendWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialRemoveFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISocialApi : ISocialApiSync, ISocialApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SocialApi : ISocialApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SocialApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SocialApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SocialApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SocialApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response SocialAcceptFriendRequest(string membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = SocialAcceptFriendRequestWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialAcceptFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialAcceptFriendRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialAcceptFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Accept/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialAcceptFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialAcceptFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await SocialAcceptFriendRequestWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to accept.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialAcceptFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialAcceptFriendRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialAcceptFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Accept/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialAcceptFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response SocialDeclineFriendRequest(string membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = SocialDeclineFriendRequestWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialDeclineFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialDeclineFriendRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialDeclineFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Decline/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialDeclineFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialDeclineFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await SocialDeclineFriendRequestWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to decline.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialDeclineFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialDeclineFriendRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialDeclineFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Decline/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialDeclineFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns your Bungie Friend list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetFriendList200Response</returns>
        public SocialGetFriendList200Response SocialGetFriendList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetFriendList200Response> localVarResponse = SocialGetFriendListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns your Bungie Friend list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetFriendList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<SocialGetFriendList200Response> SocialGetFriendListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SocialApi.SocialGetFriendList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SocialGetFriendList200Response>("/Social/Friends/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetFriendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns your Bungie Friend list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetFriendList200Response</returns>
        public async System.Threading.Tasks.Task<SocialGetFriendList200Response> SocialGetFriendListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetFriendList200Response> localVarResponse = await SocialGetFriendListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns your Bungie Friend list
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetFriendList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SocialGetFriendList200Response>> SocialGetFriendListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SocialApi.SocialGetFriendList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SocialGetFriendList200Response>("/Social/Friends/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetFriendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns your friend request queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetFriendRequestList200Response</returns>
        public SocialGetFriendRequestList200Response SocialGetFriendRequestList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetFriendRequestList200Response> localVarResponse = SocialGetFriendRequestListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns your friend request queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetFriendRequestList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<SocialGetFriendRequestList200Response> SocialGetFriendRequestListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SocialApi.SocialGetFriendRequestList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SocialGetFriendRequestList200Response>("/Social/Friends/Requests/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetFriendRequestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns your friend request queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetFriendRequestList200Response</returns>
        public async System.Threading.Tasks.Task<SocialGetFriendRequestList200Response> SocialGetFriendRequestListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetFriendRequestList200Response> localVarResponse = await SocialGetFriendRequestListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns your friend request queue.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetFriendRequestList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SocialGetFriendRequestList200Response>> SocialGetFriendRequestListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SocialApi.SocialGetFriendRequestList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SocialGetFriendRequestList200Response>("/Social/Friends/Requests/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetFriendRequestList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SocialGetPlatformFriendList200Response</returns>
        public SocialGetPlatformFriendList200Response SocialGetPlatformFriendList(int friendPlatform, string page, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetPlatformFriendList200Response> localVarResponse = SocialGetPlatformFriendListWithHttpInfo(friendPlatform, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SocialGetPlatformFriendList200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<SocialGetPlatformFriendList200Response> SocialGetPlatformFriendListWithHttpInfo(int friendPlatform, string page, int operationIndex = 0)
        {
            // verify the required parameter 'page' is set
            if (page == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'page' when calling SocialApi->SocialGetPlatformFriendList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("friendPlatform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(friendPlatform)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialGetPlatformFriendList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SocialGetPlatformFriendList200Response>("/Social/PlatformFriends/{friendPlatform}/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetPlatformFriendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SocialGetPlatformFriendList200Response</returns>
        public async System.Threading.Tasks.Task<SocialGetPlatformFriendList200Response> SocialGetPlatformFriendListAsync(int friendPlatform, string page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SocialGetPlatformFriendList200Response> localVarResponse = await SocialGetPlatformFriendListWithHttpInfoAsync(friendPlatform, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="friendPlatform">The platform friend type.</param>
        /// <param name="page">The zero based page to return. Page size is 100.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SocialGetPlatformFriendList200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SocialGetPlatformFriendList200Response>> SocialGetPlatformFriendListWithHttpInfoAsync(int friendPlatform, string page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'page' is set
            if (page == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'page' when calling SocialApi->SocialGetPlatformFriendList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("friendPlatform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(friendPlatform)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialGetPlatformFriendList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SocialGetPlatformFriendList200Response>("/Social/PlatformFriends/{friendPlatform}/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialGetPlatformFriendList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response SocialIssueFriendRequest(string membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = SocialIssueFriendRequestWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialIssueFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialIssueFriendRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialIssueFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Add/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialIssueFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialIssueFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await SocialIssueFriendRequestWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to add.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialIssueFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialIssueFriendRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialIssueFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Add/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialIssueFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response SocialRemoveFriend(string membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = SocialRemoveFriendWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendWithHttpInfo(string membershipId, int operationIndex = 0)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialRemoveFriend");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialRemoveFriend";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Remove/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialRemoveFriend", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await SocialRemoveFriendWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialRemoveFriendWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialRemoveFriend");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialRemoveFriend";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Remove/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialRemoveFriend", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2GetUserClanInviteSetting200Response</returns>
        public GroupV2GetUserClanInviteSetting200Response SocialRemoveFriendRequest(string membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = SocialRemoveFriendRequestWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2GetUserClanInviteSetting200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendRequestWithHttpInfo(string membershipId, int operationIndex = 0)
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialRemoveFriendRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialRemoveFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Remove/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialRemoveFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2GetUserClanInviteSetting200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2GetUserClanInviteSetting200Response> SocialRemoveFriendRequestAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResponse = await SocialRemoveFriendRequestWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership id of the user you wish to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2GetUserClanInviteSetting200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2GetUserClanInviteSetting200Response>> SocialRemoveFriendRequestWithHttpInfoAsync(string membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'membershipId' is set
            if (membershipId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'membershipId' when calling SocialApi->SocialRemoveFriendRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "SocialApi.SocialRemoveFriendRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GroupV2GetUserClanInviteSetting200Response>("/Social/Friends/Requests/Remove/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SocialRemoveFriendRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
