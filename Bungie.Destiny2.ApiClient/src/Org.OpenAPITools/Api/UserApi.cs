/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available user themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetAvailableThemes200Response</returns>
        UserGetAvailableThemes200Response UserGetAvailableThemes(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available user themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetAvailableThemes200Response</returns>
        ApiResponse<UserGetAvailableThemes200Response> UserGetAvailableThemesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads a bungienet user by membership id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetBungieNetUserById200Response</returns>
        UserGetBungieNetUserById200Response UserGetBungieNetUserById(long id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads a bungienet user by membership id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetBungieNetUserById200Response</returns>
        ApiResponse<UserGetBungieNetUserById200Response> UserGetBungieNetUserByIdWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of credential types attached to the requested account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetCredentialTypesForTargetAccount200Response</returns>
        UserGetCredentialTypesForTargetAccount200Response UserGetCredentialTypesForTargetAccount(long membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of credential types attached to the requested account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetCredentialTypesForTargetAccount200Response</returns>
        ApiResponse<UserGetCredentialTypesForTargetAccount200Response> UserGetCredentialTypesForTargetAccountWithHttpInfo(long membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipDataById200Response</returns>
        UserGetMembershipDataById200Response UserGetMembershipDataById(long membershipId, int membershipType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipDataById200Response</returns>
        ApiResponse<UserGetMembershipDataById200Response> UserGetMembershipDataByIdWithHttpInfo(long membershipId, int membershipType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipDataById200Response</returns>
        UserGetMembershipDataById200Response UserGetMembershipDataForCurrentUser(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipDataById200Response</returns>
        ApiResponse<UserGetMembershipDataById200Response> UserGetMembershipDataForCurrentUserWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipFromHardLinkedCredential200Response</returns>
        UserGetMembershipFromHardLinkedCredential200Response UserGetMembershipFromHardLinkedCredential(string credential, int crType, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipFromHardLinkedCredential200Response</returns>
        ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> UserGetMembershipFromHardLinkedCredentialWithHttpInfo(string credential, int crType, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetSanitizedPlatformDisplayNames200Response</returns>
        UserGetSanitizedPlatformDisplayNames200Response UserGetSanitizedPlatformDisplayNames(long membershipId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetSanitizedPlatformDisplayNames200Response</returns>
        ApiResponse<UserGetSanitizedPlatformDisplayNames200Response> UserGetSanitizedPlatformDisplayNamesWithHttpInfo(long membershipId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given the prefix of a global display name, returns all users who share that name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearchByGlobalNamePrefix200Response</returns>
        UserSearchByGlobalNamePrefix200Response UserSearchByGlobalNamePost(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given the prefix of a global display name, returns all users who share that name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearchByGlobalNamePrefix200Response</returns>
        ApiResponse<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePostWithHttpInfo(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearchByGlobalNamePrefix200Response</returns>
        UserSearchByGlobalNamePrefix200Response UserSearchByGlobalNamePrefix(string displayNamePrefix, int page, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearchByGlobalNamePrefix200Response</returns>
        ApiResponse<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePrefixWithHttpInfo(string displayNamePrefix, int page, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available user themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetAvailableThemes200Response</returns>
        System.Threading.Tasks.Task<UserGetAvailableThemes200Response> UserGetAvailableThemesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available user themes.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetAvailableThemes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetAvailableThemes200Response>> UserGetAvailableThemesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads a bungienet user by membership id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetBungieNetUserById200Response</returns>
        System.Threading.Tasks.Task<UserGetBungieNetUserById200Response> UserGetBungieNetUserByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads a bungienet user by membership id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetBungieNetUserById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetBungieNetUserById200Response>> UserGetBungieNetUserByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of credential types attached to the requested account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetCredentialTypesForTargetAccount200Response</returns>
        System.Threading.Tasks.Task<UserGetCredentialTypesForTargetAccount200Response> UserGetCredentialTypesForTargetAccountAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of credential types attached to the requested account
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetCredentialTypesForTargetAccount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetCredentialTypesForTargetAccount200Response>> UserGetCredentialTypesForTargetAccountWithHttpInfoAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipDataById200Response</returns>
        System.Threading.Tasks.Task<UserGetMembershipDataById200Response> UserGetMembershipDataByIdAsync(long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipDataById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetMembershipDataById200Response>> UserGetMembershipDataByIdWithHttpInfoAsync(long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipDataById200Response</returns>
        System.Threading.Tasks.Task<UserGetMembershipDataById200Response> UserGetMembershipDataForCurrentUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipDataById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetMembershipDataById200Response>> UserGetMembershipDataForCurrentUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipFromHardLinkedCredential200Response</returns>
        System.Threading.Tasks.Task<UserGetMembershipFromHardLinkedCredential200Response> UserGetMembershipFromHardLinkedCredentialAsync(string credential, int crType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipFromHardLinkedCredential200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetMembershipFromHardLinkedCredential200Response>> UserGetMembershipFromHardLinkedCredentialWithHttpInfoAsync(string credential, int crType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetSanitizedPlatformDisplayNames200Response</returns>
        System.Threading.Tasks.Task<UserGetSanitizedPlatformDisplayNames200Response> UserGetSanitizedPlatformDisplayNamesAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetSanitizedPlatformDisplayNames200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetSanitizedPlatformDisplayNames200Response>> UserGetSanitizedPlatformDisplayNamesWithHttpInfoAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given the prefix of a global display name, returns all users who share that name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchByGlobalNamePrefix200Response</returns>
        System.Threading.Tasks.Task<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePostAsync(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Given the prefix of a global display name, returns all users who share that name.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchByGlobalNamePrefix200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSearchByGlobalNamePrefix200Response>> UserSearchByGlobalNamePostWithHttpInfoAsync(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchByGlobalNamePrefix200Response</returns>
        System.Threading.Tasks.Task<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePrefixAsync(string displayNamePrefix, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchByGlobalNamePrefix200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSearchByGlobalNamePrefix200Response>> UserSearchByGlobalNamePrefixWithHttpInfoAsync(string displayNamePrefix, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of all available user themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetAvailableThemes200Response</returns>
        public UserGetAvailableThemes200Response UserGetAvailableThemes(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetAvailableThemes200Response> localVarResponse = UserGetAvailableThemesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available user themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetAvailableThemes200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetAvailableThemes200Response> UserGetAvailableThemesWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetAvailableThemes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetAvailableThemes200Response>("/User/GetAvailableThemes/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetAvailableThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available user themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetAvailableThemes200Response</returns>
        public async System.Threading.Tasks.Task<UserGetAvailableThemes200Response> UserGetAvailableThemesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetAvailableThemes200Response> localVarResponse = await UserGetAvailableThemesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available user themes.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetAvailableThemes200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetAvailableThemes200Response>> UserGetAvailableThemesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetAvailableThemes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetAvailableThemes200Response>("/User/GetAvailableThemes/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetAvailableThemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Loads a bungienet user by membership id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetBungieNetUserById200Response</returns>
        public UserGetBungieNetUserById200Response UserGetBungieNetUserById(long id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetBungieNetUserById200Response> localVarResponse = UserGetBungieNetUserByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Loads a bungienet user by membership id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetBungieNetUserById200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetBungieNetUserById200Response> UserGetBungieNetUserByIdWithHttpInfo(long id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetBungieNetUserById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetBungieNetUserById200Response>("/User/GetBungieNetUserById/{id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetBungieNetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Loads a bungienet user by membership id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetBungieNetUserById200Response</returns>
        public async System.Threading.Tasks.Task<UserGetBungieNetUserById200Response> UserGetBungieNetUserByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetBungieNetUserById200Response> localVarResponse = await UserGetBungieNetUserByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Loads a bungienet user by membership id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The requested Bungie.net membership id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetBungieNetUserById200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetBungieNetUserById200Response>> UserGetBungieNetUserByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetBungieNetUserById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetBungieNetUserById200Response>("/User/GetBungieNetUserById/{id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetBungieNetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of credential types attached to the requested account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetCredentialTypesForTargetAccount200Response</returns>
        public UserGetCredentialTypesForTargetAccount200Response UserGetCredentialTypesForTargetAccount(long membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetCredentialTypesForTargetAccount200Response> localVarResponse = UserGetCredentialTypesForTargetAccountWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of credential types attached to the requested account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetCredentialTypesForTargetAccount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetCredentialTypesForTargetAccount200Response> UserGetCredentialTypesForTargetAccountWithHttpInfo(long membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetCredentialTypesForTargetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetCredentialTypesForTargetAccount200Response>("/User/GetCredentialTypesForTargetAccount/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetCredentialTypesForTargetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of credential types attached to the requested account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetCredentialTypesForTargetAccount200Response</returns>
        public async System.Threading.Tasks.Task<UserGetCredentialTypesForTargetAccount200Response> UserGetCredentialTypesForTargetAccountAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetCredentialTypesForTargetAccount200Response> localVarResponse = await UserGetCredentialTypesForTargetAccountWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of credential types attached to the requested account
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The user&#39;s membership id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetCredentialTypesForTargetAccount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetCredentialTypesForTargetAccount200Response>> UserGetCredentialTypesForTargetAccountWithHttpInfoAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetCredentialTypesForTargetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetCredentialTypesForTargetAccount200Response>("/User/GetCredentialTypesForTargetAccount/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetCredentialTypesForTargetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipDataById200Response</returns>
        public UserGetMembershipDataById200Response UserGetMembershipDataById(long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> localVarResponse = UserGetMembershipDataByIdWithHttpInfo(membershipId, membershipType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipDataById200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> UserGetMembershipDataByIdWithHttpInfo(long membershipId, int membershipType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetMembershipDataById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetMembershipDataById200Response>("/User/GetMembershipsById/{membershipId}/{membershipType}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipDataById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipDataById200Response</returns>
        public async System.Threading.Tasks.Task<UserGetMembershipDataById200Response> UserGetMembershipDataByIdAsync(long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> localVarResponse = await UserGetMembershipDataByIdWithHttpInfoAsync(membershipId, membershipType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The membership ID of the target user.</param>
        /// <param name="membershipType">Type of the supplied membership ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipDataById200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response>> UserGetMembershipDataByIdWithHttpInfoAsync(long membershipId, int membershipType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetMembershipDataById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetMembershipDataById200Response>("/User/GetMembershipsById/{membershipId}/{membershipType}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipDataById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipDataById200Response</returns>
        public UserGetMembershipDataById200Response UserGetMembershipDataForCurrentUser(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> localVarResponse = UserGetMembershipDataForCurrentUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipDataById200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> UserGetMembershipDataForCurrentUserWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetMembershipDataForCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetMembershipDataById200Response>("/User/GetMembershipsForCurrentUser/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipDataForCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipDataById200Response</returns>
        public async System.Threading.Tasks.Task<UserGetMembershipDataById200Response> UserGetMembershipDataForCurrentUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response> localVarResponse = await UserGetMembershipDataForCurrentUserWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipDataById200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetMembershipDataById200Response>> UserGetMembershipDataForCurrentUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetMembershipDataForCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetMembershipDataById200Response>("/User/GetMembershipsForCurrentUser/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipDataForCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetMembershipFromHardLinkedCredential200Response</returns>
        public UserGetMembershipFromHardLinkedCredential200Response UserGetMembershipFromHardLinkedCredential(string credential, int crType, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> localVarResponse = UserGetMembershipFromHardLinkedCredentialWithHttpInfo(credential, crType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetMembershipFromHardLinkedCredential200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> UserGetMembershipFromHardLinkedCredentialWithHttpInfo(string credential, int crType, int operationIndex = 0)
        {
            // verify the required parameter 'credential' is set
            if (credential == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'credential' when calling UserApi->UserGetMembershipFromHardLinkedCredential");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credential", Org.OpenAPITools.Client.ClientUtils.ParameterToString(credential)); // path parameter
            localVarRequestOptions.PathParameters.Add("crType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(crType)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetMembershipFromHardLinkedCredential";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetMembershipFromHardLinkedCredential200Response>("/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipFromHardLinkedCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetMembershipFromHardLinkedCredential200Response</returns>
        public async System.Threading.Tasks.Task<UserGetMembershipFromHardLinkedCredential200Response> UserGetMembershipFromHardLinkedCredentialAsync(string credential, int crType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> localVarResponse = await UserGetMembershipFromHardLinkedCredentialWithHttpInfoAsync(credential, crType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
        /// <param name="crType">The credential type. &#39;SteamId&#39; is the only valid value at present.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetMembershipFromHardLinkedCredential200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetMembershipFromHardLinkedCredential200Response>> UserGetMembershipFromHardLinkedCredentialWithHttpInfoAsync(string credential, int crType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'credential' is set
            if (credential == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'credential' when calling UserApi->UserGetMembershipFromHardLinkedCredential");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("credential", Org.OpenAPITools.Client.ClientUtils.ParameterToString(credential)); // path parameter
            localVarRequestOptions.PathParameters.Add("crType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(crType)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetMembershipFromHardLinkedCredential";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetMembershipFromHardLinkedCredential200Response>("/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetMembershipFromHardLinkedCredential", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserGetSanitizedPlatformDisplayNames200Response</returns>
        public UserGetSanitizedPlatformDisplayNames200Response UserGetSanitizedPlatformDisplayNames(long membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetSanitizedPlatformDisplayNames200Response> localVarResponse = UserGetSanitizedPlatformDisplayNamesWithHttpInfo(membershipId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserGetSanitizedPlatformDisplayNames200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserGetSanitizedPlatformDisplayNames200Response> UserGetSanitizedPlatformDisplayNamesWithHttpInfo(long membershipId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetSanitizedPlatformDisplayNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGetSanitizedPlatformDisplayNames200Response>("/User/GetSanitizedPlatformDisplayNames/{membershipId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetSanitizedPlatformDisplayNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGetSanitizedPlatformDisplayNames200Response</returns>
        public async System.Threading.Tasks.Task<UserGetSanitizedPlatformDisplayNames200Response> UserGetSanitizedPlatformDisplayNamesAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserGetSanitizedPlatformDisplayNames200Response> localVarResponse = await UserGetSanitizedPlatformDisplayNamesWithHttpInfoAsync(membershipId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">The requested membership id to load.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGetSanitizedPlatformDisplayNames200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserGetSanitizedPlatformDisplayNames200Response>> UserGetSanitizedPlatformDisplayNamesWithHttpInfoAsync(long membershipId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("membershipId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(membershipId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetSanitizedPlatformDisplayNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGetSanitizedPlatformDisplayNames200Response>("/User/GetSanitizedPlatformDisplayNames/{membershipId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetSanitizedPlatformDisplayNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Given the prefix of a global display name, returns all users who share that name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearchByGlobalNamePrefix200Response</returns>
        public UserSearchByGlobalNamePrefix200Response UserSearchByGlobalNamePost(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> localVarResponse = UserSearchByGlobalNamePostWithHttpInfo(page, userUserSearchPrefixRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Given the prefix of a global display name, returns all users who share that name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearchByGlobalNamePrefix200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePostWithHttpInfo(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userUserSearchPrefixRequest' is set
            if (userUserSearchPrefixRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userUserSearchPrefixRequest' when calling UserApi->UserSearchByGlobalNamePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.Data = userUserSearchPrefixRequest;

            localVarRequestOptions.Operation = "UserApi.UserSearchByGlobalNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserSearchByGlobalNamePrefix200Response>("/User/Search/GlobalName/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearchByGlobalNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Given the prefix of a global display name, returns all users who share that name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchByGlobalNamePrefix200Response</returns>
        public async System.Threading.Tasks.Task<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePostAsync(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> localVarResponse = await UserSearchByGlobalNamePostWithHttpInfoAsync(page, userUserSearchPrefixRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Given the prefix of a global display name, returns all users who share that name.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="userUserSearchPrefixRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchByGlobalNamePrefix200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response>> UserSearchByGlobalNamePostWithHttpInfoAsync(int page, UserUserSearchPrefixRequest userUserSearchPrefixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUserSearchPrefixRequest' is set
            if (userUserSearchPrefixRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'userUserSearchPrefixRequest' when calling UserApi->UserSearchByGlobalNamePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.Data = userUserSearchPrefixRequest;

            localVarRequestOptions.Operation = "UserApi.UserSearchByGlobalNamePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserSearchByGlobalNamePrefix200Response>("/User/Search/GlobalName/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearchByGlobalNamePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearchByGlobalNamePrefix200Response</returns>
        public UserSearchByGlobalNamePrefix200Response UserSearchByGlobalNamePrefix(string displayNamePrefix, int page, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> localVarResponse = UserSearchByGlobalNamePrefixWithHttpInfo(displayNamePrefix, page);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearchByGlobalNamePrefix200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePrefixWithHttpInfo(string displayNamePrefix, int page, int operationIndex = 0)
        {
            // verify the required parameter 'displayNamePrefix' is set
            if (displayNamePrefix == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'displayNamePrefix' when calling UserApi->UserSearchByGlobalNamePrefix");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("displayNamePrefix", Org.OpenAPITools.Client.ClientUtils.ParameterToString(displayNamePrefix)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserSearchByGlobalNamePrefix";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSearchByGlobalNamePrefix200Response>("/User/Search/Prefix/{displayNamePrefix}/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearchByGlobalNamePrefix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearchByGlobalNamePrefix200Response</returns>
        public async System.Threading.Tasks.Task<UserSearchByGlobalNamePrefix200Response> UserSearchByGlobalNamePrefixAsync(string displayNamePrefix, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response> localVarResponse = await UserSearchByGlobalNamePrefixWithHttpInfoAsync(displayNamePrefix, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayNamePrefix">The display name prefix you&#39;re looking for.</param>
        /// <param name="page">The zero-based page of results you desire.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearchByGlobalNamePrefix200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserSearchByGlobalNamePrefix200Response>> UserSearchByGlobalNamePrefixWithHttpInfoAsync(string displayNamePrefix, int page, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'displayNamePrefix' is set
            if (displayNamePrefix == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'displayNamePrefix' when calling UserApi->UserSearchByGlobalNamePrefix");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("displayNamePrefix", Org.OpenAPITools.Client.ClientUtils.ParameterToString(displayNamePrefix)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserSearchByGlobalNamePrefix";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSearchByGlobalNamePrefix200Response>("/User/Search/Prefix/{displayNamePrefix}/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearchByGlobalNamePrefix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
