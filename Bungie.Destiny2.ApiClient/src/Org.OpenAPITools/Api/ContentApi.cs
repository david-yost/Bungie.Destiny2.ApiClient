/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentById200Response</returns>
        ContentGetContentById200Response ContentGetContentById(long id, string locale, bool? head = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentById200Response</returns>
        ApiResponse<ContentGetContentById200Response> ContentGetContentByIdWithHttpInfo(long id, string locale, bool? head = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentById200Response</returns>
        ContentGetContentById200Response ContentGetContentByTagAndType(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentById200Response</returns>
        ApiResponse<ContentGetContentById200Response> ContentGetContentByTagAndTypeWithHttpInfo(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentType200Response</returns>
        ContentGetContentType200Response ContentGetContentType(string type, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentType200Response</returns>
        ApiResponse<ContentGetContentType200Response> ContentGetContentTypeWithHttpInfo(string type, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a JSON string response that is the RSS feed for news articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentRssNewsArticles200Response</returns>
        ContentRssNewsArticles200Response ContentRssNewsArticles(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a JSON string response that is the RSS feed for news articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentRssNewsArticles200Response</returns>
        ApiResponse<ContentRssNewsArticles200Response> ContentRssNewsArticlesWithHttpInfo(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchContentWithText200Response</returns>
        ContentSearchContentWithText200Response ContentSearchContentByTagAndType(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchContentWithText200Response</returns>
        ApiResponse<ContentSearchContentWithText200Response> ContentSearchContentByTagAndTypeWithHttpInfo(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchContentWithText200Response</returns>
        ContentSearchContentWithText200Response ContentSearchContentWithText(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchContentWithText200Response</returns>
        ApiResponse<ContentSearchContentWithText200Response> ContentSearchContentWithTextWithHttpInfo(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchHelpArticles200Response</returns>
        ContentSearchHelpArticles200Response ContentSearchHelpArticles(string searchtext, string size, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchHelpArticles200Response</returns>
        ApiResponse<ContentSearchHelpArticles200Response> ContentSearchHelpArticlesWithHttpInfo(string searchtext, string size, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentById200Response</returns>
        System.Threading.Tasks.Task<ContentGetContentById200Response> ContentGetContentByIdAsync(long id, string locale, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentGetContentById200Response>> ContentGetContentByIdWithHttpInfoAsync(long id, string locale, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentById200Response</returns>
        System.Threading.Tasks.Task<ContentGetContentById200Response> ContentGetContentByTagAndTypeAsync(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentGetContentById200Response>> ContentGetContentByTagAndTypeWithHttpInfoAsync(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentType200Response</returns>
        System.Threading.Tasks.Task<ContentGetContentType200Response> ContentGetContentTypeAsync(string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentType200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentGetContentType200Response>> ContentGetContentTypeWithHttpInfoAsync(string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a JSON string response that is the RSS feed for news articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentRssNewsArticles200Response</returns>
        System.Threading.Tasks.Task<ContentRssNewsArticles200Response> ContentRssNewsArticlesAsync(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a JSON string response that is the RSS feed for news articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentRssNewsArticles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentRssNewsArticles200Response>> ContentRssNewsArticlesWithHttpInfoAsync(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchContentWithText200Response</returns>
        System.Threading.Tasks.Task<ContentSearchContentWithText200Response> ContentSearchContentByTagAndTypeAsync(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchContentWithText200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentSearchContentWithText200Response>> ContentSearchContentByTagAndTypeWithHttpInfoAsync(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchContentWithText200Response</returns>
        System.Threading.Tasks.Task<ContentSearchContentWithText200Response> ContentSearchContentWithTextAsync(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchContentWithText200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentSearchContentWithText200Response>> ContentSearchContentWithTextWithHttpInfoAsync(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchHelpArticles200Response</returns>
        System.Threading.Tasks.Task<ContentSearchHelpArticles200Response> ContentSearchHelpArticlesAsync(string searchtext, string size, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchHelpArticles200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentSearchHelpArticles200Response>> ContentSearchHelpArticlesWithHttpInfoAsync(string searchtext, string size, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApi : IContentApiSync, IContentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentApi : IContentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContentApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentById200Response</returns>
        public ContentGetContentById200Response ContentGetContentById(long id, string locale, bool? head = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> localVarResponse = ContentGetContentByIdWithHttpInfo(id, locale, head);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentById200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> ContentGetContentByIdWithHttpInfo(long id, string locale, bool? head = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentGetContentById200Response>("/Content/GetContentById/{id}/{locale}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentById200Response</returns>
        public async System.Threading.Tasks.Task<ContentGetContentById200Response> ContentGetContentByIdAsync(long id, string locale, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> localVarResponse = await ContentGetContentByIdWithHttpInfoAsync(id, locale, head, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentById200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response>> ContentGetContentByIdWithHttpInfoAsync(long id, string locale, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentGetContentById200Response>("/Content/GetContentById/{id}/{locale}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentById200Response</returns>
        public ContentGetContentById200Response ContentGetContentByTagAndType(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> localVarResponse = ContentGetContentByTagAndTypeWithHttpInfo(locale, tag, type, head);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentById200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> ContentGetContentByTagAndTypeWithHttpInfo(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentByTagAndType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentGetContentById200Response>("/Content/GetContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentById200Response</returns>
        public async System.Threading.Tasks.Task<ContentGetContentById200Response> ContentGetContentByTagAndTypeAsync(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response> localVarResponse = await ContentGetContentByTagAndTypeWithHttpInfoAsync(locale, tag, type, head, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentById200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentGetContentById200Response>> ContentGetContentByTagAndTypeWithHttpInfoAsync(string locale, string tag, string type, bool? head = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentByTagAndType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentGetContentById200Response>("/Content/GetContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentGetContentType200Response</returns>
        public ContentGetContentType200Response ContentGetContentType(string type, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentType200Response> localVarResponse = ContentGetContentTypeWithHttpInfo(type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentGetContentType200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentGetContentType200Response> ContentGetContentTypeWithHttpInfo(string type, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentGetContentType200Response>("/Content/GetContentType/{type}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentGetContentType200Response</returns>
        public async System.Threading.Tasks.Task<ContentGetContentType200Response> ContentGetContentTypeAsync(string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentGetContentType200Response> localVarResponse = await ContentGetContentTypeWithHttpInfoAsync(type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentGetContentType200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentGetContentType200Response>> ContentGetContentTypeWithHttpInfoAsync(string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter

            localVarRequestOptions.Operation = "ContentApi.ContentGetContentType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentGetContentType200Response>("/Content/GetContentType/{type}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a JSON string response that is the RSS feed for news articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentRssNewsArticles200Response</returns>
        public ContentRssNewsArticles200Response ContentRssNewsArticles(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentRssNewsArticles200Response> localVarResponse = ContentRssNewsArticlesWithHttpInfo(pageToken, categoryfilter, includebody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a JSON string response that is the RSS feed for news articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentRssNewsArticles200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentRssNewsArticles200Response> ContentRssNewsArticlesWithHttpInfo(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'pageToken' is set
            if (pageToken == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pageToken' when calling ContentApi->ContentRssNewsArticles");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pageToken", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageToken)); // path parameter
            if (categoryfilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categoryfilter", categoryfilter));
            }
            if (includebody != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includebody", includebody));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentRssNewsArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentRssNewsArticles200Response>("/Content/Rss/NewsArticles/{pageToken}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentRssNewsArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a JSON string response that is the RSS feed for news articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentRssNewsArticles200Response</returns>
        public async System.Threading.Tasks.Task<ContentRssNewsArticles200Response> ContentRssNewsArticlesAsync(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentRssNewsArticles200Response> localVarResponse = await ContentRssNewsArticlesWithHttpInfoAsync(pageToken, categoryfilter, includebody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a JSON string response that is the RSS feed for news articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
        /// <param name="categoryfilter">Optionally filter response to only include news items in a certain category. (optional)</param>
        /// <param name="includebody">Optionally include full content body for each news item. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentRssNewsArticles200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentRssNewsArticles200Response>> ContentRssNewsArticlesWithHttpInfoAsync(string pageToken, string? categoryfilter = default(string?), bool? includebody = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pageToken' is set
            if (pageToken == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'pageToken' when calling ContentApi->ContentRssNewsArticles");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pageToken", Org.OpenAPITools.Client.ClientUtils.ParameterToString(pageToken)); // path parameter
            if (categoryfilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "categoryfilter", categoryfilter));
            }
            if (includebody != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "includebody", includebody));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentRssNewsArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentRssNewsArticles200Response>("/Content/Rss/NewsArticles/{pageToken}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentRssNewsArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchContentWithText200Response</returns>
        public ContentSearchContentWithText200Response ContentSearchContentByTagAndType(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> localVarResponse = ContentSearchContentByTagAndTypeWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchContentWithText200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> ContentSearchContentByTagAndTypeWithHttpInfo(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (itemsperpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "itemsperpage", itemsperpage));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentSearchContentByTagAndType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentSearchContentWithText200Response>("/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchContentWithText200Response</returns>
        public async System.Threading.Tasks.Task<ContentSearchContentWithText200Response> ContentSearchContentByTagAndTypeAsync(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> localVarResponse = await ContentSearchContentByTagAndTypeWithHttpInfoAsync(locale, tag, type, currentpage, head, itemsperpage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchContentWithText200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response>> ContentSearchContentByTagAndTypeWithHttpInfoAsync(string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");
            }

            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            localVarRequestOptions.PathParameters.Add("tag", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tag)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (itemsperpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "itemsperpage", itemsperpage));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentSearchContentByTagAndType";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentSearchContentWithText200Response>("/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchContentWithText200Response</returns>
        public ContentSearchContentWithText200Response ContentSearchContentWithText(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> localVarResponse = ContentSearchContentWithTextWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchContentWithText200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> ContentSearchContentWithTextWithHttpInfo(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (ctype != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ctype", ctype));
            }
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (searchtext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchtext", searchtext));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentSearchContentWithText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentSearchContentWithText200Response>("/Content/Search/{locale}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchContentWithText200Response</returns>
        public async System.Threading.Tasks.Task<ContentSearchContentWithText200Response> ContentSearchContentWithTextAsync(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response> localVarResponse = await ContentSearchContentWithTextWithHttpInfoAsync(locale, ctype, currentpage, head, searchtext, source, tag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchContentWithText200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentSearchContentWithText200Response>> ContentSearchContentWithTextWithHttpInfoAsync(string locale, string? ctype = default(string?), int? currentpage = default(int?), bool? head = default(bool?), string? searchtext = default(string?), string? source = default(string?), string? tag = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locale", Org.OpenAPITools.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (ctype != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ctype", ctype));
            }
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (searchtext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "searchtext", searchtext));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }

            localVarRequestOptions.Operation = "ContentApi.ContentSearchContentWithText";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentSearchContentWithText200Response>("/Content/Search/{locale}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ContentSearchHelpArticles200Response</returns>
        public ContentSearchHelpArticles200Response ContentSearchHelpArticles(string searchtext, string size, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchHelpArticles200Response> localVarResponse = ContentSearchHelpArticlesWithHttpInfo(searchtext, size);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ContentSearchHelpArticles200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ContentSearchHelpArticles200Response> ContentSearchHelpArticlesWithHttpInfo(string searchtext, string size, int operationIndex = 0)
        {
            // verify the required parameter 'searchtext' is set
            if (searchtext == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'searchtext' when calling ContentApi->ContentSearchHelpArticles");
            }

            // verify the required parameter 'size' is set
            if (size == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'size' when calling ContentApi->ContentSearchHelpArticles");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchtext", Org.OpenAPITools.Client.ClientUtils.ParameterToString(searchtext)); // path parameter
            localVarRequestOptions.PathParameters.Add("size", Org.OpenAPITools.Client.ClientUtils.ParameterToString(size)); // path parameter

            localVarRequestOptions.Operation = "ContentApi.ContentSearchHelpArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ContentSearchHelpArticles200Response>("/Content/SearchHelpArticles/{searchtext}/{size}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchHelpArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContentSearchHelpArticles200Response</returns>
        public async System.Threading.Tasks.Task<ContentSearchHelpArticles200Response> ContentSearchHelpArticlesAsync(string searchtext, string size, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ContentSearchHelpArticles200Response> localVarResponse = await ContentSearchHelpArticlesWithHttpInfoAsync(searchtext, size, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContentSearchHelpArticles200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContentSearchHelpArticles200Response>> ContentSearchHelpArticlesWithHttpInfoAsync(string searchtext, string size, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchtext' is set
            if (searchtext == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'searchtext' when calling ContentApi->ContentSearchHelpArticles");
            }

            // verify the required parameter 'size' is set
            if (size == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'size' when calling ContentApi->ContentSearchHelpArticles");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("searchtext", Org.OpenAPITools.Client.ClientUtils.ParameterToString(searchtext)); // path parameter
            localVarRequestOptions.PathParameters.Add("size", Org.OpenAPITools.Client.ClientUtils.ParameterToString(size)); // path parameter

            localVarRequestOptions.Operation = "ContentApi.ContentSearchHelpArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContentSearchHelpArticles200Response>("/Content/SearchHelpArticles/{searchtext}/{size}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchHelpArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
