/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        GroupV2EditGroup200Response FireteamGetActivePrivateClanFireteamCount(long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        ApiResponse<GroupV2EditGroup200Response> FireteamGetActivePrivateClanFireteamCountWithHttpInfo(long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetAvailableClanFireteams200Response</returns>
        FireteamGetAvailableClanFireteams200Response FireteamGetAvailableClanFireteams(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetAvailableClanFireteams200Response</returns>
        ApiResponse<FireteamGetAvailableClanFireteams200Response> FireteamGetAvailableClanFireteamsWithHttpInfo(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific fireteam.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetClanFireteam200Response</returns>
        FireteamGetClanFireteam200Response FireteamGetClanFireteam(long fireteamId, long groupId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific fireteam.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetClanFireteam200Response</returns>
        ApiResponse<FireteamGetClanFireteam200Response> FireteamGetClanFireteamWithHttpInfo(long fireteamId, long groupId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetMyClanFireteams200Response</returns>
        FireteamGetMyClanFireteams200Response FireteamGetMyClanFireteams(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetMyClanFireteams200Response</returns>
        ApiResponse<FireteamGetMyClanFireteams200Response> FireteamGetMyClanFireteamsWithHttpInfo(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetAvailableClanFireteams200Response</returns>
        FireteamGetAvailableClanFireteams200Response FireteamSearchPublicAvailableClanFireteams(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetAvailableClanFireteams200Response</returns>
        ApiResponse<FireteamGetAvailableClanFireteams200Response> FireteamSearchPublicAvailableClanFireteamsWithHttpInfo(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        System.Threading.Tasks.Task<GroupV2EditGroup200Response> FireteamGetActivePrivateClanFireteamCountAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupV2EditGroup200Response>> FireteamGetActivePrivateClanFireteamCountWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetAvailableClanFireteams200Response</returns>
        System.Threading.Tasks.Task<FireteamGetAvailableClanFireteams200Response> FireteamGetAvailableClanFireteamsAsync(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetAvailableClanFireteams200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireteamGetAvailableClanFireteams200Response>> FireteamGetAvailableClanFireteamsWithHttpInfoAsync(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific fireteam.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetClanFireteam200Response</returns>
        System.Threading.Tasks.Task<FireteamGetClanFireteam200Response> FireteamGetClanFireteamAsync(long fireteamId, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific fireteam.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetClanFireteam200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireteamGetClanFireteam200Response>> FireteamGetClanFireteamWithHttpInfoAsync(long fireteamId, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetMyClanFireteams200Response</returns>
        System.Threading.Tasks.Task<FireteamGetMyClanFireteams200Response> FireteamGetMyClanFireteamsAsync(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetMyClanFireteams200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireteamGetMyClanFireteams200Response>> FireteamGetMyClanFireteamsWithHttpInfoAsync(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetAvailableClanFireteams200Response</returns>
        System.Threading.Tasks.Task<FireteamGetAvailableClanFireteams200Response> FireteamSearchPublicAvailableClanFireteamsAsync(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetAvailableClanFireteams200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<FireteamGetAvailableClanFireteams200Response>> FireteamSearchPublicAvailableClanFireteamsWithHttpInfoAsync(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApi : IFireteamApiSync, IFireteamApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FireteamApi : IFireteamApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FireteamApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FireteamApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FireteamApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FireteamApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupV2EditGroup200Response</returns>
        public GroupV2EditGroup200Response FireteamGetActivePrivateClanFireteamCount(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = FireteamGetActivePrivateClanFireteamCountWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupV2EditGroup200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> FireteamGetActivePrivateClanFireteamCountWithHttpInfo(long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetActivePrivateClanFireteamCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupV2EditGroup200Response>("/Fireteam/Clan/{groupId}/ActiveCount/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupV2EditGroup200Response</returns>
        public async System.Threading.Tasks.Task<GroupV2EditGroup200Response> FireteamGetActivePrivateClanFireteamCountAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response> localVarResponse = await FireteamGetActivePrivateClanFireteamCountWithHttpInfoAsync(groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupV2EditGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GroupV2EditGroup200Response>> FireteamGetActivePrivateClanFireteamCountWithHttpInfoAsync(long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetActivePrivateClanFireteamCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupV2EditGroup200Response>("/Fireteam/Clan/{groupId}/ActiveCount/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetAvailableClanFireteams200Response</returns>
        public FireteamGetAvailableClanFireteams200Response FireteamGetAvailableClanFireteams(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResponse = FireteamGetAvailableClanFireteamsWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetAvailableClanFireteams200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> FireteamGetAvailableClanFireteamsWithHttpInfo(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("publicOnly", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicOnly)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (excludeImmediate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeImmediate", excludeImmediate));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetAvailableClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FireteamGetAvailableClanFireteams200Response>("/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetAvailableClanFireteams200Response</returns>
        public async System.Threading.Tasks.Task<FireteamGetAvailableClanFireteams200Response> FireteamGetAvailableClanFireteamsAsync(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResponse = await FireteamGetAvailableClanFireteamsWithHttpInfoAsync(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetAvailableClanFireteams200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response>> FireteamGetAvailableClanFireteamsWithHttpInfoAsync(int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("publicOnly", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicOnly)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (excludeImmediate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeImmediate", excludeImmediate));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetAvailableClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FireteamGetAvailableClanFireteams200Response>("/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a specific fireteam.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetClanFireteam200Response</returns>
        public FireteamGetClanFireteam200Response FireteamGetClanFireteam(long fireteamId, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetClanFireteam200Response> localVarResponse = FireteamGetClanFireteamWithHttpInfo(fireteamId, groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific fireteam.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetClanFireteam200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<FireteamGetClanFireteam200Response> FireteamGetClanFireteamWithHttpInfo(long fireteamId, long groupId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fireteamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fireteamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetClanFireteam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FireteamGetClanFireteam200Response>("/Fireteam/Clan/{groupId}/Summary/{fireteamId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a specific fireteam.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetClanFireteam200Response</returns>
        public async System.Threading.Tasks.Task<FireteamGetClanFireteam200Response> FireteamGetClanFireteamAsync(long fireteamId, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetClanFireteam200Response> localVarResponse = await FireteamGetClanFireteamWithHttpInfoAsync(fireteamId, groupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific fireteam.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetClanFireteam200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FireteamGetClanFireteam200Response>> FireteamGetClanFireteamWithHttpInfoAsync(long fireteamId, long groupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("fireteamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(fireteamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetClanFireteam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FireteamGetClanFireteam200Response>("/Fireteam/Clan/{groupId}/Summary/{fireteamId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetMyClanFireteams200Response</returns>
        public FireteamGetMyClanFireteams200Response FireteamGetMyClanFireteams(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetMyClanFireteams200Response> localVarResponse = FireteamGetMyClanFireteamsWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetMyClanFireteams200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<FireteamGetMyClanFireteams200Response> FireteamGetMyClanFireteamsWithHttpInfo(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("includeClosed", Org.OpenAPITools.Client.ClientUtils.ParameterToString(includeClosed)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            if (groupFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "groupFilter", groupFilter));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetMyClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FireteamGetMyClanFireteams200Response>("/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetMyClanFireteams200Response</returns>
        public async System.Threading.Tasks.Task<FireteamGetMyClanFireteams200Response> FireteamGetMyClanFireteamsAsync(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetMyClanFireteams200Response> localVarResponse = await FireteamGetMyClanFireteamsWithHttpInfoAsync(groupId, includeClosed, page, platform, groupFilter, langFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored. (deprecated)</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetMyClanFireteams200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FireteamGetMyClanFireteams200Response>> FireteamGetMyClanFireteamsWithHttpInfoAsync(long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("includeClosed", Org.OpenAPITools.Client.ClientUtils.ParameterToString(includeClosed)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            if (groupFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "groupFilter", groupFilter));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamGetMyClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FireteamGetMyClanFireteams200Response>("/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FireteamGetAvailableClanFireteams200Response</returns>
        public FireteamGetAvailableClanFireteams200Response FireteamSearchPublicAvailableClanFireteams(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResponse = FireteamSearchPublicAvailableClanFireteamsWithHttpInfo(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FireteamGetAvailableClanFireteams200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> FireteamSearchPublicAvailableClanFireteamsWithHttpInfo(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (excludeImmediate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeImmediate", excludeImmediate));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamSearchPublicAvailableClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FireteamGetAvailableClanFireteams200Response>("/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FireteamGetAvailableClanFireteams200Response</returns>
        public async System.Threading.Tasks.Task<FireteamGetAvailableClanFireteams200Response> FireteamSearchPublicAvailableClanFireteamsAsync(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResponse = await FireteamSearchPublicAvailableClanFireteamsWithHttpInfoAsync(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FireteamGetAvailableClanFireteams200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FireteamGetAvailableClanFireteams200Response>> FireteamSearchPublicAvailableClanFireteamsWithHttpInfoAsync(int activityType, int dateRange, int page, int platform, int slotFilter, bool? excludeImmediate = default(bool?), string? langFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activityType", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", Org.OpenAPITools.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", Org.OpenAPITools.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", Org.OpenAPITools.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (excludeImmediate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "excludeImmediate", excludeImmediate));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            localVarRequestOptions.Operation = "FireteamApi.FireteamSearchPublicAvailableClanFireteams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FireteamGetAvailableClanFireteams200Response>("/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
