/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ContentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContentApiTests : IDisposable
    {
        private ContentApi instance;

        public ContentApiTests()
        {
            instance = new ContentApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContentApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ContentApi
            //Assert.IsType<ContentApi>(instance);
        }

        /// <summary>
        /// Test ContentGetContentById
        /// </summary>
        [Fact]
        public void ContentGetContentByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //string locale = null;
            //bool? head = null;
            //var response = instance.ContentGetContentById(id, locale, head);
            //Assert.IsType<ContentGetContentById200Response>(response);
        }

        /// <summary>
        /// Test ContentGetContentByTagAndType
        /// </summary>
        [Fact]
        public void ContentGetContentByTagAndTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locale = null;
            //string tag = null;
            //string type = null;
            //bool? head = null;
            //var response = instance.ContentGetContentByTagAndType(locale, tag, type, head);
            //Assert.IsType<ContentGetContentById200Response>(response);
        }

        /// <summary>
        /// Test ContentGetContentType
        /// </summary>
        [Fact]
        public void ContentGetContentTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.ContentGetContentType(type);
            //Assert.IsType<ContentGetContentType200Response>(response);
        }

        /// <summary>
        /// Test ContentRssNewsArticles
        /// </summary>
        [Fact]
        public void ContentRssNewsArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pageToken = null;
            //string? categoryfilter = null;
            //bool? includebody = null;
            //var response = instance.ContentRssNewsArticles(pageToken, categoryfilter, includebody);
            //Assert.IsType<ContentRssNewsArticles200Response>(response);
        }

        /// <summary>
        /// Test ContentSearchContentByTagAndType
        /// </summary>
        [Fact]
        public void ContentSearchContentByTagAndTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locale = null;
            //string tag = null;
            //string type = null;
            //int? currentpage = null;
            //bool? head = null;
            //int? itemsperpage = null;
            //var response = instance.ContentSearchContentByTagAndType(locale, tag, type, currentpage, head, itemsperpage);
            //Assert.IsType<ContentSearchContentWithText200Response>(response);
        }

        /// <summary>
        /// Test ContentSearchContentWithText
        /// </summary>
        [Fact]
        public void ContentSearchContentWithTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locale = null;
            //string? ctype = null;
            //int? currentpage = null;
            //bool? head = null;
            //string? searchtext = null;
            //string? source = null;
            //string? tag = null;
            //var response = instance.ContentSearchContentWithText(locale, ctype, currentpage, head, searchtext, source, tag);
            //Assert.IsType<ContentSearchContentWithText200Response>(response);
        }

        /// <summary>
        /// Test ContentSearchHelpArticles
        /// </summary>
        [Fact]
        public void ContentSearchHelpArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string searchtext = null;
            //string size = null;
            //var response = instance.ContentSearchHelpArticles(searchtext, size);
            //Assert.IsType<ContentSearchHelpArticles200Response>(response);
        }
    }
}
