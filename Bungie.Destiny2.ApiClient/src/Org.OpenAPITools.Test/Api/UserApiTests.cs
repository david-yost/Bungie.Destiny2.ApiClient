/*
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test UserGetAvailableThemes
        /// </summary>
        [Fact]
        public void UserGetAvailableThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserGetAvailableThemes();
            //Assert.IsType<UserGetAvailableThemes200Response>(response);
        }

        /// <summary>
        /// Test UserGetBungieNetUserById
        /// </summary>
        [Fact]
        public void UserGetBungieNetUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.UserGetBungieNetUserById(id);
            //Assert.IsType<UserGetBungieNetUserById200Response>(response);
        }

        /// <summary>
        /// Test UserGetCredentialTypesForTargetAccount
        /// </summary>
        [Fact]
        public void UserGetCredentialTypesForTargetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long membershipId = null;
            //var response = instance.UserGetCredentialTypesForTargetAccount(membershipId);
            //Assert.IsType<UserGetCredentialTypesForTargetAccount200Response>(response);
        }

        /// <summary>
        /// Test UserGetMembershipDataById
        /// </summary>
        [Fact]
        public void UserGetMembershipDataByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long membershipId = null;
            //int membershipType = null;
            //var response = instance.UserGetMembershipDataById(membershipId, membershipType);
            //Assert.IsType<UserGetMembershipDataById200Response>(response);
        }

        /// <summary>
        /// Test UserGetMembershipDataForCurrentUser
        /// </summary>
        [Fact]
        public void UserGetMembershipDataForCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserGetMembershipDataForCurrentUser();
            //Assert.IsType<UserGetMembershipDataById200Response>(response);
        }

        /// <summary>
        /// Test UserGetMembershipFromHardLinkedCredential
        /// </summary>
        [Fact]
        public void UserGetMembershipFromHardLinkedCredentialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string credential = null;
            //int crType = null;
            //var response = instance.UserGetMembershipFromHardLinkedCredential(credential, crType);
            //Assert.IsType<UserGetMembershipFromHardLinkedCredential200Response>(response);
        }

        /// <summary>
        /// Test UserGetSanitizedPlatformDisplayNames
        /// </summary>
        [Fact]
        public void UserGetSanitizedPlatformDisplayNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long membershipId = null;
            //var response = instance.UserGetSanitizedPlatformDisplayNames(membershipId);
            //Assert.IsType<UserGetSanitizedPlatformDisplayNames200Response>(response);
        }

        /// <summary>
        /// Test UserSearchByGlobalNamePost
        /// </summary>
        [Fact]
        public void UserSearchByGlobalNamePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int page = null;
            //UserUserSearchPrefixRequest userUserSearchPrefixRequest = null;
            //var response = instance.UserSearchByGlobalNamePost(page, userUserSearchPrefixRequest);
            //Assert.IsType<UserSearchByGlobalNamePrefix200Response>(response);
        }

        /// <summary>
        /// Test UserSearchByGlobalNamePrefix
        /// </summary>
        [Fact]
        public void UserSearchByGlobalNamePrefixTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string displayNamePrefix = null;
            //int page = null;
            //var response = instance.UserSearchByGlobalNamePrefix(displayNamePrefix, page);
            //Assert.IsType<UserSearchByGlobalNamePrefix200Response>(response);
        }
    }
}
